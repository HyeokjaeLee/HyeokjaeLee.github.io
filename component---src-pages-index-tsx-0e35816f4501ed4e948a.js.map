{"version":3,"file":"component---src-pages-index-tsx-0e35816f4501ed4e948a.js","mappings":"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","sources":["webpack://hyeokjaelee.github.io/./src/components/Bio.tsx","webpack://hyeokjaelee.github.io/./src/components/Meta.tsx","webpack://hyeokjaelee.github.io/./src/hooks/useGetSiteMetaData.ts","webpack://hyeokjaelee.github.io/./src/components/PostCard.tsx","webpack://hyeokjaelee.github.io/./src/hooks/useGetPostDataList.ts","webpack://hyeokjaelee.github.io/./src/components/PostListPagination.tsx","webpack://hyeokjaelee.github.io/./src/components/PostTagTab.tsx","webpack://hyeokjaelee.github.io/./src/pages/index.tsx","webpack://hyeokjaelee.github.io/./node_modules/.pnpm/react-feather@2.0.10_react@18.2.0/node_modules/react-feather/dist/icons/tag.js"],"sourcesContent":["import React from 'react';\n\nimport { useGetSiteMetaData } from '@hooks/useGetSiteMetaData';\nimport { useGetSocialDataList } from '@hooks/useGetSocialDataList';\nimport { useDarkMode } from '@hyeokjaelee/pastime-ui';\n\nimport { Logo } from './Logo';\n\nexport const Bio = () => {\n  const { isDarkMode } = useDarkMode();\n  const socialDataList = useGetSocialDataList();\n  const { title } = useGetSiteMetaData();\n\n  return (\n    <section className=\"flex items-center gap-4\">\n      <div className=\"rounded-full bg-zinc-900 dark:bg-zinc-50 p-4\">\n        <Logo className=\"w-14 h-14\" fill={isDarkMode ? 'black' : 'white'} />\n      </div>\n      <div>\n        <h2 className=\"font-semibold text-xl mb-1\">{title}</h2>\n        <ul className=\"flex gap-2 flex-wrap items-center\">\n          {socialDataList.map(({ name, href, icon: Icon, target }) => (\n            <li key={name}>\n              <a\n                className=\"flex gap-1 text-xs items-center hover:underline cursor-pointer\"\n                href={href}\n                target={target}\n              >\n                <Icon className=\"w-3 h-3\" />\n                <span>{name}</span>\n              </a>\n            </li>\n          ))}\n        </ul>\n      </div>\n    </section>\n  );\n};\n","import React from 'react';\n\nimport { useGetSiteMetaData } from '@hooks/useGetSiteMetaData';\n\ninterface MetaProps {\n  title?: string | null;\n  description?: string | null;\n  children?: React.ReactNode;\n}\n\nexport const Meta = ({ title, description, children }: MetaProps) => {\n  const { title: defaultTitle, description: defaultDescription } =\n    useGetSiteMetaData();\n\n  const metaTitle = title ? `${defaultTitle} | ${title}` : defaultTitle;\n  const metaDescription = description ?? defaultDescription;\n\n  return (\n    <>\n      <title>{metaTitle}</title>\n      <meta\n        name=\"google-site-verification\"\n        content=\"6KHb8V0fAsVjI-k0fZfovmdLDrfikkgwpVMCsfSmvrw\"\n      />\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={metaTitle} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:title\" content={metaTitle} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      <meta name=\"theme-color\" content=\"#000000\" />\n      {children}\n    </>\n  );\n};\n","import { graphql, useStaticQuery } from 'gatsby';\n\nimport type { SiteMetaDataQuery } from 'types';\n\nexport const useGetSiteMetaData = () => {\n  const { site } = useStaticQuery<SiteMetaDataQuery>(graphql`\n    query SiteMetaData {\n      site {\n        siteMetadata {\n          title\n          description\n        }\n      }\n    }\n  `);\n\n  const { title, description } = site?.siteMetadata ?? {};\n\n  if (!title || !description) throw Error('사이트 기본정보 설정이 필요합니다.');\n\n  return { title, description };\n};\n","import React from 'react';\nimport { Tag } from 'react-feather';\n\nimport type { PostData } from '@hooks/useGetPostDataList';\nimport { Skeleton, Tooltip } from '@hyeokjaelee/pastime-ui';\nimport { Link } from '@reach/router';\n\ntype PostCardProps = PostData;\n\nexport const PostCard = ({\n  title,\n  slug,\n  titleImage,\n  description,\n  date,\n  tags,\n}: PostCardProps) => (\n  <li key={slug} className=\"w-full md:w-1/2 lg:w-1/4\">\n    <Link to={slug} className=\"p-2 block hover:pt-0 hover:pb-4 transition-all\">\n      <article className=\"w-full transition-shadow rounded-md hover:shadow-lg dark:shadow-black\">\n        <div className=\"relative w-full h-0 pb-[50%] rounded-t-md overflow-hidden\">\n          <Skeleton className=\"absolute w-full h-full object-cover\" />\n          <img\n            src={titleImage}\n            alt={title}\n            loading=\"lazy\"\n            className=\"absolute w-full h-full object-cover\"\n          />\n        </div>\n        <section className=\"bg-white dark:bg-zinc-700 p-3 flex flex-col\">\n          <h4 className=\"truncate\">{title}</h4>\n          <div className=\"h-[3.75em]\">\n            <p className=\"text-sm line-clamp-3 box-border\">{description}</p>\n          </div>\n        </section>\n        <section className=\"bg-white dark:bg-zinc-700 px-3 py-2 rounded-b-md border-t border-zinc-100 dark:border-zinc-600 flex items-center justify-between\">\n          <div className=\"font-medium text-[0.6em] leading-3\">{date}</div>\n          <Tooltip>\n            <Tooltip.Area>\n              <Tag className=\"w-3 h-3 mt-1 text-zinc-400\" />\n            </Tooltip.Area>\n            <Tooltip.Content className=\"py-1 px-2 text-xs\">\n              {tags.join(', ')}\n            </Tooltip.Content>\n          </Tooltip>\n        </section>\n      </article>\n    </Link>\n  </li>\n);\n","import { useMemo } from 'react';\n\nimport type { PageProps } from 'gatsby';\nimport type { PostPageQuery } from 'types';\n\ntype UseGetPostLIstParams = PageProps<PostPageQuery>;\n\nexport interface PostData {\n  title: string;\n  titleImage: string;\n  tags: string[];\n  slug: string;\n  description: string;\n  date: string;\n}\n\nexport const PAGE_SIZE = 8;\n\nexport const useGetPostDataList = ({\n  data: {\n    allMarkdownRemark: { nodes },\n  },\n  location: { search },\n}: UseGetPostLIstParams) => {\n  const searchParams = new URLSearchParams(search);\n  const page = Number(searchParams.get('page')) || 1;\n  const tag = searchParams.get('tag') || 'all';\n\n  const { postList, tagCountMap } = useMemo(() => {\n    const postList: PostData[] = [];\n    const tagCountMap = new Map<string, number>();\n\n    nodes.forEach((node) => {\n      const { frontmatter, fields } = node;\n      const { title, titleImage, date, description } = frontmatter ?? {};\n      const { slug } = fields ?? {};\n\n      const tags: string[] = [];\n      frontmatter?.tags?.forEach((tag) => {\n        if (tag) tags.push(tag);\n      });\n\n      if (title && titleImage && date && slug && description) {\n        tags.forEach((tag) => {\n          const count = tagCountMap.get(tag) ?? 0;\n          tagCountMap.set(tag, count + 1);\n        });\n\n        postList.push({ title, titleImage, tags, date, slug, description });\n      }\n    });\n\n    return { postList, tagCountMap };\n  }, [nodes]);\n\n  const filteredPostListByTag = postList.filter(({ tags }) => {\n    if (tag === 'all') return true;\n\n    return tags.includes(tag);\n  });\n\n  return {\n    total: filteredPostListByTag.length,\n    page,\n    postList: filteredPostListByTag.slice(\n      (page - 1) * PAGE_SIZE,\n      page * PAGE_SIZE,\n    ),\n    tagCountMap,\n  };\n};\n\nexport type UseGetPostDataListReturn = ReturnType<typeof useGetPostDataList>;\n","import { navigate } from 'gatsby';\n\nimport React from 'react';\n\nimport { PAGE_SIZE } from '@hooks/useGetPostDataList';\nimport type { UseGetPostDataListReturn } from '@hooks/useGetPostDataList';\nimport { Pagination } from '@hyeokjaelee/pastime-ui';\nimport { useLocation } from '@reach/router';\n\ntype PostListPaginationProps = Pick<UseGetPostDataListReturn, 'page' | 'total'>;\n\nexport const PostListPagination = ({\n  page,\n  total,\n}: PostListPaginationProps) => {\n  const { search } = useLocation();\n  const searchParams = new URLSearchParams(search);\n  const selectedTag = searchParams.get('tag');\n\n  return (\n    <section className=\"mt-auto p-5\">\n      <Pagination\n        pageSize={PAGE_SIZE}\n        page={page}\n        size=\"small\"\n        className=\"text-sm font-normal\"\n        totalItems={total}\n        onChange={(page) =>\n          navigate(`?tag=${selectedTag ?? 'all'}&page=${page}`)\n        }\n      />\n    </section>\n  );\n};\n","import { navigate } from 'gatsby';\n\nimport React from 'react';\n\nimport type { UseGetPostDataListReturn } from '@hooks/useGetPostDataList';\nimport { Tab } from '@hyeokjaelee/pastime-ui';\nimport { useLocation } from '@reach/router';\n\ntype PostTagTabProps = Pick<UseGetPostDataListReturn, 'tagCountMap'>;\n\nconst POST_TAG_EMOJI_MAP = new Map([\n  ['all', '📚'],\n  ['issues', '🚧'],\n  ['frontend', '🎨'],\n  ['backend', '🔧'],\n  ['devops', '📦'],\n  ['etc', '🎁'],\n  ['project', '📝'],\n  ['data', '📊'],\n  ['devOps', '📦'],\n]);\n\nexport const PostTagTab = ({ tagCountMap }: PostTagTabProps) => {\n  const { search } = useLocation();\n  const searchParams = new URLSearchParams(search);\n  const selectedTag = searchParams.get('tag');\n  return (\n    <section className=\"w-full flex justify-center sticky top-0 z-10 bg-zinc-100 dark:bg-zinc-900 border-b border-zinc-300 dark:border-zinc-700\">\n      <Tab size=\"small\" className=\"font-normal text-sm\">\n        {['all', ...tagCountMap.keys()].map((tag) => (\n          <Tab.Item\n            key={tag}\n            active={selectedTag === tag || (tag === 'all' && !selectedTag)}\n            onClick={() => navigate(`?tag=${tag}`)}\n          >\n            <span className=\"mr-1 text-xs\">{POST_TAG_EMOJI_MAP.get(tag)}</span>{' '}\n            {tag}\n          </Tab.Item>\n        ))}\n      </Tab>\n    </section>\n  );\n};\n","import { graphql } from 'gatsby';\n\nimport React from 'react';\n\nimport { Bio } from '@components/Bio';\nimport { Meta } from '@components/Meta';\nimport { PostCard } from '@components/PostCard';\nimport { PostListPagination } from '@components/PostListPagination';\nimport { PostTagTab } from '@components/PostTagTab';\nimport { useGetPostDataList } from '@hooks/useGetPostDataList';\n\nimport type { PageProps } from 'gatsby';\nimport type { PostPageQuery } from 'types';\n\nconst PostPage = (pageProps: PageProps<PostPageQuery>) => {\n  const { postList, total, page, tagCountMap } = useGetPostDataList(pageProps);\n\n  return (\n    <article className=\"flex flex-col items-center justify-between h-full\">\n      <header className=\"py-7\">\n        <Bio />\n      </header>\n      <div className=\"flex flex-col items-center gap-1 w-full\">\n        <PostTagTab tagCountMap={tagCountMap} />\n        <ul className=\"flex flex-wrap w-full px-2 max-w-6xl mx-auto\">\n          {postList.map((postData) => (\n            <PostCard {...postData} key={postData.slug} />\n          ))}\n        </ul>\n      </div>\n      <PostListPagination total={total} page={page} />\n    </article>\n  );\n};\n\nexport default PostPage;\n\nexport const Head = () => <Meta title=\"posts\" />;\n\nexport const postPageQuery = graphql`\n  query PostPage {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"YY년 MM월 DD일\")\n          title\n          titleImage\n          tags\n          description\n        }\n      }\n    }\n  }\n`;\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Tag = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"7\",\n    y1: \"7\",\n    x2: \"7.01\",\n    y2: \"7\"\n  }));\n});\nTag.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nTag.displayName = 'Tag';\nexport default Tag;"],"names":["Bio","isDarkMode","useDarkMode","socialDataList","useGetSocialDataList","title","useGetSiteMetaData","React","className","Logo","fill","map","_ref","name","href","icon","Icon","target","key","Meta","description","children","defaultTitle","defaultDescription","metaTitle","metaDescription","content","property","_site$siteMetadata","site","useStaticQuery","siteMetadata","Error","PostCard","slug","titleImage","date","tags","Link","to","Skeleton","src","alt","loading","Tooltip","Area","Tag","Content","join","PostListPagination","page","total","search","useLocation","selectedTag","URLSearchParams","get","Pagination","pageSize","size","totalItems","onChange","navigate","POST_TAG_EMOJI_MAP","Map","PostTagTab","tagCountMap","Tab","concat","_toConsumableArray","keys","tag","Item","active","onClick","pageProps","postList","data","allMarkdownRemark","nodes","location","searchParams","Number","useMemo","forEach","node","_frontmatter$tags","frontmatter","fields","push","_tagCountMap$get","count","set","filteredPostListByTag","filter","_ref2","includes","length","slice","useGetPostDataList","postData","Object","assign","Head","_extends","i","arguments","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","forwardRef","ref","_ref$color","color","_ref$size","rest","xmlns","width","height","viewBox","stroke","strokeWidth","strokeLinecap","strokeLinejoin","d","x1","y1","x2","y2","propTypes","displayName"],"sourceRoot":""}