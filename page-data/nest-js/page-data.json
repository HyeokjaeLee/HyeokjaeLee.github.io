{
    "componentChunkName": "component---src-layout-post-tsx",
    "path": "/nest-js/",
    "result": {"data":{"markdownRemark":{"html":"<h2>NestJS를 사용하는 이유</h2>\n<p>NestJS는 Express와 함께 Node.js의 유명한 웹 애플리케이션 프레임워크이다.</p>\n<p>Express와 용도는 같지만 사용해보면 둘은 다른 점이 많다.</p>\n<h3>📏 코드의 통일성</h3>\n<p>Express에 비해 NestJS는 개발 구조에 대한 자유도 낮다.</p>\n<p>자유도가 높을수록 좋은 것이 아닌가 하고 생각할 수 있지만 자유도가 높다는 말은 통일성이 부족하다는 말도 된다.</p>\n<p>프로그램의 규모가 커지고 여러 명의 사람들과 협업을 하다 보면 이런 자유도가 오히려 독이 되는 경우가 많다.</p>\n<p>나 역시 프로젝트를 위해 다른 사람들의 Express 코드들을 찾아볼 때 개발자들마다 다른 코드 구조 때문에 특정 역할을 하는 코드를 찾는데 애먹는 경우가 많다.</p>\n<p>NestJS는 자유도를 낮추는 대신 이런 문제점들을 개선했다고 볼 수 있다.</p>\n<p>정의된 각 클래스마다 역할이 있고 제한된 NestJS의 구조안에서 개발을 진행하게 된다.</p>\n<p>이런 제한된 구조가 코드의 통일성을 높여준다.</p>\n<h3>⚙️ Module class</h3>\n<p>NestJS는 관련 있는 기능들 등을 한 module class에 담아 캡슐화한다.</p>\n<p>각 module들은 서로 import 가능하며 이는 코드 간 의존성을 낮춰준다.</p>\n<p>즉 확장성, 유지보수성, 테스트 가능성 등이 향상된다.</p>\n<h3>🏷️ Typescript</h3>\n<p>NestJS는 기본적으로 Typescript를 지원하며 Typescript 사용을 권장한다.</p>\n<p>Express에서 Typescript를 사용하려면 직접 여러 가지 설정을 해주어야 하는 번거로움이 있지만 NestJS는 아무런 설정 없이 바로 사용이 가능하다.</p>\n<p>나는 평소 Express 코드를 작성할 때도 Typescript를 사용하는데 이는 컴파일 단계에서 오류를 잡아주어 애플리케이션의 예상치 못한 문제들을 미리 방지해준다.</p>\n<p>NestJS는 이러한 Typescript의 장점을 기본적으로 가지고 있다고 볼 수 있다.</p>\n<h3>🧪 간편한 테스트</h3>\n<p>NestJS의 구조를 보면 spec.ts 파일들을 볼 수 있는데 이는 테스트를 위한 파일이다.</p>\n<p>기본적으로 NestJS가 간편한 Unit test를 지원한다.</p>\n<p>나도 테스트의 중요성은 알고는 있지만 실제로 NestJS의 그것을 잘 사용하지 않기 때문에 더 이상 뭐라 말할 수는 없을 것 같다.</p>\n<p><br/>그 외에도 여러 가지 NestJS의 장점들이 있지만 자세한 내용은 <a href=\"https://nestjs.com/\">NestJS 공식 문서</a>를 확인해보시는걸 추천한다.</p>\n<h2>새 프로젝트 생성</h2>\n<p>NestJS 프로젝트 생성 방법은 여러 가지가 있지만 이 글에서는 CLI를 통한 방법을 기준으로 설명하겠다.</p>\n<h3>전역으로 NestJS CLI 설치</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ npm i -g @nestjs/cli</code>\n        </deckgo-highlight-code>\n<h3>CLI를 통해 새 프로젝트 생성</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ nest new &lt;프로젝트명&gt;</code>\n        </deckgo-highlight-code>\n<h3>기본 구조</h3>\n<div class=\"img-txt-wrap\">\n  <div class=\"img-wrap\">\n    <img width=\"400\" src=\"https://user-images.githubusercontent.com/71566740/139356716-cf4718d2-30e0-428f-a47b-efc9f37ebf3f.png\"/>\n  </div>\n</div>\n<p>생성된 프로젝트의 src 구조는 위와 같다.</p>\n<ul>\n<li><strong>app.controller.spc.ts:</strong> 유닛 테스트를 위한 파일</li>\n<li><strong>app.controller.ts:</strong> 기본 Controller</li>\n<li><strong>app.module.ts:</strong> root 모듈을 정의</li>\n<li><strong>app.service.ts:</strong> 관련있는 기능들을 클래스에 분리해서 작성하고 사용 시 controller에 import해서 사용</li>\n<li><strong>main.ts:</strong> NestFactory instance를 생성하는 엔트리 파일</li>\n</ul>\n<h3><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>Node.js</title><path d=\"M11.998,24c-0.321,0-0.641-0.084-0.922-0.247l-2.936-1.737c-0.438-0.245-0.224-0.332-0.08-0.383 c0.585-0.203,0.703-0.25,1.328-0.604c0.065-0.037,0.151-0.023,0.218,0.017l2.256,1.339c0.082,0.045,0.197,0.045,0.272,0l8.795-5.076 c0.082-0.047,0.134-0.141,0.134-0.238V6.921c0-0.099-0.053-0.192-0.137-0.242l-8.791-5.072c-0.081-0.047-0.189-0.047-0.271,0 L3.075,6.68C2.99,6.729,2.936,6.825,2.936,6.921v10.15c0,0.097,0.054,0.189,0.139,0.235l2.409,1.392 c1.307,0.654,2.108-0.116,2.108-0.89V7.787c0-0.142,0.114-0.253,0.256-0.253h1.115c0.139,0,0.255,0.112,0.255,0.253v10.021 c0,1.745-0.95,2.745-2.604,2.745c-0.508,0-0.909,0-2.026-0.551L2.28,18.675c-0.57-0.329-0.922-0.945-0.922-1.604V6.921 c0-0.659,0.353-1.275,0.922-1.603l8.795-5.082c0.557-0.315,1.296-0.315,1.848,0l8.794,5.082c0.57,0.329,0.924,0.944,0.924,1.603 v10.15c0,0.659-0.354,1.273-0.924,1.604l-8.794,5.078C12.643,23.916,12.324,24,11.998,24z M19.099,13.993 c0-1.9-1.284-2.406-3.987-2.763c-2.731-0.361-3.009-0.548-3.009-1.187c0-0.528,0.235-1.233,2.258-1.233 c1.807,0,2.473,0.389,2.747,1.607c0.024,0.115,0.129,0.199,0.247,0.199h1.141c0.071,0,0.138-0.031,0.186-0.081 c0.048-0.054,0.074-0.123,0.067-0.196c-0.177-2.098-1.571-3.076-4.388-3.076c-2.508,0-4.004,1.058-4.004,2.833 c0,1.925,1.488,2.457,3.895,2.695c2.88,0.282,3.103,0.703,3.103,1.269c0,0.983-0.789,1.402-2.642,1.402 c-2.327,0-2.839-0.584-3.011-1.742c-0.02-0.124-0.126-0.215-0.253-0.215h-1.137c-0.141,0-0.254,0.112-0.254,0.253 c0,1.482,0.806,3.248,4.655,3.248C17.501,17.007,19.099,15.91,19.099,13.993z\"/></svg>생성된 프로젝트 실행</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ npm run start</code>\n        </deckgo-highlight-code>\n<p>위 명령으로 실행이 가능하며 <code>http://localhost:3000/</code>로 이동해 \"Hello World!\"가 표시됨을 알 수 있다.</p>\n<h2>예제 코드 작성</h2>\n<p>위 Hello World!를 return 하는 코드는 <code>app.service.ts</code>에 있으며 이를 <code>app.controller.ts</code>에서 import하고 <code>app.module.ts</code>에 이런 내용들이 정의되어 있는 것을 확인할 수 있다.</p>\n<p>글만으로는 이해하기가 어렵다.</p>\n<p>직접 코드를 작성하고 실행해보면서 알아보자</p>\n<p><br/>아래 내용들은 내가 NestJS를 쓰면서 자주 사용하는 일부 내용들에 대한 코드이다.</p>\n<p>보면 알겠지만 NestJS는 Typescript의 데코레이터를 적극적으로 사용하고 있다.</p>\n<h3><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>TypeScript</title><path d=\"M1.125 0C.502 0 0 .502 0 1.125v21.75C0 23.498.502 24 1.125 24h21.75c.623 0 1.125-.502 1.125-1.125V1.125C24 .502 23.498 0 22.875 0zm17.363 9.75c.612 0 1.154.037 1.627.111a6.38 6.38 0 0 1 1.306.34v2.458a3.95 3.95 0 0 0-.643-.361 5.093 5.093 0 0 0-.717-.26 5.453 5.453 0 0 0-1.426-.2c-.3 0-.573.028-.819.086a2.1 2.1 0 0 0-.623.242c-.17.104-.3.229-.393.374a.888.888 0 0 0-.14.49c0 .196.053.373.156.529.104.156.252.304.443.444s.423.276.696.41c.273.135.582.274.926.416.47.197.892.407 1.266.628.374.222.695.473.963.753.268.279.472.598.614.957.142.359.214.776.214 1.253 0 .657-.125 1.21-.373 1.656a3.033 3.033 0 0 1-1.012 1.085 4.38 4.38 0 0 1-1.487.596c-.566.12-1.163.18-1.79.18a9.916 9.916 0 0 1-1.84-.164 5.544 5.544 0 0 1-1.512-.493v-2.63a5.033 5.033 0 0 0 3.237 1.2c.333 0 .624-.03.872-.09.249-.06.456-.144.623-.25.166-.108.29-.234.373-.38a1.023 1.023 0 0 0-.074-1.089 2.12 2.12 0 0 0-.537-.5 5.597 5.597 0 0 0-.807-.444 27.72 27.72 0 0 0-1.007-.436c-.918-.383-1.602-.852-2.053-1.405-.45-.553-.676-1.222-.676-2.005 0-.614.123-1.141.369-1.582.246-.441.58-.804 1.004-1.089a4.494 4.494 0 0 1 1.47-.629 7.536 7.536 0 0 1 1.77-.201zm-15.113.188h9.563v2.166H9.506v9.646H6.789v-9.646H3.375z\"/></svg>app.service.ts</h3>\n<p>GetTest()를 추가해주고 constructor에 실행 순서를 알 수 있는 콘솔 출력을 추가해준다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">import { Injectable } from &quot;@nestjs/common&quot;;\n\n@Injectable()\nexport class AppService {\n  constructor() {\n    console.log(&quot;서비스 생성&quot;);\n  }\n  getHello(): string {\n    return &quot;Hello World!&quot;;\n  }\n  getTest(): string {\n    return &quot;이것은 테스트입니다.&quot;;\n  }\n}</code>\n        </deckgo-highlight-code>\n<h3><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>TypeScript</title><path d=\"M1.125 0C.502 0 0 .502 0 1.125v21.75C0 23.498.502 24 1.125 24h21.75c.623 0 1.125-.502 1.125-1.125V1.125C24 .502 23.498 0 22.875 0zm17.363 9.75c.612 0 1.154.037 1.627.111a6.38 6.38 0 0 1 1.306.34v2.458a3.95 3.95 0 0 0-.643-.361 5.093 5.093 0 0 0-.717-.26 5.453 5.453 0 0 0-1.426-.2c-.3 0-.573.028-.819.086a2.1 2.1 0 0 0-.623.242c-.17.104-.3.229-.393.374a.888.888 0 0 0-.14.49c0 .196.053.373.156.529.104.156.252.304.443.444s.423.276.696.41c.273.135.582.274.926.416.47.197.892.407 1.266.628.374.222.695.473.963.753.268.279.472.598.614.957.142.359.214.776.214 1.253 0 .657-.125 1.21-.373 1.656a3.033 3.033 0 0 1-1.012 1.085 4.38 4.38 0 0 1-1.487.596c-.566.12-1.163.18-1.79.18a9.916 9.916 0 0 1-1.84-.164 5.544 5.544 0 0 1-1.512-.493v-2.63a5.033 5.033 0 0 0 3.237 1.2c.333 0 .624-.03.872-.09.249-.06.456-.144.623-.25.166-.108.29-.234.373-.38a1.023 1.023 0 0 0-.074-1.089 2.12 2.12 0 0 0-.537-.5 5.597 5.597 0 0 0-.807-.444 27.72 27.72 0 0 0-1.007-.436c-.918-.383-1.602-.852-2.053-1.405-.45-.553-.676-1.222-.676-2.005 0-.614.123-1.141.369-1.582.246-.441.58-.804 1.004-1.089a4.494 4.494 0 0 1 1.47-.629 7.536 7.536 0 0 1 1.77-.201zm-15.113.188h9.563v2.166H9.506v9.646H6.789v-9.646H3.375z\"/></svg>app.controller.ts</h3>\n<p>테스트를 위한 컨트롤러를 추가해준다.\ntest 컨트롤러의 root path에는 위에서 만들었던 getTest()를 사용해 줄 거다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">import { Controller, Get, Query } from &quot;@nestjs/common&quot;;\nimport { AppService } from &quot;./app.service&quot;;\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n@Controller(&quot;test&quot;) //테스트를 위한 컨트롤러\nexport class TestController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getTest(); //app.service.ts에 추가했던 GetTest()\n  }\n  @Get(&quot;query-test&quot;)\n  getTest(@Query(&quot;query&quot;) query: string): string {\n    return `입력받은 쿼리는 ${query}입니다.`;\n  }\n  @Get(&quot;middleware-test&quot;)\n  getTestMiddleware(): string {\n    console.log(&quot;middleware-test 컨트롤러&quot;);\n    return &quot;middleware-test 컨트롤러&quot;;\n  }\n  @Get(&quot;middleware-test2&quot;)\n  getTestMiddleware2(): string {\n    console.log(&quot;middleware-test2 컨트롤러&quot;);\n    return &quot;middleware-test2 컨트롤러&quot;;\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>기본적으로 @Controller(\"test\")는 localhost:3000/test에 라우팅되며 @Get()의 파라미터에 따라 endpoint를 지정할 수 있다.</p>\n<ul>\n<li><strong>@Get( )</strong>: localhost:{port}/test</li>\n<li><strong>@Get(\"query-test\")</strong>: localhost:3000/test/query-test</li>\n<li><strong>@Get(\"middleware-test\")</strong>: localhost:3000/test/middleware-test</li>\n<li><strong>@Get(\"middleware-test2\")</strong>: localhost:3000/test/middleware-test2</li>\n</ul>\n<h3><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>TypeScript</title><path d=\"M1.125 0C.502 0 0 .502 0 1.125v21.75C0 23.498.502 24 1.125 24h21.75c.623 0 1.125-.502 1.125-1.125V1.125C24 .502 23.498 0 22.875 0zm17.363 9.75c.612 0 1.154.037 1.627.111a6.38 6.38 0 0 1 1.306.34v2.458a3.95 3.95 0 0 0-.643-.361 5.093 5.093 0 0 0-.717-.26 5.453 5.453 0 0 0-1.426-.2c-.3 0-.573.028-.819.086a2.1 2.1 0 0 0-.623.242c-.17.104-.3.229-.393.374a.888.888 0 0 0-.14.49c0 .196.053.373.156.529.104.156.252.304.443.444s.423.276.696.41c.273.135.582.274.926.416.47.197.892.407 1.266.628.374.222.695.473.963.753.268.279.472.598.614.957.142.359.214.776.214 1.253 0 .657-.125 1.21-.373 1.656a3.033 3.033 0 0 1-1.012 1.085 4.38 4.38 0 0 1-1.487.596c-.566.12-1.163.18-1.79.18a9.916 9.916 0 0 1-1.84-.164 5.544 5.544 0 0 1-1.512-.493v-2.63a5.033 5.033 0 0 0 3.237 1.2c.333 0 .624-.03.872-.09.249-.06.456-.144.623-.25.166-.108.29-.234.373-.38a1.023 1.023 0 0 0-.074-1.089 2.12 2.12 0 0 0-.537-.5 5.597 5.597 0 0 0-.807-.444 27.72 27.72 0 0 0-1.007-.436c-.918-.383-1.602-.852-2.053-1.405-.45-.553-.676-1.222-.676-2.005 0-.614.123-1.141.369-1.582.246-.441.58-.804 1.004-1.089a4.494 4.494 0 0 1 1.47-.629 7.536 7.536 0 0 1 1.77-.201zm-15.113.188h9.563v2.166H9.506v9.646H6.789v-9.646H3.375z\"/></svg>TestMiddleware.ts</h3>\n<p>Middleware도 한번 만들어 보자</p>\n<p>src/middleware 경로에 <code>TestMiddleware.ts</code>을 만들어준다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">import { Injectable, NestMiddleware } from &quot;@nestjs/common&quot;;\n@Injectable()\nexport class TestMiddleware implements NestMiddleware {\n  use(req: any, res: any, next: () =&gt; void): any {\n    console.log(&quot;테스트 미들웨어 1 실행&quot;);\n    const query = req.query.name;\n    res.send(`테스트 미들웨어 쿼리 name=${query}`);\n    return; //Middleware 이후 코드 실행X\n  }\n}\n\n@Injectable()\nexport class TestMiddleware2 implements NestMiddleware {\n  use(req: any, res: any, next: () =&gt; void): any {\n    console.log(req.query);\n    console.log(&quot;테스트 미들웨어 2 실행&quot;);\n    next(); //Middleware 이후 코드를 실행\n  }\n}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>\n<p>첫번째 <code>TestMiddleware</code>는 쿼리를 받고 직접 해당 주소에 뿌려주는 코드이다.</p>\n<p>Express와 같이 <code>res.json</code>, <code>res.send</code>를 사용한다.</p>\n</li>\n<li>\n<p>두번째 <code>TestMiddleware2</code> 단순 실행 후 실행되었다는 콘솔만 출력해주는 코드이다.</p>\n</li>\n</ul>\n<h3><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>TypeScript</title><path d=\"M1.125 0C.502 0 0 .502 0 1.125v21.75C0 23.498.502 24 1.125 24h21.75c.623 0 1.125-.502 1.125-1.125V1.125C24 .502 23.498 0 22.875 0zm17.363 9.75c.612 0 1.154.037 1.627.111a6.38 6.38 0 0 1 1.306.34v2.458a3.95 3.95 0 0 0-.643-.361 5.093 5.093 0 0 0-.717-.26 5.453 5.453 0 0 0-1.426-.2c-.3 0-.573.028-.819.086a2.1 2.1 0 0 0-.623.242c-.17.104-.3.229-.393.374a.888.888 0 0 0-.14.49c0 .196.053.373.156.529.104.156.252.304.443.444s.423.276.696.41c.273.135.582.274.926.416.47.197.892.407 1.266.628.374.222.695.473.963.753.268.279.472.598.614.957.142.359.214.776.214 1.253 0 .657-.125 1.21-.373 1.656a3.033 3.033 0 0 1-1.012 1.085 4.38 4.38 0 0 1-1.487.596c-.566.12-1.163.18-1.79.18a9.916 9.916 0 0 1-1.84-.164 5.544 5.544 0 0 1-1.512-.493v-2.63a5.033 5.033 0 0 0 3.237 1.2c.333 0 .624-.03.872-.09.249-.06.456-.144.623-.25.166-.108.29-.234.373-.38a1.023 1.023 0 0 0-.074-1.089 2.12 2.12 0 0 0-.537-.5 5.597 5.597 0 0 0-.807-.444 27.72 27.72 0 0 0-1.007-.436c-.918-.383-1.602-.852-2.053-1.405-.45-.553-.676-1.222-.676-2.005 0-.614.123-1.141.369-1.582.246-.441.58-.804 1.004-1.089a4.494 4.494 0 0 1 1.47-.629 7.536 7.536 0 0 1 1.77-.201zm-15.113.188h9.563v2.166H9.506v9.646H6.789v-9.646H3.375z\"/></svg>app.module.ts</h3>\n<p>이제 위에서 만들었던 컨트롤러와 미들웨어를 추가해줘야 한다.</p>\n<p><code>controllers</code>에 위에서 만들어 <code>TestController</code>를 추가해준다.</p>\n<p><code>AppModule</code>에는 다음과 같은 코드를 추가해준다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">import { MiddlewareConsumer, Module, NestModule, RequestMethod } from &quot;@nestjs/common&quot;;\nimport { AppController, TestController } from &quot;./app.controller&quot;;\nimport { AppService } from &quot;./app.service&quot;;\nimport { TestMiddleware, TestMiddleware2 } from &quot;./middleware/TestMiddleware&quot;;\n\n@Module({\n  imports: [],\n  controllers: [AppController, TestController], //TestController추가\n  providers: [AppService],\n})\nexport class AppModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer\n      .apply(TestMiddleware)\n      .forRoutes({ path: &quot;test/middleware-test/*&quot;, method: RequestMethod.GET }); //테스트 미들웨어1 추가\n    consumer.apply(TestMiddleware2).forRoutes(&quot;test/middleware-test2&quot;); //테스트 미들웨어2 추가\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>apply()에는 사용할 미들웨어를 지정해준다.</p>\n<p>forRoutes에서 Routing path를 지정해줄수 있다.</p>\n<ul>\n<li>\n<p><strong>routing path는 wildcards를 이용해 작성할 수 있다.</strong></p>\n<p>예를 들어 별표(*)는 와일드카드로 사용되며 모든 문자조합과 일치한다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">forRoutes({ path: &quot;ab*cd&quot;, method: RequestMethod.ALL });</code>\n        </deckgo-highlight-code>\n<p><code>ab*cd</code> 라우트 경로는 abcd, ab_cd, abecd 등과 일치한다.</p>\n<p>?,+,*및()문자는 라우트 경로에 사용될 수 있으며 해당 정규표현식 대응 부분의 하위집합이다.</p>\n<p>하이픈(-)과 점(.)은 문자열 기반 경로로 문자 그대로 해석된다.</p>\n</li>\n<li>\n<p><strong>forRoutes()에는 여러개의 path를 콤마(,)를 이용해 지정할 수 있다.</strong></p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">forRoutes(&quot;test/middleware-test&quot;, &quot;test/middleware-test2&quot;);</code>\n        </deckgo-highlight-code>\n</li>\n</ul>\n<h3><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>Node.js</title><path d=\"M11.998,24c-0.321,0-0.641-0.084-0.922-0.247l-2.936-1.737c-0.438-0.245-0.224-0.332-0.08-0.383 c0.585-0.203,0.703-0.25,1.328-0.604c0.065-0.037,0.151-0.023,0.218,0.017l2.256,1.339c0.082,0.045,0.197,0.045,0.272,0l8.795-5.076 c0.082-0.047,0.134-0.141,0.134-0.238V6.921c0-0.099-0.053-0.192-0.137-0.242l-8.791-5.072c-0.081-0.047-0.189-0.047-0.271,0 L3.075,6.68C2.99,6.729,2.936,6.825,2.936,6.921v10.15c0,0.097,0.054,0.189,0.139,0.235l2.409,1.392 c1.307,0.654,2.108-0.116,2.108-0.89V7.787c0-0.142,0.114-0.253,0.256-0.253h1.115c0.139,0,0.255,0.112,0.255,0.253v10.021 c0,1.745-0.95,2.745-2.604,2.745c-0.508,0-0.909,0-2.026-0.551L2.28,18.675c-0.57-0.329-0.922-0.945-0.922-1.604V6.921 c0-0.659,0.353-1.275,0.922-1.603l8.795-5.082c0.557-0.315,1.296-0.315,1.848,0l8.794,5.082c0.57,0.329,0.924,0.944,0.924,1.603 v10.15c0,0.659-0.354,1.273-0.924,1.604l-8.794,5.078C12.643,23.916,12.324,24,11.998,24z M19.099,13.993 c0-1.9-1.284-2.406-3.987-2.763c-2.731-0.361-3.009-0.548-3.009-1.187c0-0.528,0.235-1.233,2.258-1.233 c1.807,0,2.473,0.389,2.747,1.607c0.024,0.115,0.129,0.199,0.247,0.199h1.141c0.071,0,0.138-0.031,0.186-0.081 c0.048-0.054,0.074-0.123,0.067-0.196c-0.177-2.098-1.571-3.076-4.388-3.076c-2.508,0-4.004,1.058-4.004,2.833 c0,1.925,1.488,2.457,3.895,2.695c2.88,0.282,3.103,0.703,3.103,1.269c0,0.983-0.789,1.402-2.642,1.402 c-2.327,0-2.839-0.584-3.011-1.742c-0.02-0.124-0.126-0.215-0.253-0.215h-1.137c-0.141,0-0.254,0.112-0.254,0.253 c0,1.482,0.806,3.248,4.655,3.248C17.501,17.007,19.099,15.91,19.099,13.993z\"/></svg>실행</h3>\n<p>이제 위에서 작성했던 코드들을 실행해보자</p>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ npm run start</code>\n        </deckgo-highlight-code>\n<h4>다음은 위의 코드의 몇가지 예시이다.</h4>\n<p><code>app.service.ts</code>의 <code>AppService</code> 클래스 생성에서 작성했던 콘솔이 1회 출력됨을 알 수 있다.</p>\n<ul>\n<li>\n<p><strong><a href=\"http://localhost:3000/test\">http://localhost:3000/test</a></strong></p>\n<p><code>app.service.ts</code>에서 작성했던 \"이것은 테스트입니다.\"가 페이지에 출력됨을 알 수 있다.</p>\n</li>\n<li>\n<p><strong><a href=\"http://localhost:3000/test/middleware-test\">http://localhost:3000/test/middleware-test</a></strong></p>\n<p><code>app.controller.ts</code>에서 작성했던 <code>middleware-test 컨트롤러</code>가 페이지와 콘솔에 출력됨을 확인할 수 있다.</p>\n<p>우리는 <code>app.module.ts</code>에서 path를 <code>test/middleware-test/*</code>로 지정해줬으므로 미들웨어가 실행되지 않음을 알 수 있다.</p>\n</li>\n<li>\n<p><strong><a href=\"http://localhost:3000/test/middleware-test/test?name=nagle\">http://localhost:3000/test/middleware-test/test?name=nagle</a></strong></p>\n<p>미들웨어가 실행되고 name이라는 쿼리를 받아 미들웨어에서 직접 페이지에 표시하는 것을 확인할 수 있다.</p>\n</li>\n</ul>\n<p>그 외에도 위 코드를 통해 각 클래스들의 실행 순서나 기능을 알 수 있으므로 직접 여러 가지를 시도해보는 것을 추천한다.</p>","frontmatter":{"title":"NestJS 웹서버 구축하기","titleImage":"https://user-images.githubusercontent.com/71566740/139354021-96e05704-52c7-466f-857a-4046a2a5f916.png","date":"2021-10-29","description":"Typescript를 이용한 NestJS 코드 작성","tags":["Backend","Typescript"]},"fields":{"slug":"/nest-js/"},"id":"9be8dafe-9937-5b5c-9cb7-b9fdb6a71285"},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/employment-memoirs/"},"frontmatter":{"description":"평범한 대학생 개발자의 2022년 상반기 취업과정","title":"대학생 개발자 취업 회고"},"id":"7f673a90-03bd-5ac5-8d72-14fae351d9e0"},{"fields":{"slug":"/blog-remake-review2/"},"frontmatter":{"description":"Next.js에서 Gatsby로 블로그를 이전하고 느낀점","title":"Gatsby 블로그 이전"},"id":"66f8e34d-dd75-54d9-9928-619d1a68c20b"},{"fields":{"slug":"/covid-19-api-update/"},"frontmatter":{"description":"단계적 일상회복에 따른 Covid-19 API 업데이트","title":"Covid-19 API 업데이트"},"id":"5956065c-b437-5b02-8cbd-ce47c45adbf4"},{"fields":{"slug":"/korea-webtoon-api-update/"},"frontmatter":{"description":"Daum 웹툰의 개편으로 인한 API 업데이트","title":"Webtoon API 업데이트"},"id":"b336fa51-6beb-5eaf-b978-4cb0f7e04eef"},{"fields":{"slug":"/nest-js/"},"frontmatter":{"description":"Typescript를 이용한 NestJS 코드 작성","title":"NestJS 웹서버 구축하기"},"id":"9be8dafe-9937-5b5c-9cb7-b9fdb6a71285"},{"fields":{"slug":"/knu-lms-scheduler/"},"frontmatter":{"description":"공주대학교 비대면 강의 시스템 편의성 개선 프로젝트","title":"KNU LMS Scheduler 프로젝트"},"id":"1bc99fde-1275-575d-85f5-5c2d89765a66"},{"fields":{"slug":"/gititle-project/"},"frontmatter":{"description":"좋은 커밋 메시지를 작성하기 위한 프로젝트","title":"Gititle 프로젝트"},"id":"718ca256-6e60-5405-acb8-a92955aaacda"},{"fields":{"slug":"/sass-compiler/"},"frontmatter":{"description":"편리한 Sass 사용을 위한 익스텐션","title":"Live Sass Compiler 사용하기"},"id":"bdbf997d-0b77-50e1-9c1e-412cf09423e7"},{"fields":{"slug":"/nodejs-crawling/"},"frontmatter":{"description":"Node.js 크롤링을 통한 데이터 수집","title":"크롤링을 통한 데이터 수집하기"},"id":"70d13f6a-02bb-5580-b6ed-6061ed010355"},{"fields":{"slug":"/copilot-review/"},"frontmatter":{"description":"Github의 코딩 AI, Copilot 한 달 사용 리뷰","title":"Copilot 사용 후기"},"id":"e3d28e01-5ce6-57c4-b10d-d8df723ba9d3"},{"fields":{"slug":"/typescript-express/"},"frontmatter":{"description":"Typescript를 이용한 Express 코드 작성","title":"Typescript + Express 웹서버 구축하기"},"id":"dd28572f-2b42-58af-bfc5-d71794756e73"},{"fields":{"slug":"/blog-remake-review1/"},"frontmatter":{"description":"Next.js에서 Gatsby로 블로그를 이전하면서 느낀점","title":"Gatsby 블로그 이전 중간 리뷰"},"id":"d3542b4e-6377-5d75-b9c1-710d9e467d38"},{"fields":{"slug":"/good-commit-message/"},"frontmatter":{"description":"Git Commit Message 작성을 위한 나와의 약속","title":"Git Commit Message Convention"},"id":"3dfd85ee-9b0d-5339-bc8e-5bc5fdf0f81b"}]}},"pageContext":{"slug":"/nest-js/"}},
    "staticQueryHashes": []}