{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/nest-js/","result":{"data":{"markdownRemark":{"id":"8848ceac-a7f1-5fbd-a221-dcfa1096816c","html":"<p class=\"my-4 whitespace-pre-wrap\">NestJS는 Express와 함께 Node.js의 대표적인 서버 구축을 위한 프레임워크 중 하나이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">Express와 용도는 같지만 사용해보면 둘은 다른 점이 많다.</p>\n<h2 id=\"nestjs를-사용하는-이유\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#nestjs%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"nestjs를 사용하는 이유 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NestJS를 사용하는 이유</h2>\n<p class=\"my-4 whitespace-pre-wrap\">아래 내용들은 내가 NestJS를 사용하는 이유이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">개인적인 선호가 포함된 부분들도 있어서 참고만 하고 자세한 내용은 <a href=\"https://docs.nestjs.com/\" class=\"text-blue-500 hover:underline\">NestJS 공식문서</a>를 참고하는 게 좋다.</p>\n<h3 id=\"코드의-통일성\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#%EC%BD%94%EB%93%9C%EC%9D%98-%ED%86%B5%EC%9D%BC%EC%84%B1\" aria-label=\"코드의 통일성 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드의 통일성</h3>\n<p class=\"my-4 whitespace-pre-wrap\">Express에 비해 NestJS는 개발 구조에 대한 자유도 낮다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">자유도가 높을수록 좋은 것이 아닌가 하고 생각할 수 있지만 자유도가 높다는 말은 통일성이 부족하다는 말도 된다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">프로그램의 규모가 커지고 여러 명의 사람들과 협업을 하다 보면 이런 자유도가 오히려 독이 되는 경우가 많다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">개인적으로 다른 사람들의 Express 코드들을 찾아볼 때 개발자들마다 다른 코드 구조 때문에 특정 역할을 하는 코드를 찾는데 애먹는 경우가 많았다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS는 자유도를 낮추는 대신 이런 문제점들을 개선했다고 볼 수 있다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">정의된 각 클래스마다 역할이 있고 제한된 NestJS의 구조안에서 개발을 진행하게 된다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">이런 제한된 구조가 코드의 통일성을 높여준다.</p>\n<h3 id=\"module-class\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#module-class\" aria-label=\"module class permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Module class</h3>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS는 관련 있는 기능들 등을 한 module class에 담아 캡슐화한다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">각 module들은 서로 import 가능하며 이는 코드 간 의존성을 낮춰준다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">즉 확장성, 유지보수성, 테스트 가능성 등이 향상된다.</p>\n<h3 id=\"typescript\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#typescript\" aria-label=\"typescript permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Typescript</h3>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS는 기본적으로 Typescript를 지원하며 Typescript 사용을 권장한다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">Express에서 Typescript를 사용하려면 직접 여러 가지 설정을 해주어야 하는 번거로움이 있지만 NestJS는 아무런 설정 없이 바로 사용이 가능하다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">Typescript를 사용하면 컴파일러단에서 오류를 잡아주어 애플리케이션의 예상치 못한 문제들을 미리 방지해준다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">또한 데코레이터 같은 Typescript의 실험적 기능들도 굉장히 적극적으로 사용하고 있는 모습을 볼 수 있다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS는 이러한 Typescript의 장점을 기본적으로 가지고 있다고 볼 수 있다.</p>\n<h3 id=\"간편한-테스트\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#%EA%B0%84%ED%8E%B8%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\"간편한 테스트 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>간편한 테스트</h3>\n<p class=\"my-4 whitespace-pre-wrap\">초기 생성된 NestJS의 구조를 보면 spec.ts 파일을 볼 수 있는데 이는 테스트를 위한 파일이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">기본적으로 NestJS는 간편한 Unit Test를 지원한다.</p>\n<h2 id=\"nestjs로-웹서버-구축하기\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#nestjs%EB%A1%9C-%EC%9B%B9%EC%84%9C%EB%B2%84-%EA%B5%AC%EC%B6%95%ED%95%98%EA%B8%B0\" aria-label=\"nestjs로 웹서버 구축하기 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NestJS로 웹서버 구축하기</h2>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS 프로젝트 생성 방법은 여러 가지가 있지만 이 글에서는 cli를 통한 방법을 기준으로 설명하겠다.</p>\n<h3 id=\"nestjs-cli-설치\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#nestjs-cli-%EC%84%A4%EC%B9%98\" aria-label=\"nestjs cli 설치 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NestJS CLI 설치</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">npm i -g @nestjs/cli</code></pre></div>\n<h3 id=\"cli를-통해-새-프로젝트-생성--실행\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#cli%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%83%88-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1--%EC%8B%A4%ED%96%89\" aria-label=\"cli를 통해 새 프로젝트 생성  실행 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CLI를 통해 새 프로젝트 생성 &#x26; 실행</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># 새 프로젝트 생성\nnest new &lt;프로젝트명>\n\n# nest 실행\nnpm run start</code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\">생성된 프로젝트의 구조는 다음과 같다.\n<img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/76cadfbb-2b16-4b04-82da-08826d29742f\" alt=\"image\" class=\"max-w-full rounded-sm my-12 mx-auto\"></p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item\"><strong class=\"font-black\">app.controller.spc.ts</strong>: 유닛 테스트를 위한 파일</li>\n<li class=\"list-item\"><strong class=\"font-black\">app.controller.ts</strong>: 기본 컨트롤러</li>\n<li class=\"list-item\"><strong class=\"font-black\">app.module.ts</strong>: root 모듈을 정의</li>\n<li class=\"list-item\"><strong class=\"font-black\">app.service.ts</strong>: 관련 있는 기능들을 클래스에서 분리해서 작성하고 사용 시 controller에 import 해서 사용</li>\n<li class=\"list-item\"><strong class=\"font-black\">main.ts</strong>: nest factory instance를 생성하는 엔트리 파일</li>\n</ul>\n<p class=\"my-4 whitespace-pre-wrap\">생성한 nest 프로젝트를 처음 실행하면 <code class=\"language-text\">localhost:3000</code>에 \"Hello World!\"가 표시됨을 알 수 있다.</p>\n<h3 id=\"코드-작성\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\" aria-label=\"코드 작성 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>코드 작성</h3>\n<p class=\"my-4 whitespace-pre-wrap\">위에 <code class=\"language-text\">Hello World!</code>를 <code class=\"language-text\">return</code> 하는 코드는 <code class=\"language-text\">app.service.ts</code>에서 찾을 수 있다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">이를 <code class=\"language-text\">app.controller.ts</code>에서 <code class=\"language-text\">import</code> 하고 <code class=\"language-text\">app.module.ts</code>에 이런 내용들이 정의되어 있는 것을 확인할 수 있다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS의 이러한 패턴은 글만으로는 이해하기 어렵다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">직접 코드를 작성하고 실행해 보면서 알아보자</p>\n<p class=\"my-4 whitespace-pre-wrap\">아래 내용들은 이해를 돕기 위한 코드이다.</p>\n<h4 id=\"appservicets\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#appservicets\" aria-label=\"appservicets permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>app.service.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'서비스 생성'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'이것은 테스트입니다.'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\">GetTest 메소드를 추가해주고 constructor에 실행 순서를 알 수 있는 출력을 추가해준다.</p>\n<h4 id=\"appcontrollerts\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#appcontrollerts\" aria-label=\"appcontrollerts permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>app.controller.ts</h4>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get<span class=\"token punctuation\">,</span> Query <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.service'</span><span class=\"token punctuation\">;</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> appService<span class=\"token operator\">:</span> AppService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appService<span class=\"token punctuation\">.</span><span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//테스트를 위한 컨트롤러</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> appService<span class=\"token operator\">:</span> AppService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appService<span class=\"token punctuation\">.</span><span class=\"token function\">getTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//app.service.ts에 추가했던 GetTest()</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'query-test'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getTest</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Query</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span> query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">입력받은 쿼리는 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'middleware-test'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getTestMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'middleware-test 컨트롤러'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'middleware-test 컨트롤러'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'middleware-test2'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getTestMiddleware2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'middleware-test2 컨트롤러'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'middleware-test2 컨트롤러'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\">테스트를 위한 컨트롤러를 추가해준다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">test 컨트롤러의 root path에는 위에서 만들었던 getTest 메소드를 사용해 준다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">기본적으로 <code class=\"language-text\">@Controller(\"test\")</code>는 <code class=\"language-text\">localhost:3000/test</code>에 라우팅 되며 다음과 같이 <code class=\"language-text\">@Get()</code>의 파라미터에 따라 endpoint를 지정할 수 있다.</p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item\"><strong class=\"font-black\">@Get( )</strong>: localhost:{port}/test</li>\n<li class=\"list-item\"><strong class=\"font-black\">@Get(\"query-test\")</strong>: localhost:3000/test/query-test</li>\n<li class=\"list-item\"><strong class=\"font-black\">@Get(\"middleware-test\")</strong>: localhost:3000/test/middleware-test</li>\n<li class=\"list-item\"><strong class=\"font-black\">@Get(\"middleware-test2\")</strong>: localhost:3000/test/middleware-test2</li>\n</ul>\n<h4 id=\"testmiddlewarets\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#testmiddlewarets\" aria-label=\"testmiddlewarets permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TestMiddleware.ts</h4>\n<p class=\"my-4 whitespace-pre-wrap\">middleware도 한번 만들어 보자</p>\n<p class=\"my-4 whitespace-pre-wrap\">src/middleware 경로에 TestMiddleware.ts 파일을 하나 만들어 준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable<span class=\"token punctuation\">,</span> NestMiddleware <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMiddleware</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NestMiddleware</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">use</span><span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'테스트 미들웨어 1 실행'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">테스트 미들웨어 쿼리 name=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Middleware 이후 코드 실행X</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMiddleware2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NestMiddleware</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">use</span><span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'테스트 미들웨어 2 실행'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Middleware 이후 코드를 실행</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item\">첫 번째 TestMiddleware는 쿼리를 직접 해당 주소에 뿌려주는 코드이다.</li>\n<li class=\"list-item\">두 번째 TestMiddleware2는 단순 실행 후 실행되었다는 콘솔 출력만 실행해 주는 코드이다.</li>\n</ul>\n<h4 id=\"appmodulests\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#appmodulests\" aria-label=\"appmodulests permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>app.modules.ts</h4>\n<p class=\"my-4 whitespace-pre-wrap\">이제 위에서 만들었던 컨트롤러와 미들웨어를 추가해줘야 한다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">controllers에 위에서 만든 TestController를 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  MiddlewareConsumer<span class=\"token punctuation\">,</span>\n  Module<span class=\"token punctuation\">,</span>\n  NestModule<span class=\"token punctuation\">,</span>\n  RequestMethod<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppController<span class=\"token punctuation\">,</span> TestController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.controller'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.service'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TestMiddleware<span class=\"token punctuation\">,</span> TestMiddleware2 <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./middleware/TestMiddleware'</span><span class=\"token punctuation\">;</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">,</span> TestController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//TestController추가</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NestModule</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span>consumer<span class=\"token operator\">:</span> MiddlewareConsumer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">consumer</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>TestMiddleware<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">forRoutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'test/middleware-test/*'</span><span class=\"token punctuation\">,</span> method<span class=\"token operator\">:</span> RequestMethod<span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//테스트 미들웨어1</span>\n    <span class=\"token function\">consumer</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>TestMiddleware2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forRoutes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test/middleware-test2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//테스트 미들웨어2</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\">apply()에는 사용할 미들웨어를 지정해준다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">forRoutes에서 routing path를 지정해 줄 수 있다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">routing path는 wildcards를 이용해 작성할 수 있다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic\">\n<p class=\"my-4 whitespace-pre-wrap\"><code class=\"language-text\">*</code>는 wildcards로 사용되며 모든 문자조합과 일치한다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">forRoutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'ab*cd'</span><span class=\"token punctuation\">,</span> method<span class=\"token operator\">:</span> RequestMethod<span class=\"token punctuation\">.</span><span class=\"token constant\">ALL</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\">즉 ab*cd 라우트 경로는 abcd, ab_cd, abecd 등과 일치한다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">?,+,*및() 문자는 라우트 경로에 사용될 수 있으며 해당 정규표현식 대응 부분의 하위 집합이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">하이픈(-)과 점(.)은 문자열 기반 경로로 문자 그대로 해석된다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">forRoutes()에는 여러 개의 path를 콤마(,)를 이용해 지정할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">forRoutes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test/middleware-test'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test/middleware-test2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"작성한-코드를-통해-알-수-있는-점\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#%EC%9E%91%EC%84%B1%ED%95%9C-%EC%BD%94%EB%93%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%95%8C-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%A0%90\" aria-label=\"작성한 코드를 통해 알 수 있는 점 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>작성한 코드를 통해 알 수 있는 점</h3>\n<h4 id=\"서버-실행-시\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#%EC%84%9C%EB%B2%84-%EC%8B%A4%ED%96%89-%EC%8B%9C\" aria-label=\"서버 실행 시 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>서버 실행 시</h4>\n<p class=\"my-4 whitespace-pre-wrap\">app.service.ts의 AppService 클래스 생성에서 작성했던 콘솔은 1회 출력됨을 알 수 있다.</p>\n<h4 id=\"httplocalhost3000test\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#httplocalhost3000test\" aria-label=\"httplocalhost3000test permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"http://localhost:3000/test\" class=\"text-blue-500 hover:underline\">http://localhost:3000/test</a></h4>\n<p class=\"my-4 whitespace-pre-wrap\">app.service.ts에서 작성했던 \"이것은 테스트입니다.\"가 페이지에 출력됨을 알 수 있다.</p>\n<h4 id=\"httplocalhost3000testmiddleware-test\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#httplocalhost3000testmiddleware-test\" aria-label=\"httplocalhost3000testmiddleware test permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"http://localhost:3000/test/middleware-test\" class=\"text-blue-500 hover:underline\">http://localhost:3000/test/middleware-test</a></h4>\n<p class=\"my-4 whitespace-pre-wrap\">app.controller.ts에서 작성했던 middleware-test 컨트롤러가 페이지와 콘솔에 출력됨을 확인할 수 있다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">우리는 app.module.ts에서 path를 test/middleware-test/*로 지정해줬으므로 미들웨어가 실행되지 않음을 알 수 있다.</p>\n<h4 id=\"httplocalhost3000testmiddleware-testtestnamecoder\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-xl\"><a href=\"#httplocalhost3000testmiddleware-testtestnamecoder\" aria-label=\"httplocalhost3000testmiddleware testtestnamecoder permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"http://localhost:3000/test/middleware-test/test?name=coder\" class=\"text-blue-500 hover:underline\">http://localhost:3000/test/middleware-test/test?name=coder</a></h4>\n<p class=\"my-4 whitespace-pre-wrap\">미들웨어가 실행되고 name이라는 쿼리를 받아 미들웨어에서 직접 페이지에 표시하는 것을 확인할 수 있다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic\">\n<p class=\"my-4 whitespace-pre-wrap\">이 글에서는 지극히 기초적인 NestJS 사용법에 대해서만 다루었으므로 그 외 공식문서를 살펴보면서 직접 여러 가지 시도를 해보는 것을 추천한다.</p>\n</blockquote>","headings":[{"depth":2,"value":"NestJS를 사용하는 이유","id":"nestjs를-사용하는-이유"},{"depth":3,"value":"코드의 통일성","id":"코드의-통일성"},{"depth":3,"value":"Module class","id":"module-class"},{"depth":3,"value":"Typescript","id":"typescript"},{"depth":3,"value":"간편한 테스트","id":"간편한-테스트"},{"depth":2,"value":"NestJS로 웹서버 구축하기","id":"nestjs로-웹서버-구축하기"},{"depth":3,"value":"NestJS CLI 설치","id":"nestjs-cli-설치"},{"depth":3,"value":"CLI를 통해 새 프로젝트 생성 & 실행","id":"cli를-통해-새-프로젝트-생성--실행"},{"depth":3,"value":"코드 작성","id":"코드-작성"},{"depth":4,"value":"app.service.ts","id":"appservicets"},{"depth":4,"value":"app.controller.ts","id":"appcontrollerts"},{"depth":4,"value":"TestMiddleware.ts","id":"testmiddlewarets"},{"depth":4,"value":"app.modules.ts","id":"appmodulests"},{"depth":3,"value":"작성한 코드를 통해 알 수 있는 점","id":"작성한-코드를-통해-알-수-있는-점"},{"depth":4,"value":"서버 실행 시","id":"서버-실행-시"},{"depth":4,"value":"http://localhost:3000/test","id":"httplocalhost3000test"},{"depth":4,"value":"http://localhost:3000/test/middleware-test","id":"httplocalhost3000testmiddleware-test"},{"depth":4,"value":"http://localhost:3000/test/middleware-test/test?name=coder","id":"httplocalhost3000testmiddleware-testtestnamecoder"}],"frontmatter":{"title":"NestJS 웹서버 구축하기","date":"21년 10월 29일","description":"Typescript를 이용한 NestJS 코드 작성","tags":["backend"]}},"previous":{"fields":{"slug":"/knu-lms-scheduler/"},"frontmatter":{"title":"KNU LMS Scheduler 프로젝트","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/5ce48afd-9e2c-47c0-82ed-f9deac8556f6"}},"next":{"fields":{"slug":"/korea-webtoon-api-update/"},"frontmatter":{"title":"Webtoon API","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/99b6a086-1283-4088-81cc-4cb857c3ccdb"}}},"pageContext":{"id":"8848ceac-a7f1-5fbd-a221-dcfa1096816c","previousPostId":"dac9ff2d-1532-5fdb-954d-7a9b35ac59a2","nextPostId":"6b3a1858-27f6-5961-8c64-358503d15a66"}},"staticQueryHashes":["2964855266","3766628212","4278130389","825490659"],"slicesMap":{}}