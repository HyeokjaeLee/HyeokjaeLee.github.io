{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/nest-js/","result":{"data":{"markdownRemark":{"id":"8848ceac-a7f1-5fbd-a221-dcfa1096816c","html":"<blockquote class=\"border-l-4 border-gray-500 pl-4 italic\">\n<p class=\"my-4 whitespace-pre-wrap\">내용1\n내용2\n내용3</p>\n</blockquote>\n<h1 id=\"nestjs를-사용하는-이유\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-4xl\"><a href=\"#nestjs%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0\" aria-label=\"nestjs를 사용하는 이유 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>NestJS를 사용하는 이유</h1>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS는 Express와 함께 Node.js의 유명한 웹 애플리케이션 프레임워크이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">Express와 용도는 같지만 사용해보면 둘은 다른 점이 많다.</p>\n<h2 id=\"-코드의-통일성\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#-%EC%BD%94%EB%93%9C%EC%9D%98-%ED%86%B5%EC%9D%BC%EC%84%B1\" aria-label=\" 코드의 통일성 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>📏 코드의 통일성</h2>\n<p class=\"my-4 whitespace-pre-wrap\">Express에 비해 NestJS는 개발 구조에 대한 자유도 낮다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">자유도가 높을수록 좋은 것이 아닌가 하고 생각할 수 있지만 자유도가 높다는 말은 통일성이 부족하다는 말도 된다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">프로그램의 규모가 커지고 여러 명의 사람들과 협업을 하다 보면 이런 자유도가 오히려 독이 되는 경우가 많다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">나 역시 프로젝트를 위해 다른 사람들의 Express 코드들을 찾아볼 때 개발자들마다 다른 코드 구조 때문에 특정 역할을 하는 코드를 찾는데 애먹는 경우가 많다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS는 자유도를 낮추는 대신 이런 문제점들을 개선했다고 볼 수 있다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">정의된 각 클래스마다 역할이 있고 제한된 NestJS의 구조안에서 개발을 진행하게 된다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">이런 제한된 구조가 코드의 통일성을 높여준다.</p>\n<h2 id=\"️-module-class\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%EF%B8%8F-module-class\" aria-label=\"️ module class permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>⚙️ Module class</h2>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS는 관련 있는 기능들 등을 한 module class에 담아 캡슐화한다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">각 module들은 서로 import 가능하며 이는 코드 간 의존성을 낮춰준다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">즉 확장성, 유지보수성, 테스트 가능성 등이 향상된다.</p>\n<h2 id=\"️-typescript\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%EF%B8%8F-typescript\" aria-label=\"️ typescript permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🏷️ Typescript</h2>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS는 기본적으로 Typescript를 지원하며 Typescript 사용을 권장한다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">Express에서 Typescript를 사용하려면 직접 여러 가지 설정을 해주어야 하는 번거로움이 있지만 NestJS는 아무런 설정 없이 바로 사용이 가능하다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">나는 평소 Express 코드를 작성할 때도 Typescript를 사용하는데 이는 컴파일 단계에서 오류를 잡아주어 애플리케이션의 예상치 못한 문제들을 미리 방지해준다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS는 이러한 Typescript의 장점을 기본적으로 가지고 있다고 볼 수 있다.</p>\n<h2 id=\"-간편한-테스트\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#-%EA%B0%84%ED%8E%B8%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-label=\" 간편한 테스트 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>🧪 간편한 테스트</h2>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS의 구조를 보면 spec.ts 파일들을 볼 수 있는데 이는 테스트를 위한 파일이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">기본적으로 NestJS가 간편한 Unit test를 지원한다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">나도 테스트의 중요성은 알고는 있지만 실제로 NestJS의 그것을 잘 사용하지 않기 때문에 더 이상 뭐라 말할 수는 없을 것 같다.</p>\n<p class=\"my-4 whitespace-pre-wrap\"><br/>그 외에도 여러 가지 NestJS의 장점들이 있지만 자세한 내용은 <a href=\"https://nestjs.com/\" class=\"text-blue-500 hover:underline\">NestJS 공식 문서</a>를 확인해보시는걸 추천한다.</p>\n<h1 id=\"새-프로젝트-생성\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-4xl\"><a href=\"#%EC%83%88-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"새 프로젝트 생성 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>새 프로젝트 생성</h1>\n<p class=\"my-4 whitespace-pre-wrap\">NestJS 프로젝트 생성 방법은 여러 가지가 있지만 이 글에서는 CLI를 통한 방법을 기준으로 설명하겠다.</p>\n<h2 id=\"전역으로-nestjs-cli-설치\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%EC%A0%84%EC%97%AD%EC%9C%BC%EB%A1%9C-nestjs-cli-%EC%84%A4%EC%B9%98\" aria-label=\"전역으로 nestjs cli 설치 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>전역으로 NestJS CLI 설치</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> i <span class=\"token parameter variable\">-g</span> @nestjs/cli</code></pre></div>\n<h2 id=\"cli를-통해-새-프로젝트-생성\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#cli%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%83%88-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1\" aria-label=\"cli를 통해 새 프로젝트 생성 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CLI를 통해 새 프로젝트 생성</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ nest new <span class=\"token operator\">&lt;</span>프로젝트명<span class=\"token operator\">></span></code></pre></div>\n<h2 id=\"기본-구조\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%A1%B0\" aria-label=\"기본 구조 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 구조</h2>\n<div class=\"img-txt-wrap\">\n  <div class=\"img-wrap\">\n    <img width=\"400\" src=\"https://user-images.githubusercontent.com/71566740/139356716-cf4718d2-30e0-428f-a47b-efc9f37ebf3f.png\">\n  </div>\n</div>\n<p class=\"my-4 whitespace-pre-wrap\">생성된 프로젝트의 src 구조는 위와 같다.</p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item\"><strong>app.controller.spc.ts:</strong> 유닛 테스트를 위한 파일</li>\n<li class=\"list-item\"><strong>app.controller.ts:</strong> 기본 Controller</li>\n<li class=\"list-item\"><strong>app.module.ts:</strong> root 모듈을 정의</li>\n<li class=\"list-item\"><strong>app.service.ts:</strong> 관련있는 기능들을 클래스에 분리해서 작성하고 사용 시 controller에 import해서 사용</li>\n<li class=\"list-item\"><strong>main.ts:</strong> NestFactory instance를 생성하는 엔트리 파일</li>\n</ul>\n<h3 id=\"생성된-프로젝트-실행\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#%EC%83%9D%EC%84%B1%EB%90%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%A4%ED%96%89\" aria-label=\"생성된 프로젝트 실행 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>생성된 프로젝트 실행</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run start</code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\">위 명령으로 실행이 가능하며 <code class=\"language-text\">http://localhost:3000/</code>로 이동해 \"Hello World!\"가 표시됨을 알 수 있다.</p>\n<h1 id=\"예제-코드-작성\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-4xl\"><a href=\"#%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1\" aria-label=\"예제 코드 작성 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제 코드 작성</h1>\n<p class=\"my-4 whitespace-pre-wrap\">위 Hello World!를 return 하는 코드는 <code class=\"language-text\">app.service.ts</code>에 있으며 이를 <code class=\"language-text\">app.controller.ts</code>에서 import하고 <code class=\"language-text\">app.module.ts</code>에 이런 내용들이 정의되어 있는 것을 확인할 수 있다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">글만으로는 이해하기가 어렵다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">직접 코드를 작성하고 실행해보면서 알아보자</p>\n<p class=\"my-4 whitespace-pre-wrap\"><br/>아래 내용들은 내가 NestJS를 쓰면서 자주 사용하는 일부 내용들에 대한 코드이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">보면 알겠지만 NestJS는 Typescript의 데코레이터를 적극적으로 사용하고 있다.</p>\n<h2 id=\"appservicets\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#appservicets\" aria-label=\"appservicets permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>app.service.ts</h2>\n<p class=\"my-4 whitespace-pre-wrap\">GetTest()를 추가해주고 constructor에 실행 순서를 알 수 있는 콘솔 출력을 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppService</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'서비스 생성'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">getTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'이것은 테스트입니다.'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"appcontrollerts\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#appcontrollerts\" aria-label=\"appcontrollerts permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>app.controller.ts</h2>\n<p class=\"my-4 whitespace-pre-wrap\">테스트를 위한 컨트롤러를 추가해준다.\ntest 컨트롤러의 root path에는 위에서 만들었던 getTest()를 사용해 줄 거다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Controller<span class=\"token punctuation\">,</span> Get<span class=\"token punctuation\">,</span> Query <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.service'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> appService<span class=\"token operator\">:</span> AppService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appService<span class=\"token punctuation\">.</span><span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Controller</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//테스트를 위한 컨트롤러</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestController</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">private</span> <span class=\"token keyword\">readonly</span> appService<span class=\"token operator\">:</span> AppService<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>appService<span class=\"token punctuation\">.</span><span class=\"token function\">getTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//app.service.ts에 추가했던 GetTest()</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'query-test'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getTest</span><span class=\"token punctuation\">(</span><span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Query</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'query'</span><span class=\"token punctuation\">)</span> query<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">입력받은 쿼리는 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">입니다.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'middleware-test'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getTestMiddleware</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'middleware-test 컨트롤러'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'middleware-test 컨트롤러'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Get</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'middleware-test2'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">getTestMiddleware2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'middleware-test2 컨트롤러'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'middleware-test2 컨트롤러'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\">기본적으로 @Controller(\"test\")는 localhost:3000/test에 라우팅되며 @Get()의 파라미터에 따라 endpoint를 지정할 수 있다.</p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item\"><strong>@Get( )</strong>: localhost:{port}/test</li>\n<li class=\"list-item\"><strong>@Get(\"query-test\")</strong>: localhost:3000/test/query-test</li>\n<li class=\"list-item\"><strong>@Get(\"middleware-test\")</strong>: localhost:3000/test/middleware-test</li>\n<li class=\"list-item\"><strong>@Get(\"middleware-test2\")</strong>: localhost:3000/test/middleware-test2</li>\n</ul>\n<h3 id=\"testmiddlewarets\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#testmiddlewarets\" aria-label=\"testmiddlewarets permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TestMiddleware.ts</h3>\n<p class=\"my-4 whitespace-pre-wrap\">Middleware도 한번 만들어 보자</p>\n<p class=\"my-4 whitespace-pre-wrap\">src/middleware 경로에 <code class=\"language-text\">TestMiddleware.ts</code>을 만들어준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> Injectable<span class=\"token punctuation\">,</span> NestMiddleware <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMiddleware</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NestMiddleware</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">use</span><span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'테스트 미들웨어 1 실행'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> query <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">테스트 미들웨어 쿼리 name=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>query<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Middleware 이후 코드 실행X</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Injectable</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMiddleware2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NestMiddleware</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">use</span><span class=\"token punctuation\">(</span>req<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> res<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token function-variable function\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'테스트 미들웨어 2 실행'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Middleware 이후 코드를 실행</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item\">\n<p class=\"my-4 whitespace-pre-wrap\">첫번째 <code class=\"language-text\">TestMiddleware</code>는 쿼리를 받고 직접 해당 주소에 뿌려주는 코드이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">Express와 같이 <code class=\"language-text\">res.json</code>, <code class=\"language-text\">res.send</code>를 사용한다.</p>\n</li>\n<li class=\"list-item\">\n<p class=\"my-4 whitespace-pre-wrap\">두번째 <code class=\"language-text\">TestMiddleware2</code> 단순 실행 후 실행되었다는 콘솔만 출력해주는 코드이다.</p>\n</li>\n</ul>\n<h3 id=\"appmodulets\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#appmodulets\" aria-label=\"appmodulets permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>app.module.ts</h3>\n<p class=\"my-4 whitespace-pre-wrap\">이제 위에서 만들었던 컨트롤러와 미들웨어를 추가해줘야 한다.</p>\n<p class=\"my-4 whitespace-pre-wrap\"><code class=\"language-text\">controllers</code>에 위에서 만들어 <code class=\"language-text\">TestController</code>를 추가해준다.</p>\n<p class=\"my-4 whitespace-pre-wrap\"><code class=\"language-text\">AppModule</code>에는 다음과 같은 코드를 추가해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n  MiddlewareConsumer<span class=\"token punctuation\">,</span>\n  Module<span class=\"token punctuation\">,</span>\n  NestModule<span class=\"token punctuation\">,</span>\n  RequestMethod<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@nestjs/common'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppController<span class=\"token punctuation\">,</span> TestController <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.controller'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> AppService <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./app.service'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> TestMiddleware<span class=\"token punctuation\">,</span> TestMiddleware2 <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./middleware/TestMiddleware'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token decorator\"><span class=\"token at operator\">@</span><span class=\"token function\">Module</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  imports<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  controllers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppController<span class=\"token punctuation\">,</span> TestController<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">//TestController추가</span>\n  providers<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>AppService<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AppModule</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">NestModule</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span>consumer<span class=\"token operator\">:</span> MiddlewareConsumer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">consumer</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>TestMiddleware<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">forRoutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'test/middleware-test/*'</span><span class=\"token punctuation\">,</span> method<span class=\"token operator\">:</span> RequestMethod<span class=\"token punctuation\">.</span><span class=\"token constant\">GET</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//테스트 미들웨어1 추가</span>\n    <span class=\"token function\">consumer</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>TestMiddleware2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forRoutes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test/middleware-test2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//테스트 미들웨어2 추가</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\">apply()에는 사용할 미들웨어를 지정해준다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">forRoutes에서 Routing path를 지정해줄수 있다.</p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item\">\n<p class=\"my-4 whitespace-pre-wrap\"><strong>routing path는 wildcards를 이용해 작성할 수 있다.</strong></p>\n<p class=\"my-4 whitespace-pre-wrap\">예를 들어 별표(*)는 와일드카드로 사용되며 모든 문자조합과 일치한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">forRoutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> path<span class=\"token operator\">:</span> <span class=\"token string\">'ab*cd'</span><span class=\"token punctuation\">,</span> method<span class=\"token operator\">:</span> RequestMethod<span class=\"token punctuation\">.</span><span class=\"token constant\">ALL</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\"><code class=\"language-text\">ab*cd</code> 라우트 경로는 abcd, ab_cd, abecd 등과 일치한다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">?,+,*및()문자는 라우트 경로에 사용될 수 있으며 해당 정규표현식 대응 부분의 하위집합이다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">하이픈(-)과 점(.)은 문자열 기반 경로로 문자 그대로 해석된다.</p>\n</li>\n<li class=\"list-item\">\n<p class=\"my-4 whitespace-pre-wrap\"><strong>forRoutes()에는 여러개의 path를 콤마(,)를 이용해 지정할 수 있다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">forRoutes</span><span class=\"token punctuation\">(</span><span class=\"token string\">'test/middleware-test'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test/middleware-test2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"실행\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%EC%8B%A4%ED%96%89\" aria-label=\"실행 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>실행</h2>\n<p class=\"my-4 whitespace-pre-wrap\">이제 위에서 작성했던 코드들을 실행해보자</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">npm</span> run start</code></pre></div>\n<h3 id=\"다음은-위의-코드의-몇가지-예시이다\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-2xl\"><a href=\"#%EB%8B%A4%EC%9D%8C%EC%9D%80-%EC%9C%84%EC%9D%98-%EC%BD%94%EB%93%9C%EC%9D%98-%EB%AA%87%EA%B0%80%EC%A7%80-%EC%98%88%EC%8B%9C%EC%9D%B4%EB%8B%A4\" aria-label=\"다음은 위의 코드의 몇가지 예시이다 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>다음은 위의 코드의 몇가지 예시이다.</h3>\n<p class=\"my-4 whitespace-pre-wrap\"><code class=\"language-text\">app.service.ts</code>의 <code class=\"language-text\">AppService</code> 클래스 생성에서 작성했던 콘솔이 1회 출력됨을 알 수 있다.</p>\n<ul class=\"list-disc ml-5\">\n<li class=\"list-item\">\n<p class=\"my-4 whitespace-pre-wrap\"><strong><a href=\"http://localhost:3000/test\" class=\"text-blue-500 hover:underline\">http://localhost:3000/test</a></strong></p>\n<p class=\"my-4 whitespace-pre-wrap\"><code class=\"language-text\">app.service.ts</code>에서 작성했던 \"이것은 테스트입니다.\"가 페이지에 출력됨을 알 수 있다.</p>\n</li>\n<li class=\"list-item\">\n<p class=\"my-4 whitespace-pre-wrap\"><strong><a href=\"http://localhost:3000/test/middleware-test\" class=\"text-blue-500 hover:underline\">http://localhost:3000/test/middleware-test</a></strong></p>\n<p class=\"my-4 whitespace-pre-wrap\"><code class=\"language-text\">app.controller.ts</code>에서 작성했던 <code class=\"language-text\">middleware-test 컨트롤러</code>가 페이지와 콘솔에 출력됨을 확인할 수 있다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">우리는 <code class=\"language-text\">app.module.ts</code>에서 path를 <code class=\"language-text\">test/middleware-test/*</code>로 지정해줬으므로 미들웨어가 실행되지 않음을 알 수 있다.</p>\n</li>\n<li class=\"list-item\">\n<p class=\"my-4 whitespace-pre-wrap\"><strong><a href=\"http://localhost:3000/test/middleware-test/test?name=nagle\" class=\"text-blue-500 hover:underline\">http://localhost:3000/test/middleware-test/test?name=nagle</a></strong></p>\n<p class=\"my-4 whitespace-pre-wrap\">미들웨어가 실행되고 name이라는 쿼리를 받아 미들웨어에서 직접 페이지에 표시하는 것을 확인할 수 있다.</p>\n</li>\n</ul>\n<p class=\"my-4 whitespace-pre-wrap\">그 외에도 위 코드를 통해 각 클래스들의 실행 순서나 기능을 알 수 있으므로 직접 여러 가지를 시도해보는 것을 추천한다.</p>","headings":[{"depth":1,"value":"NestJS를 사용하는 이유","id":"nestjs를-사용하는-이유"},{"depth":2,"value":"📏 코드의 통일성","id":"-코드의-통일성"},{"depth":2,"value":"⚙️ Module class","id":"️-module-class"},{"depth":2,"value":"🏷️ Typescript","id":"️-typescript"},{"depth":2,"value":"🧪 간편한 테스트","id":"-간편한-테스트"},{"depth":1,"value":"새 프로젝트 생성","id":"새-프로젝트-생성"},{"depth":2,"value":"전역으로 NestJS CLI 설치","id":"전역으로-nestjs-cli-설치"},{"depth":2,"value":"CLI를 통해 새 프로젝트 생성","id":"cli를-통해-새-프로젝트-생성"},{"depth":2,"value":"기본 구조","id":"기본-구조"},{"depth":3,"value":"생성된 프로젝트 실행","id":"생성된-프로젝트-실행"},{"depth":1,"value":"예제 코드 작성","id":"예제-코드-작성"},{"depth":2,"value":"app.service.ts","id":"appservicets"},{"depth":2,"value":"app.controller.ts","id":"appcontrollerts"},{"depth":3,"value":"TestMiddleware.ts","id":"testmiddlewarets"},{"depth":3,"value":"app.module.ts","id":"appmodulets"},{"depth":2,"value":"실행","id":"실행"},{"depth":3,"value":"다음은 위의 코드의 몇가지 예시이다.","id":"다음은-위의-코드의-몇가지-예시이다"}],"frontmatter":{"title":"NestJS 웹서버 구축하기","date":"21년 10월 29일","description":"Typescript를 이용한 NestJS 코드 작성","tags":["backend"]}},"previous":{"fields":{"slug":"/knu-lms-scheduler/"},"frontmatter":{"title":"KNU LMS Scheduler 프로젝트","titleImage":"https://user-images.githubusercontent.com/71566740/137295171-1051ee6b-cc36-43d1-9835-282d120611c4.png"}},"next":{"fields":{"slug":"/korea-webtoon-api-update/"},"frontmatter":{"title":"Webtoon API 업데이트","titleImage":"https://user-images.githubusercontent.com/71566740/144698893-3177ecc1-ce90-49ae-8e98-4986f66bce7a.png"}}},"pageContext":{"id":"8848ceac-a7f1-5fbd-a221-dcfa1096816c","previousPostId":"dac9ff2d-1532-5fdb-954d-7a9b35ac59a2","nextPostId":"6b3a1858-27f6-5961-8c64-358503d15a66"}},"staticQueryHashes":["2964855266","3766628212","4278130389","825490659"],"slicesMap":{}}