{
    "componentChunkName": "component---src-layout-post-tsx",
    "path": "/good-commit-message/",
    "result": {"data":{"markdownRemark":{"html":"<p>커밋 메시지를 작성할 때는 규칙을 정해놓고 일관성 있게 작성해야 한다.</p>\n<p>코드를 작성하다 보면 간혹 이전 코드를 참고 또는 회귀해야 할 경우가 있는데 커밋 수가 적다면 상관없지만 커밋 수가 많아질수록 수많은 커밋 로그 중에 원하는 시점을 찾는 것이 어렵다.</p>\n<p>또한 내 커밋이면 어느정도 지저분한 커밋 로그 속에서 원하는 정보를 찾을 수 있어도 다른 사람이 내 커밋 로그를 참고해야 하는 경우에는 어려움이 배가된다.</p>\n<p>이러한 경우에 커밋 메시지가 제대로 작성되어 있다면 보다 원활하게 원하는 정보를 찾을 수 있다.</p>\n<p>커밋 메시지 작성법은 큰 틀은 있지만 개발자들마다 스타일이 다르고 정확하게 이렇게 작성해야 한다는 규칙은 없다.</p>\n<p>이 포스트는 Angural Commit Message Format을 기반으로 내 나름대로 보기 편하다고 느낀 구조를 정리한 내용이다.</p>\n<h2>Commit Message</h2>\n<deckgo-highlight-code   >\n          <code slot=\"code\">&lt;header&gt;//필수\r\n\r\n&lt;body&gt;\r\n\r\n&lt;footer&gt;</code>\n        </deckgo-highlight-code>\n<ul>\n<li>해당 커밋 메시지의 전체 구조는 emoji를 제외하면 Angural Commit Message Format과 동일</li>\n<li>header, body, footer는 빈 행으로 구분</li>\n<li>header를 제외하면 모두 생략 가능</li>\n</ul>\n<h3>🗿 Header</h3>\n<deckgo-highlight-code   >\n          <code slot=\"code\">&lt;emoji&gt; &lt;type&gt;(&lt;scope&gt;): &lt;short summary&gt;</code>\n        </deckgo-highlight-code>\n<h4>Emoji</h4>\n<p>개발을 하다 보면 Angural Commit Message Format 만으로는 구분이 명확하지 않을 때가 많았고 이 부분을 나는 Type 앞에 Emoji를 추가함으로써 보완했다.</p>\n<p>내가 Commit Message에 활용하는 Emoji들의 정보는 <a href=\"https://gitmoji.dev/\">Gitmoji</a>에서 확인 가능하다.</p>\n<h4>Type</h4>\n<p>반드시 다음 중 하나여야 한다.</p>\n<ul>\n<li>\n<p><strong>build</strong>: 빌드 시스템 또는 외부 종속성에 영향을 미치는 변경 사항이 있을 때</p>\n</li>\n<li>\n<p><strong>ci</strong>: CI 구성 파일 및 스크립트의 변경 사항이 있을 때</p>\n</li>\n<li>\n<p><strong>docs</strong>: 단순 문서 수정이 있을 때</p>\n</li>\n<li>\n<p><strong>feat</strong>: 새로운 기능 추가가 있을 때</p>\n</li>\n<li>\n<p><strong>fix</strong>: 버그 수정이 있을 때</p>\n</li>\n<li>\n<p><strong>perf</strong>: 성능 개선이 있는 변경이 있을 때</p>\n</li>\n<li>\n<p><strong>refactor</strong>: 버그 수정, 기능 추가, 성능 개선을 제외한 변경이 있을 때</p>\n</li>\n<li>\n<p><strong>test</strong>: 테스트 관련 변경이 있을 때</p>\n</li>\n<li>\n<p><strong>revert</strong>: 이전 커밋으로 회귀할 때</p>\n<ul>\n<li>\n<p>type은 revert를 사용하되 short summary는 회귀 대상 커밋의 그것과 같아야 함</p>\n</li>\n<li>\n<p>명확한 회귀 이유를 body에 설명해 주어야 함</p>\n</li>\n<li>\n<p>회귀 대상의 커밋 SHA 정보를 다음과 같이 body에 표시해 주어야 함</p>\n<p><code>This reverts commit &#x3C;SHA></code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h4>Scope (생략 가능)</h4>\n<p>추가적인 문맥 정보를 제공하기 위한 목적으로 괄호 안에 작성한다.</p>\n<p><a href=\"https://github.com/angular/angular/blob/master/CONTRIBUTING.md#scope\">Angular.js 공식 문서</a>에서는 영향을 받는 npm 모듈명을 작성하라고 되어있는데 만약 npm 모듈을 사용하지 않는다면 어디를 수정했는지 정도로 보면 될 것 같다.</p>\n<p>함수를 수정했으면 해당 함수의 이름, 메소드를 추가했으면 해당 클래스 이름 등 수정 대상을 한눈에 특정할 수 있는 내용이 들어가면 된다.</p>\n<p>추가적으로 <a href=\"https://gist.github.com/qoomon/5dfcdf8eec66a051ecd85625518cfd13\">어떤 개발자분의 문서</a>에서는 이슈 ID를 적지 말라고 한다.</p>\n<h4>Short summary</h4>\n<ul>\n<li>\n<p>첫 글자를 대문자로 작성하지 않는다.</p>\n</li>\n<li>\n<p>50글자 내로 제한한다.</p>\n</li>\n<li>\n<p>과거형으로 작성하지 않는다.</p>\n</li>\n<li>\n<p>명령문으로 작성한다.</p>\n</li>\n<li>\n<p>끝에 특수문자를 사용하지 않는다.</p>\n<p>(마침표, 느낌표, 물음표 등)</p>\n</li>\n</ul>\n<h3>📃 Body</h3>\n<ul>\n<li>각 내용의 시작은 <code>*</code>로 시작하고 공백 한 칸 띄우고 작성한다.</li>\n<li>각 내용은 72글자 내로 제한한다.</li>\n<li>Header의 short summary와 같이 현재 시제를 사용한다.\n<ul>\n<li>ex) fixes, fixed가 아닌 fix</li>\n</ul>\n</li>\n<li>어떻게 보다는 무엇과 왜를 설명한다.</li>\n<li>변경의 영향을 설명하기 위해 이전 동작과 새 동작을 비교할 수 있다.</li>\n</ul>\n<h3>👣 Footer</h3>\n<deckgo-highlight-code   >\n          <code slot=\"code\">BREAKING CHANGE: &lt;breaking change summary&gt;\r\n\r\n&lt;breaking change description&gt;\r\n\r\n\r\n&lt;linked issue&gt;</code>\n        </deckgo-highlight-code>\n<h4>Breaking Change</h4>\n<p>Angural문서에 따르면 Breaking change는 애플리케이션을 구성하고 있는 모듈 등을 업데이트, 추가, 제거해야 하는 변화를 의미한다.\r\n(간략하게 대규모 변경사항 정도로 생각하시면 좋을듯)</p>\n<p>그 외에 API를 만들 때 해당 API를 사용하는 다른 앱들의 코드를 수정해야 하는 경우에도 API 커밋 메시지에 Breaking Change라고 표기한다.</p>\n<p>Footer에는 breaking change와 관련된 정보를 포함할 수 있다.</p>\n<h4>Linked issue</h4>\n<p>나는 이슈 연결을 할 때 주로 다음 두 가지 키워드를 사용한다.</p>\n<ul>\n<li><strong>resolve</strong>: 이슈를 해결한 경우</li>\n<li><strong>related to</strong>: 연관된 이슈가 있는 경우</li>\n</ul>\n<p>다음은 pull request의 description이나 커밋 메시지에서 Issue 연결을 제공하는 키워드들이다.</p>\n<p>(pull request는 기본 branch에 있어야 함)</p>\n<ul>\n<li>close</li>\n<li>closes</li>\n<li>closed</li>\n<li>fix</li>\n<li>fixes</li>\n<li>fixed</li>\n<li>resolve</li>\n<li>resolves</li>\n<li>resolved</li>\n</ul>\n<p>이슈가 같은 repository에 있는지 여부에 따라 닫는 구문이 달라진다.</p>\n<p>해당 내용은 <a href=\"https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue\">Github 공식 문서</a>에 원문이 있으니 확인해 보는걸 추천</p>\n<table>\n<thead>\n<tr>\n<th>연결된 이슈</th>\n<th>구문</th>\n<th>예시</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>같은 repository에 있는 경우</td>\n<td>KEYWORD #ISSUE-NUMBER</td>\n<td>closes #10</td>\n</tr>\n<tr>\n<td>다른 repository에 있는 경우</td>\n<td>KEYWORD OWNER/REPOSITORY#ISSUE-NUMBER</td>\n<td>fixes octo-org/octo-repo#100</td>\n</tr>\n<tr>\n<td>복합 적인 경우</td>\n<td>각 이슈의 전체 구문을 작성</td>\n<td>resolves #10,<br>resolves #123,<br>resolves octo-org/octo-repo#100</td>\n</tr>\n</tbody>\n</table>\n<h2>자주 쓰이는 영어 단어 목록</h2>\n<p>다음은 커밋에 자주 사용하는 영어 단어 목록이다.</p>\n<p>해당 내용도 <a href=\"https://blog.ull.im/engineering/2019/03/10/logs-on-git.html\">좋은 git commit 메시지를 위한 영어 사전</a>에 잘 정리해 주신 글이 있다.</p>\n<ul>\n<li><strong>Fix</strong>: 버그, 이슈 등 잘못된 무언가를 고치는 경우</li>\n<li><strong>Correct</strong>: 문법 오류, 타입, 이름, 오타 등을 수정하는 경우\n<ul>\n<li><code>Fix</code>와 비슷하지만 보다 단순한 수정에 자주 쓰임</li>\n</ul>\n</li>\n<li><strong>Remove</strong>: 코드나 파일을 삭제하는 경우</li>\n<li><strong>Add</strong>: 새 코드나 파일을 추가하는 경우</li>\n<li><strong>Implement</strong>: 무언가를 구현한 경우\n<ul>\n<li><code>Add</code>와 비슷하지만 좀더 큰 코드 단위 추가에 자주 쓰임</li>\n<li>구현한 대상을 강조할때 사용</li>\n</ul>\n</li>\n<li><strong>Use</strong>: 구현을 위해 무언가를 사용한 경우\n<ul>\n<li>특정 라이브러리나 프레임워크를 사용하기 위한 코드를 추가하는 경우</li>\n</ul>\n</li>\n<li><strong>Refactor</strong>: 코드를 리팩토링 하는 경우</li>\n<li><strong>Simplify</strong>: 코드를 단순화 하는 경우\n<ul>\n<li>리팩토링과 비슷하지만 중복 제거 등 단순화만 하는 경우</li>\n</ul>\n</li>\n<li><strong>Update</strong>: 무언가를 업데이트 하는 경우</li>\n<li><strong>Revise</strong>: 문서를 수정하는 경우</li>\n<li><strong>Improve</strong>: 성능, 구조, 접근성 등을 개선하는 경우</li>\n<li><strong>Make</strong>: 특정한 동작이 되게 만드는 경우\n<ul>\n<li>기존 동작을 변경하는 경우</li>\n</ul>\n</li>\n<li><strong>Allow</strong>: 특정 동작을 허용하는 경우</li>\n<li><strong>Ensure</strong>: 특정 처리를 보장하는 경우\n<ul>\n<li>if문 처럼 조건을 확실하게 제공하는 경우</li>\n</ul>\n</li>\n<li><strong>Prevent</strong>: 특정 처리를 못하게 막는 경우</li>\n<li><strong>Avoid</strong>: 특정 처리를 회피하는 경우\n<ul>\n<li>if문 처럼 조건에 따라 특정 동작을 회피하는 경우</li>\n</ul>\n</li>\n<li><strong>Move</strong>: 코드나 파일을 이동하는 경우</li>\n<li><strong>Rename</strong>: 파일명을 변경한 경우\n<ul>\n<li>단순 변수명, 함수명 등의 변경만 수행한 경우</li>\n</ul>\n</li>\n<li><strong>Verify</strong>: 검증코드를 추가하는 경우</li>\n<li><strong>Set</strong>: 변수, 리터럴, 텍스트 등 단순 값을 변경하는 경우</li>\n<li><strong>Pass</strong>: 매개변수를 전달하는 경우</li>\n</ul>\n<h2>마지막으로</h2>\n<p>해당 포스트는 추가적으로 생각나는 요소가 있다면 내용을 추가 해나갈 예정이며 지금까지 정리한 내용을 기반으로 커밋 메시지 가이드를 쉽게 작성할 수 있는 토이 프로젝트를 진행중이다.</p>\n<p>관련 내용은 다음 링크들에서 확인 가능하다.</p>\n<ul>\n<li><a href=\"/gititle-project\">Blog post</a></li>\n<li><a href=\"https://github.com/HyeokjaeLee/gititle\">Github repository</a></li>\n<li><a href=\"/gititle\">Gititle</a></li>\n</ul>","frontmatter":{"title":"Git Commit Message Convention","titleImage":"https://user-images.githubusercontent.com/71566740/139002400-e36dc3e7-a88f-4f4b-9a1a-2e2b70086ebe.png","date":"2021-07-03","description":"Git Commit Message 작성을 위한 나와의 약속","tags":["Git"]},"fields":{"slug":"/good-commit-message/"},"id":"98992a08-a70f-5f2e-b087-f3ddf6331f1d"},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/blog-remake-review2/"},"frontmatter":{"description":"Next.js에서 Gatsby로 블로그를 이전하고 느낀점","title":"Gatsby 블로그 이전"},"id":"cd80fe17-59c6-52c5-96e4-cd689ececa0e"},{"fields":{"slug":"/covid-19-api-update/"},"frontmatter":{"description":"단계적 일상회복에 따른 Covid-19 API 업데이트","title":"Covid-19 API 업데이트"},"id":"8bbdf8ed-c7e5-5967-8d33-69a5f73333d6"},{"fields":{"slug":"/korea-webtoon-api-update/"},"frontmatter":{"description":"Daum 웹툰의 개편으로 인한 API 업데이트","title":"Webtoon API 업데이트"},"id":"70e1cf28-97c5-594c-ab1d-16d4ec69657c"},{"fields":{"slug":"/nest-js/"},"frontmatter":{"description":"Typescript를 이용한 NestJS 코드 작성","title":"NestJS 웹서버 구축하기"},"id":"305141a9-5929-57a3-aeed-d6841c809e43"},{"fields":{"slug":"/knu-lms-scheduler/"},"frontmatter":{"description":"공주대학교 비대면 강의 시스템 편의성 개선 프로젝트","title":"KNU LMS Scheduler 프로젝트"},"id":"c650e111-86f5-5201-b9f9-d40fccf2a8eb"},{"fields":{"slug":"/gititle-project/"},"frontmatter":{"description":"좋은 커밋 메시지를 작성하기 위한 프로젝트","title":"Gititle 프로젝트"},"id":"59da09b0-cfe8-5387-8b2c-18728bc48eb5"},{"fields":{"slug":"/sass-compiler/"},"frontmatter":{"description":"편리한 Sass 사용을 위한 익스텐션","title":"Live Sass Compiler 사용하기"},"id":"cddd5b1b-eb1c-5a3a-bf59-e59f20abc909"},{"fields":{"slug":"/nodejs-crawling/"},"frontmatter":{"description":"Node.js 크롤링을 통한 데이터 수집","title":"크롤링을 통한 데이터 수집하기"},"id":"2a3b304d-fff2-5587-9a14-4f3a1864ba1d"},{"fields":{"slug":"/copilot-review/"},"frontmatter":{"description":"Github의 코딩 AI, Copilot 한 달 사용 리뷰","title":"Copilot 사용 후기"},"id":"8a284f98-aa79-5a11-9f60-17da05b03882"},{"fields":{"slug":"/typescript-express/"},"frontmatter":{"description":"Typescript를 이용한 Express 코드 작성","title":"Typescript + Express 웹서버 구축하기"},"id":"7de321b0-d894-5d5a-a7e1-058f7c309364"},{"fields":{"slug":"/blog-remake-review1/"},"frontmatter":{"description":"Next.js에서 Gatsby로 블로그를 이전하면서 느낀점","title":"Gatsby 블로그 이전 중간 리뷰"},"id":"4cfa4a82-589b-5649-8fd0-5cbb6f48d40b"},{"fields":{"slug":"/good-commit-message/"},"frontmatter":{"description":"Git Commit Message 작성을 위한 나와의 약속","title":"Git Commit Message Convention"},"id":"98992a08-a70f-5f2e-b087-f3ddf6331f1d"}]}},"pageContext":{"slug":"/good-commit-message/"}},
    "staticQueryHashes": []}