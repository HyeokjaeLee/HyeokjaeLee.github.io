{
    "componentChunkName": "component---src-templates-markdown-layout-tsx",
    "path": "/sass-compiler/",
    "result": {"data":{"markdownRemark":{"html":"<h2>Sass(SCSS)</h2>\n<img src=\"https://user-images.githubusercontent.com/71566740/133248000-62950c37-88dd-491e-8d1f-f0e8c66241e0.png\" class=\"img large\"/>\n<p>Sass는 CSS로 컴파일 가능한 스크립트 언어입니다.</p>\n<p>CSS의 확장판 정도라고 생각하시면 될 것 같습니다.</p>\n<p><br>저는 CSS와 호환성을 갖춘 SCSS를 선호하며 어느 정도 스타일링할 코드가 많아지면 CSS 대신 SCSS를 이용합니다.</p>\n<p>Sass는 편리한 점이 정말 많은데 대표적으로 함수나 변수를 선언해서 사용할 수 있어서 수정이 편하고 코드의 가독성이 좋다는 게 가장 큰 이유 같습니다.</p>\n<p><br>보통 node.js 환경에서 프로젝트를 진행한다면 Sass를 지원해주는 모듈들이 많아 Sass파일 자체를 import 해서 사용이 가능하지만 그게 아니라면 컴파일한 CSS를 이용합니다.</p>\n<p>오늘은 이런 non-node.js환경에서 Sass의 더욱 편리한 사용을 도와주는 2가지 VSCODE 익스텐션과 기본 설정을 소개해보려 합니다.</p>\n<h3>VSCODE 익스텐션 설치</h3>\n<ul>\n<li>\n<h4><a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass\">Live Sass Compiler</a></h4>\n<p>Sass를 CSS로 실시간 컴파일해주는 익스텐션</p>\n</li>\n<li>\n<h4><a href=\"https://marketplace.visualstudio.com/items?itemName=Syler.sass-indented\">Sass</a></h4>\n<p>Sass의 highlighting, autocomplete &#x26; Formatter 지원해주는 익스텐션</p>\n</li>\n</ul>\n<h3>Live Sass Compiler 설정</h3>\n<p>Sass 익스텐션의 경우엔 별다른 설정이 필요 없지만 Live Sass Compiler는 나에게 맞는 형태로 설정이 필요합니다.\r\n설정을 위해 VSCODE의 <code>settings.json</code> 파일에 다음 내용을 추가해줍니다.</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">{\r\n  &quot;liveSassCompile.settings.formats&quot;: [\r\n    {\r\n      &quot;format&quot;: &quot;expanded&quot;,\r\n      &quot;extensionName&quot;: &quot;.css&quot;,\r\n      &quot;savePath&quot;: &quot;~/../css&quot;\r\n    },\r\n    {\r\n      &quot;format&quot;: &quot;compressed&quot;,\r\n      &quot;extensionName&quot;: &quot;.min.css&quot;,\r\n      &quot;savePath&quot;: &quot;~/../css&quot;\r\n    }\r\n  ]\r\n}</code>\n        </deckgo-highlight-code>\n<ul>\n<li>min.css는 css의 공백과 줄 바꿈을 삭제해 용량을 줄인 파일로 전송량을 줄일 수 있습니다.</li>\n</ul>\n<p>저는 어차피 작성은 Sass로 하고 컴파일된 CSS를 직접 수정할 필요가 없으니 min.css파일만 있기 때문에 다음과 같은 설정으로 사용합니다.</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">{\r\n  &quot;liveSassCompile.settings.formats&quot;: [\r\n    {\r\n      &quot;format&quot;: &quot;compressed&quot;,\r\n      &quot;extensionName&quot;: &quot;.min.css&quot;,\r\n      &quot;savePath&quot;: &quot;~/../css&quot;\r\n    }\r\n  ]\r\n}</code>\n        </deckgo-highlight-code>\n<br/>\n<div class=\"img-txt-wrap\">\r\n    <div class=\"img-wrap\">\r\n      설정후 우측 하단에 Watch Sass를 클릭하시면 Sass파일의 수정을 감지해 실시간으로 CSS파일을 만들어줍니다.\r\n      <img  width=\"600\" src=\"https://user-images.githubusercontent.com/71566740/133251442-d957eeaf-b125-4419-87bf-0fd5aa3f0413.png\"/>\r\n      <br/>\r\n      저는 다음과 같은 구조를 주로 사용하기 때문에 이렇게 설정했지만 다른 설정을 원하시면 `savePath`부분에 원하는 컴파일 위치를 작성해서 사용하시면 됩니다.\r\n       <img  width=\"800\" src=\"https://user-images.githubusercontent.com/71566740/133251746-ffd66e52-3d03-42cd-8bfd-0d90f861854b.png\"/>\r\n    </div>\r\n</div>","frontmatter":{"title":"Live Sass Compiler 사용하기","date":"2021-09-01","description":"편리한 Sass 사용을 위한 익스텐션","tag":["Frontend"]},"fields":{"slug":"/sass-compiler/"},"id":"cddd5b1b-eb1c-5a3a-bf59-e59f20abc909"},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/korea-webtoon-api-update/"},"frontmatter":{"description":"Daum 웹툰의 대규모 변화로 인한 API 업데이트","title":"Korea Webtoon API 업데이트"},"id":"70e1cf28-97c5-594c-ab1d-16d4ec69657c"},{"fields":{"slug":"/nest-js/"},"frontmatter":{"description":"Typescript를 이용한 NestJS 코드 작성","title":"NestJS 웹서버 구축하기"},"id":"305141a9-5929-57a3-aeed-d6841c809e43"},{"fields":{"slug":"/knu-lms-scheduler/"},"frontmatter":{"description":"공주대학교 비대면 강의 시스템 UI 개선 프로젝트","title":"KNU LMS Scheduler 프로젝트"},"id":"c650e111-86f5-5201-b9f9-d40fccf2a8eb"},{"fields":{"slug":"/gititle-project/"},"frontmatter":{"description":"좋은 커밋 메시지를 작성하기 위한 프로젝트","title":"Gititle 프로젝트"},"id":"59da09b0-cfe8-5387-8b2c-18728bc48eb5"},{"fields":{"slug":"/sass-compiler/"},"frontmatter":{"description":"편리한 Sass 사용을 위한 익스텐션","title":"Live Sass Compiler 사용하기"},"id":"cddd5b1b-eb1c-5a3a-bf59-e59f20abc909"},{"fields":{"slug":"/nodejs-crawling/"},"frontmatter":{"description":"Node.js 크롤링을 통한 데이터 수집","title":"크롤링을 통한 데이터 수집하기"},"id":"2a3b304d-fff2-5587-9a14-4f3a1864ba1d"},{"fields":{"slug":"/copilot-review/"},"frontmatter":{"description":"Github의 코딩 AI, Copilot 한 달 사용 리뷰","title":"Copilot 사용 후기"},"id":"8a284f98-aa79-5a11-9f60-17da05b03882"},{"fields":{"slug":"/typescript-express/"},"frontmatter":{"description":"Typescript를 이용한 Express 코드 작성","title":"Typescript + Express 웹서버 구축하기"},"id":"7de321b0-d894-5d5a-a7e1-058f7c309364"},{"fields":{"slug":"/blog-remake-review1/"},"frontmatter":{"description":"해당 블로그 제작 중간 리뷰","title":"Next.js에서 Gatsby로 블로그 이사 중간 리뷰"},"id":"4cfa4a82-589b-5649-8fd0-5cbb6f48d40b"},{"fields":{"slug":"/good-commit-message/"},"frontmatter":{"description":"Commit Message 작성을 위한 나와의 약속","title":"Git Commit Message Convention"},"id":"98992a08-a70f-5f2e-b087-f3ddf6331f1d"}]}},"pageContext":{"slug":"/sass-compiler/"}},
    "staticQueryHashes": []}