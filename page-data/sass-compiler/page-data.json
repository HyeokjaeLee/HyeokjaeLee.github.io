{
    "componentChunkName": "component---src-layout-post-tsx",
    "path": "/sass-compiler/",
    "result": {"data":{"markdownRemark":{"html":"<p>나는 프론트엔드 작업을 할때 CSS보다 Sass(SCSS)를 선호한다.</p>\n<p>그중에서도 CSS와 호환성을 갖춘 SCSS를 선호하며 어느 정도 스타일링할 코드가 많아지면 CSS를 사용하다가도 SCSS로 코드를 옮겨서 작업한다.</p>\n<p>Sass는 편리한 점이 정말 많은데 대표적으로 함수나 변수를 선언해서 사용할 수 있어서 수정이 편하고 코드의 가독성이 좋다는 게 가장 큰 이유 같다.</p>\n<p>보통 node.js 환경에서 프로젝트를 진행한다면 Sass를 지원해주는 모듈들이 많아 Sass파일 자체를 import해서 사용이 가능하지만 그게 아닌경우에는 작성한 Sass를 컴파일한 CSS를 import해서 이용한다.</p>\n<p>오늘은 이런 non-node.js환경에서 Sass의 더욱 편리한 사용을 도와주는 2가지 VSCODE 익스텐션과 기본 설정을 소개해보려 한다.</p>\n<h2>Sass(SCSS)</h2>\n<p>Sass는 CSS로 컴파일 가능한 스크립트 언어이다.</p>\n<p>CSS의 확장판 정도라고 생각하면 될 것 같다.</p>\n<h3><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>Visual Studio Code</title><path d=\"M23.15 2.587L18.21.21a1.494 1.494 0 0 0-1.705.29l-9.46 8.63-4.12-3.128a.999.999 0 0 0-1.276.057L.327 7.261A1 1 0 0 0 .326 8.74L3.899 12 .326 15.26a1 1 0 0 0 .001 1.479L1.65 17.94a.999.999 0 0 0 1.276.057l4.12-3.128 9.46 8.63a1.492 1.492 0 0 0 1.704.29l4.942-2.377A1.5 1.5 0 0 0 24 20.06V3.939a1.5 1.5 0 0 0-.85-1.352zm-5.146 14.861L10.826 12l7.178-5.448v10.896z\"/></svg> VSCODE 익스텐션 설치</h3>\n<ul>\n<li>\n<p><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass\">Live Sass Compiler</a>:</strong> Sass를 CSS로 실시간 컴파일해주는 익스텐션</p>\n</li>\n<li>\n<p><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=Syler.sass-indented\">Sass</a>:</strong> Sass의 highlighting, autocomplete &#x26; Formatter 지원해주는 익스텐션</p>\n</li>\n</ul>\n<h3><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>Sass</title><path d=\"M12 0c6.627 0 12 5.373 12 12s-5.373 12-12 12S0 18.627 0 12 5.373 0 12 0zM9.615 15.998c.175.645.156 1.248-.024 1.792l-.065.18c-.024.061-.052.12-.078.176-.14.29-.326.56-.555.81-.698.759-1.672 1.047-2.09.805-.45-.262-.226-1.335.584-2.19.871-.918 2.12-1.509 2.12-1.509v-.003l.108-.061zm9.911-10.861c-.542-2.133-4.077-2.834-7.422-1.645-1.989.707-4.144 1.818-5.693 3.267C4.568 8.48 4.275 9.98 4.396 10.607c.427 2.211 3.457 3.657 4.703 4.73v.006c-.367.18-3.056 1.529-3.686 2.925-.675 1.47.105 2.521.615 2.655 1.575.436 3.195-.36 4.065-1.649.84-1.261.766-2.881.404-3.676.496-.135 1.08-.195 1.83-.104 2.101.24 2.521 1.56 2.43 2.1-.09.539-.523.854-.674.944-.15.091-.195.12-.181.181.015.09.091.09.21.075.165-.03 1.096-.45 1.141-1.471.045-1.29-1.186-2.729-3.375-2.7-.9.016-1.471.091-1.875.256-.03-.045-.061-.075-.105-.105-1.35-1.455-3.855-2.475-3.75-4.41.03-.705.285-2.564 4.8-4.814 3.705-1.846 6.661-1.335 7.171-.21.733 1.604-1.576 4.59-5.431 5.024-1.47.165-2.235-.404-2.431-.615-.209-.225-.239-.24-.314-.194-.12.06-.045.255 0 .375.12.3.585.825 1.396 1.095.704.225 2.43.359 4.5-.45 2.324-.899 4.139-3.405 3.614-5.505l.073.067z\"/></svg>Live Sass Compiler 설정</h3>\n<p>Sass 익스텐션의 경우엔 별다른 설정이 필요 없지만 Live Sass Compiler는 나에게 맞는 형태로 설정이 필요하다.</p>\n<p>설정을 위해 VSCODE의 <code>settings.json</code> 파일에 다음 내용을 추가해주자</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">{\n  &quot;liveSassCompile.settings.formats&quot;: [\n    {\n      &quot;format&quot;: &quot;expanded&quot;,\n      &quot;extensionName&quot;: &quot;.css&quot;,\n      &quot;savePath&quot;: &quot;~/../css&quot;\n    },\n    {\n      &quot;format&quot;: &quot;compressed&quot;,\n      &quot;extensionName&quot;: &quot;.min.css&quot;,\n      &quot;savePath&quot;: &quot;~/../css&quot;\n    }\n  ]\n}</code>\n        </deckgo-highlight-code>\n<blockquote>\n<p>min.css는 css의 공백과 줄 바꿈을 삭제해 용량을 줄인 파일로 전송량을 줄일 수 있다.</p>\n</blockquote>\n<p><br>나는 어차피 작성은 Sass로 하고 컴파일된 CSS를 직접 수정할 필요가 없다.</p>\n<p>min.css파일만 필요하기 때문에 다음과 같은 설정으로 사용한다.</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">{\n  &quot;liveSassCompile.settings.formats&quot;: [\n    {\n      &quot;format&quot;: &quot;compressed&quot;,\n      &quot;extensionName&quot;: &quot;.min.css&quot;,\n      &quot;savePath&quot;: &quot;~/../css&quot;\n    }\n  ]\n}</code>\n        </deckgo-highlight-code>\n<br/>\n<div class=\"img-txt-wrap\">\n    <div class=\"img-wrap\">\n      설정후 우측 하단에 Watch Sass를 클릭하시면 Sass파일의 수정을 감지해 실시간으로 CSS파일을 만들어준다.\n      <img  width=\"600\" src=\"https://user-images.githubusercontent.com/71566740/133251442-d957eeaf-b125-4419-87bf-0fd5aa3f0413.png\"/>\n      <br/>\n      나는 다음과 같은 구조를 주로 사용하기 때문에 이렇게 설정했지만 다른 설정을 원하시면 `savePath`부분에 원하는 컴파일 위치를 작성해서 사용하면 된다.\n       <img  width=\"800\" src=\"https://user-images.githubusercontent.com/71566740/133251746-ffd66e52-3d03-42cd-8bfd-0d90f861854b.png\"/>\n    </div>\n</div>","frontmatter":{"title":"Live Sass Compiler 사용하기","titleImage":"https://user-images.githubusercontent.com/71566740/133248000-62950c37-88dd-491e-8d1f-f0e8c66241e0.png","date":"2021-09-01","description":"편리한 Sass 사용을 위한 익스텐션","tags":["Frontend"]},"fields":{"slug":"/sass-compiler/"},"id":"bdbf997d-0b77-50e1-9c1e-412cf09423e7"},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/employment-memoirs/"},"frontmatter":{"description":"평범한 대학생 개발자의 2022년 상반기 취업과정","title":"대학생 개발자 취업 회고"},"id":"7f673a90-03bd-5ac5-8d72-14fae351d9e0"},{"fields":{"slug":"/blog-remake-review2/"},"frontmatter":{"description":"Next.js에서 Gatsby로 블로그를 이전하고 느낀점","title":"Gatsby 블로그 이전"},"id":"66f8e34d-dd75-54d9-9928-619d1a68c20b"},{"fields":{"slug":"/covid-19-api-update/"},"frontmatter":{"description":"단계적 일상회복에 따른 Covid-19 API 업데이트","title":"Covid-19 API 업데이트"},"id":"5956065c-b437-5b02-8cbd-ce47c45adbf4"},{"fields":{"slug":"/korea-webtoon-api-update/"},"frontmatter":{"description":"Daum 웹툰의 개편으로 인한 API 업데이트","title":"Webtoon API 업데이트"},"id":"b336fa51-6beb-5eaf-b978-4cb0f7e04eef"},{"fields":{"slug":"/nest-js/"},"frontmatter":{"description":"Typescript를 이용한 NestJS 코드 작성","title":"NestJS 웹서버 구축하기"},"id":"9be8dafe-9937-5b5c-9cb7-b9fdb6a71285"},{"fields":{"slug":"/knu-lms-scheduler/"},"frontmatter":{"description":"공주대학교 비대면 강의 시스템 편의성 개선 프로젝트","title":"KNU LMS Scheduler 프로젝트"},"id":"1bc99fde-1275-575d-85f5-5c2d89765a66"},{"fields":{"slug":"/gititle-project/"},"frontmatter":{"description":"좋은 커밋 메시지를 작성하기 위한 프로젝트","title":"Gititle 프로젝트"},"id":"718ca256-6e60-5405-acb8-a92955aaacda"},{"fields":{"slug":"/sass-compiler/"},"frontmatter":{"description":"편리한 Sass 사용을 위한 익스텐션","title":"Live Sass Compiler 사용하기"},"id":"bdbf997d-0b77-50e1-9c1e-412cf09423e7"},{"fields":{"slug":"/nodejs-crawling/"},"frontmatter":{"description":"Node.js 크롤링을 통한 데이터 수집","title":"크롤링을 통한 데이터 수집하기"},"id":"70d13f6a-02bb-5580-b6ed-6061ed010355"},{"fields":{"slug":"/copilot-review/"},"frontmatter":{"description":"Github의 코딩 AI, Copilot 한 달 사용 리뷰","title":"Copilot 사용 후기"},"id":"e3d28e01-5ce6-57c4-b10d-d8df723ba9d3"},{"fields":{"slug":"/typescript-express/"},"frontmatter":{"description":"Typescript를 이용한 Express 코드 작성","title":"Typescript + Express 웹서버 구축하기"},"id":"dd28572f-2b42-58af-bfc5-d71794756e73"},{"fields":{"slug":"/blog-remake-review1/"},"frontmatter":{"description":"Next.js에서 Gatsby로 블로그를 이전하면서 느낀점","title":"Gatsby 블로그 이전 중간 리뷰"},"id":"d3542b4e-6377-5d75-b9c1-710d9e467d38"},{"fields":{"slug":"/good-commit-message/"},"frontmatter":{"description":"Git Commit Message 작성을 위한 나와의 약속","title":"Git Commit Message Convention"},"id":"3dfd85ee-9b0d-5339-bc8e-5bc5fdf0f81b"}]}},"pageContext":{"slug":"/sass-compiler/"}},
    "staticQueryHashes": []}