{
    "componentChunkName": "component---src-templates-markdown-layout-tsx",
    "path": "/typescript-express/",
    "result": {"data":{"markdownRemark":{"html":"<h2>Typescript를 사용하는 이유</h2>\n<img src=\"https://user-images.githubusercontent.com/71566740/133249381-ac45b5e7-96c0-441e-8f11-9032d711972e.png\" class=\"img large\">\n<p>저는 Node.js 사용할 때 Javascript보다는 Typescript를 선호합는데\r\n<br>여러 가지 이유가 있겠지만 Javascript는 보통 실행되는 프로그램을 보면서 오류를 잡거나 따로 디버깅을 하는데 Typescript는 정적 타입을 지원해서 컴파일 단계에서 오류를 찾기 쉬운 점이 가장 큰 것 같습니다.</p>\n<p><br>데이터 타입이 중요한 서버를 구축할 때는 특히 더 유용하다고 느끼는데 오늘은 Node.js의 대표격인 서버 프레임워크 Express를 Typescript로 작성하기 위한 기본 설정을 다뤄보려 합니다.</p>\n<p><br>이전에는 Typescript로 Express를 이용할 때는 코드는 Typescript로 작성하고 이후 해당 코드를 Javascript로 컴파일 후 실행하는 방법을 사용했는데 바로 이전 Toy Project를 진행하면서 <code>ts-node</code>와 <code>nodemon</code>을 이용해 훨씬 편한 개발 환경을 구축할 수 있게 되어 해당 방법으로 진행하겠습니다.</p>\n<h2>개발환경 설정</h2>\n<h3>전역 node 모듈 설치</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ npm install -g typescript nodemon ts-node</code>\n        </deckgo-highlight-code>\n<ul>\n<li>해당 모듈들은 다른 프로젝트에서 자주 사용해서 전역으로 설치했습니다.</li>\n</ul>\n<h3>프로젝트 생성 및 Typescript 적용</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ mkdir &lt;프로젝트 이름&gt;\r\n$ cd &lt;프로젝트 이름&gt;\r\n$ npm init\r\n$ tsc --init\r\n$ mkdir src</code>\n        </deckgo-highlight-code>\n<h3>사용할 node.js 모듈 설치</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ npm i express\r\n$ npm i --save-dev @types/express</code>\n        </deckgo-highlight-code>\n<h3>Typescript 컴파일 설정</h3>\n<p>이제 Typescript 컴파일 관련 설정들을 해주어야 합니다.\r\n<br>처음 <code>tsc --init</code>으로 설정 파일이 생성되면 어려 값들이 주석 처리된 상태로 생성되는데 각 설정들의 자세한 내용은 구글링해보시면 자세하게 나옵니다.</p>\n<p>저는 다음과 같이 설정했습니다.</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">{\r\n  &quot;exclude&quot;: [&quot;node_modules&quot;],\r\n  &quot;include&quot;: [&quot;src&quot;],\r\n\r\n  &quot;compilerOptions&quot;: {\r\n    &quot;target&quot;: &quot;ES6&quot;,\r\n    &quot;module&quot;: &quot;commonjs&quot;,\r\n    &quot;sourceMap&quot;: true,\r\n    &quot;outDir&quot;: &quot;dist&quot;,\r\n    &quot;strict&quot;: true,\r\n    &quot;moduleResolution&quot;: &quot;node&quot;,\r\n    &quot;esModuleInterop&quot;: true,\r\n    &quot;skipLibCheck&quot;: true,\r\n    &quot;forceConsistentCasingInFileNames&quot;: true\r\n  }\r\n}</code>\n        </deckgo-highlight-code>\n<h3>start 스크립트 추가</h3>\n<p>이전에 <code>tsc</code>를 사용할 때는 컴파일만 지원한다면 <code>ts-node</code>는 컴파일+실행까지 지원해 줍니다.\r\n<br>추가로 <code>nodemon</code>은 파일의 변화를 감지하여 자동으로 결과물을 Refresh 해줍니다.</p>\n<p>다음과 같이 해당 모듈들을 이용해 실행할 수 있는 스크립트를 추가해 줍니다.</p>\n<deckgo-highlight-code language=\"json\"  >\n          <code slot=\"code\">&quot;scripts&quot;: {\r\n    &quot;test&quot;: &quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;,\r\n    &quot;start&quot;: &quot;nodemon --exec ts-node src/app.ts&quot; //해당 스크립트 추가\r\n  }</code>\n        </deckgo-highlight-code>\n<h2>예제 코드 작성</h2>\n<h3><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>TypeScript</title><path d=\"M1.125 0C.502 0 0 .502 0 1.125v21.75C0 23.498.502 24 1.125 24h21.75c.623 0 1.125-.502 1.125-1.125V1.125C24 .502 23.498 0 22.875 0zm17.363 9.75c.612 0 1.154.037 1.627.111a6.38 6.38 0 0 1 1.306.34v2.458a3.95 3.95 0 0 0-.643-.361 5.093 5.093 0 0 0-.717-.26 5.453 5.453 0 0 0-1.426-.2c-.3 0-.573.028-.819.086a2.1 2.1 0 0 0-.623.242c-.17.104-.3.229-.393.374a.888.888 0 0 0-.14.49c0 .196.053.373.156.529.104.156.252.304.443.444s.423.276.696.41c.273.135.582.274.926.416.47.197.892.407 1.266.628.374.222.695.473.963.753.268.279.472.598.614.957.142.359.214.776.214 1.253 0 .657-.125 1.21-.373 1.656a3.033 3.033 0 0 1-1.012 1.085 4.38 4.38 0 0 1-1.487.596c-.566.12-1.163.18-1.79.18a9.916 9.916 0 0 1-1.84-.164 5.544 5.544 0 0 1-1.512-.493v-2.63a5.033 5.033 0 0 0 3.237 1.2c.333 0 .624-.03.872-.09.249-.06.456-.144.623-.25.166-.108.29-.234.373-.38a1.023 1.023 0 0 0-.074-1.089 2.12 2.12 0 0 0-.537-.5 5.597 5.597 0 0 0-.807-.444 27.72 27.72 0 0 0-1.007-.436c-.918-.383-1.602-.852-2.053-1.405-.45-.553-.676-1.222-.676-2.005 0-.614.123-1.141.369-1.582.246-.441.58-.804 1.004-1.089a4.494 4.494 0 0 1 1.47-.629 7.536 7.536 0 0 1 1.77-.201zm-15.113.188h9.563v2.166H9.506v9.646H6.789v-9.646H3.375z\"/></svg>app.ts</h3>\n<p>프로젝트 root 폴더 내 생성해둔 src 폴더 안에 app.ts 파일을 생성 후 다음과 같은 코드를 작성합니다.</p>\n<deckgo-highlight-code language=\"typescript\"  >\n          <code slot=\"code\">import express from &quot;express&quot;;\r\nconst exp = express();\r\nconst port = 3000;\r\nexp.listen(port, () =&gt; {\r\n  console.log(`Server listening on port ${port}`);\r\n});\r\n\r\nexp.get(&quot;/&quot;, (req, res) =&gt; {\r\n  const name = !req.query.name ? &quot;World&quot; : req.query.name;\r\n  res.send(`Hello ${name}`);\r\n});</code>\n        </deckgo-highlight-code>\n<h3><svg role=\"img\" viewBox=\"0 0 24 24\" xmlns=\"http://www.w3.org/2000/svg\"><title>Node.js</title><path d=\"M11.998,24c-0.321,0-0.641-0.084-0.922-0.247l-2.936-1.737c-0.438-0.245-0.224-0.332-0.08-0.383 c0.585-0.203,0.703-0.25,1.328-0.604c0.065-0.037,0.151-0.023,0.218,0.017l2.256,1.339c0.082,0.045,0.197,0.045,0.272,0l8.795-5.076 c0.082-0.047,0.134-0.141,0.134-0.238V6.921c0-0.099-0.053-0.192-0.137-0.242l-8.791-5.072c-0.081-0.047-0.189-0.047-0.271,0 L3.075,6.68C2.99,6.729,2.936,6.825,2.936,6.921v10.15c0,0.097,0.054,0.189,0.139,0.235l2.409,1.392 c1.307,0.654,2.108-0.116,2.108-0.89V7.787c0-0.142,0.114-0.253,0.256-0.253h1.115c0.139,0,0.255,0.112,0.255,0.253v10.021 c0,1.745-0.95,2.745-2.604,2.745c-0.508,0-0.909,0-2.026-0.551L2.28,18.675c-0.57-0.329-0.922-0.945-0.922-1.604V6.921 c0-0.659,0.353-1.275,0.922-1.603l8.795-5.082c0.557-0.315,1.296-0.315,1.848,0l8.794,5.082c0.57,0.329,0.924,0.944,0.924,1.603 v10.15c0,0.659-0.354,1.273-0.924,1.604l-8.794,5.078C12.643,23.916,12.324,24,11.998,24z M19.099,13.993 c0-1.9-1.284-2.406-3.987-2.763c-2.731-0.361-3.009-0.548-3.009-1.187c0-0.528,0.235-1.233,2.258-1.233 c1.807,0,2.473,0.389,2.747,1.607c0.024,0.115,0.129,0.199,0.247,0.199h1.141c0.071,0,0.138-0.031,0.186-0.081 c0.048-0.054,0.074-0.123,0.067-0.196c-0.177-2.098-1.571-3.076-4.388-3.076c-2.508,0-4.004,1.058-4.004,2.833 c0,1.925,1.488,2.457,3.895,2.695c2.88,0.282,3.103,0.703,3.103,1.269c0,0.983-0.789,1.402-2.642,1.402 c-2.327,0-2.839-0.584-3.011-1.742c-0.02-0.124-0.126-0.215-0.253-0.215h-1.137c-0.141,0-0.254,0.112-0.254,0.253 c0,1.482,0.806,3.248,4.655,3.248C17.501,17.007,19.099,15.91,19.099,13.993z\"/></svg>실행</h3>\n<deckgo-highlight-code language=\"bash\"  >\n          <code slot=\"code\">$ npm start</code>\n        </deckgo-highlight-code>\n<p>서버 실행 후 <code>http://localhost:3000/</code>로 접속하면 <code>Hello World</code>가 출력됩니다.</p>\n<p>만약 <code>http://localhost:3000/?name=Nagle</code> 이런 식으로 쿼리 값을 주게 된다면 <code>Hello Nagle</code>이 출력됩니다.</p>","frontmatter":{"emoji":"📢","title":"Typescript + Express 웹서버 구축하기","date":"2021-08-12","description":"Typescript를 이용한 Express 코드 작성","tag":["Backend","Typescript"]},"fields":{"slug":"/typescript-express/"},"id":"7de321b0-d894-5d5a-a7e1-058f7c309364"},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/korea-webtoon-api-update/"},"frontmatter":{"description":"Daum 웹툰의 대규모 변화로 인한 API 업데이트","title":"Korea Webtoon API 업데이트"},"id":"70e1cf28-97c5-594c-ab1d-16d4ec69657c"},{"fields":{"slug":"/nest-js/"},"frontmatter":{"description":"Typescript를 이용한 NestJS 코드 작성","title":"NestJS 웹서버 구축하기"},"id":"305141a9-5929-57a3-aeed-d6841c809e43"},{"fields":{"slug":"/knu-lms-scheduler/"},"frontmatter":{"description":"공주대학교 비대면 강의 시스템 UI 개선 프로젝트","title":"KNU LMS Scheduler 프로젝트"},"id":"c650e111-86f5-5201-b9f9-d40fccf2a8eb"},{"fields":{"slug":"/gititle-project/"},"frontmatter":{"description":"좋은 커밋 메시지를 작성하기 위한 프로젝트","title":"Gititle 프로젝트"},"id":"59da09b0-cfe8-5387-8b2c-18728bc48eb5"},{"fields":{"slug":"/sass-compiler/"},"frontmatter":{"description":"편리한 Sass 사용을 위한 익스텐션","title":"Live Sass Compiler 사용하기"},"id":"cddd5b1b-eb1c-5a3a-bf59-e59f20abc909"},{"fields":{"slug":"/nodejs-crawling/"},"frontmatter":{"description":"Node.js 크롤링을 통한 데이터 수집","title":"크롤링을 통한 데이터 수집하기"},"id":"2a3b304d-fff2-5587-9a14-4f3a1864ba1d"},{"fields":{"slug":"/copilot-review/"},"frontmatter":{"description":"Github의 코딩 AI, Copilot 한 달 사용 리뷰","title":"Copilot 사용 후기"},"id":"8a284f98-aa79-5a11-9f60-17da05b03882"},{"fields":{"slug":"/typescript-express/"},"frontmatter":{"description":"Typescript를 이용한 Express 코드 작성","title":"Typescript + Express 웹서버 구축하기"},"id":"7de321b0-d894-5d5a-a7e1-058f7c309364"},{"fields":{"slug":"/blog-remake-review1/"},"frontmatter":{"description":"해당 블로그 제작 중간 리뷰","title":"Next.js에서 Gatsby로 블로그 이사 중간 리뷰"},"id":"4cfa4a82-589b-5649-8fd0-5cbb6f48d40b"},{"fields":{"slug":"/good-commit-message/"},"frontmatter":{"description":"Commit Message 작성을 위한 나와의 약속","title":"Git Commit Message Convention"},"id":"98992a08-a70f-5f2e-b087-f3ddf6331f1d"}]}},"pageContext":{"slug":"/typescript-express/"}},
    "staticQueryHashes": []}