{"componentChunkName":"component---src-layouts-post-layout-tsx","path":"/react-component-concept/","result":{"data":{"markdownRemark":{"id":"4a244265-f57e-59b9-9b29-7238954c5114","html":"<p class=\"my-4 whitespace-pre-wrap\">최근 총 3개의 제품을 효과적으로 개발할 수 있도록 하기 위해 컴포넌트들을 제품 코드에서 분리해 스토리북과 npm 패키지로 관리하기 위한 작업을 마쳤다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">관리되어야 할 컴포넌트들의 컨셉에 대해 많은 고민을 했고 그렇게 설정한 내용들에 대해 글로 남겨보려 한다.</p>\n<h2 id=\"렌더링-최적화\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"렌더링 최적화 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>렌더링 최적화</h2>\n<p class=\"my-4 whitespace-pre-wrap\">일반적으로 값을 입력받는 컴포넌트들은 해당 컴포넌트 상위 컴포넌트에서 state를 전달받아 사용되는 경우가 많다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">하지만 state를 외부에서 전달받아 사용하게 되면 state를 지니고 있는 상위 컴포넌트 하위에 있는 모든 컴포넌트들에 재렌더링이 발생한다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/da87d333-6dae-4c2d-92f0-390aa57baf50\" alt=\"bad-render\" class=\"max-w-full rounded-sm my-12 mx-auto\">\n불필요한 재렌더링 발생</p>\n</blockquote>\n<p class=\"my-4 whitespace-pre-wrap\">이런 문제점을 해결하기 위해 react-hook-form과 같은 라이브러리가 있지만 해당 라이브러리가 제시한 구조가 번거롭고 Validation 자유도 역시 그렇게 좋지 못하다고 생각해서 입력을 받는 모든 컴포넌트들이 자체적으로 state를 가지게 함으로써 이 문제를 해결했다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">모든 입력을 받는 컴포넌트들이 내부적으로 state를 가지게 되면 굳이 컴포넌트 외부 state를 수정하지 않고도 다음과 같이 원하는 입력을 화면에 표시할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Textbox</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>formData<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>formData<span class=\"token punctuation\">.</span>text <span class=\"token operator\">=</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span></code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\">기본적으로 Textbox 내부 로직에서는 외부에서 전달받은 value의 state가 변경되면 해당 값을 반영하도록 설계했지만 외부 state를 사용하는 경우 내부 state가 불필요해지므로 외부에서 state를 전달받았을 때는 내부 state를 비활성화하는 valueSync 옵션을 제공했다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Textbox</span></span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>formData<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setFormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>formData<span class=\"token punctuation\">,</span> text<span class=\"token operator\">:</span> value <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">valueSync</span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\">이렇게 설계된 컴포넌트들로 페이지를 구성하면 다음과 같이 실제로 값이 수정되는 컴포넌트에서만 재렌더링이 발생하도록 할 수 있다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/df938800-02a9-407c-a4d9-814ba1356ae0\" alt=\"good-render\" class=\"max-w-full rounded-sm my-12 mx-auto\">\n실제 값이 수정되는 컴포넌트만 재렌더링이 발생</p>\n</blockquote>\n<p class=\"my-4 whitespace-pre-wrap\">이렇게 컴포넌트 자체적으로 state를 관리하면서 Input 컴포넌트들에 공통적으로 적용되어야 할 Validation 등을 고차 컴포넌트(Higher-Order-Components)를 표방한 함수에 분리해 두었다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">해당 attachCommonProps 함수는 설계한 Input 컴포넌트들이 공통적으로 제공해야 하는 Validation 로직이나 Label 혹은 Tootip을 추가하는 등의 로직을 담고 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">type</span> <span class=\"token class-name\">ComplexTextboxProps</span> <span class=\"token operator\">=</span> TextboxProps <span class=\"token operator\">&amp;</span> CommonProps<span class=\"token operator\">&lt;</span>TextboxProps<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ComplexTextbox <span class=\"token operator\">=</span> <span class=\"token function\">attachCommonProps</span><span class=\"token punctuation\">(</span>Textbox<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\">ComplexTextbox에서 제공하고 있는 대부분의 Props는 attachCommonProps를 통해 다른 컴포넌트들에도 동일하게 적용되며 이렇게 반환된 ComplexTextbox는 다음과 같이 사용할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComplexTextbox</span></span>\n  <span class=\"token attr-name\">description</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>후불 납부 총액을 입력해 주세요.<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">essential</span>\n  <span class=\"token attr-name\">labelText</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>후불 납부 총액<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>formData<span class=\"token punctuation\">.</span>payAmount<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">onChange</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>formData<span class=\"token punctuation\">.</span>payAmount <span class=\"token operator\">=</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>comma-separated-number<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">unit</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>원<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/215722ac-103e-4d90-a916-5f5e27d7f201\" alt=\"good-render2\" class=\"max-w-full rounded-sm my-12 mx-auto\"></p>\n<h2 id=\"타입-추론\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%ED%83%80%EC%9E%85-%EC%B6%94%EB%A1%A0\" aria-label=\"타입 추론 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>타입 추론</h2>\n<p class=\"my-4 whitespace-pre-wrap\">개인적으로 프론트엔드 개발을 하면서 가장 실수가 잦은 부분이 데이터 바인딩 과정인데 최대한 개발자의 실수를 방지하기 위해 엄격한 타입 추론을 제공하려 했다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">예를 들면 Searchbox 컴포넌트의 경우엔 제공되는 options, value, onChange의 매개변수가 서로 의존성을 가지며 상호작용이 이루어져야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">SearchboxProps<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> OptionHint<span class=\"token operator\">></span></span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PairOption<span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> PairOption<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">;</span>\n  onChange<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n    value<span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PairOption<span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span>\n      <span class=\"token operator\">?</span> PairOption<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token string\">'value'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span>\n      <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  options<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">PairOption<span class=\"token operator\">&lt;</span><span class=\"token keyword\">infer</span> <span class=\"token constant\">U</span><span class=\"token operator\">></span></span> <span class=\"token operator\">?</span> PairOption<span class=\"token operator\">&lt;</span><span class=\"token constant\">U</span><span class=\"token operator\">></span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  optionsFixed<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  placeholder<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  onlyPerfectMatch<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  openDirection<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'up'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'down'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'left'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'right'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  id<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  disabled<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  invalid<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  theme<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'linear'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'box'</span><span class=\"token punctuation\">;</span>\n  modifier<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token string\">'system'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'readonly'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'user'</span><span class=\"token punctuation\">;</span>\n  width<span class=\"token operator\">?</span><span class=\"token operator\">:</span> React<span class=\"token punctuation\">.</span>CSSProperties<span class=\"token punctuation\">[</span><span class=\"token string\">'width'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  valueSync<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p class=\"my-4 whitespace-pre-wrap\">위 Searchbox의 Props와 같이 각 타입들이 엄격하게 관리되면 특정 값은 자유롭게 입력받을 수 있으면서 해당 값을 참고해야 하는 다른 값들은 엄격하게 관리할 수 있다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">options에 제공한 값에 따라 onChange 매개변수나 value의 타입을 엄격하게 관리하거나 반대로 value에 따라 options의 타입을 관리할 수 있다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/fe6c2b69-9e2e-4724-8204-858b30eef7a3\" alt=\"type\" class=\"max-w-full rounded-sm my-12 mx-auto\">\noptions을 자유로운 형식의 array로 입력받을 수 있음</p>\n</blockquote>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/fa5409b9-7431-437c-bef1-5e4e48d5d3c6\" alt=\"type2\" class=\"max-w-full rounded-sm my-12 mx-auto\">\noptions에 제공한 값에 따라 onChnage 매개변수, value는 엄격하게 관리됨</p>\n</blockquote>\n<p class=\"my-4 whitespace-pre-wrap\">또는 특정 prop에 따라 내부 로직을 재활용하는 새로운 컴포넌트를 표시하는 것도 가능하다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">물론 이것 역시 value, onChange 매개변수 등의 타입은 정확하게 추론할 수 있어야 한다.</p>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/530c7918-0f6d-4301-be52-cffa9dee64d6\" alt=\"storybook\" class=\"max-w-full rounded-sm my-12 mx-auto\">\ntype에 따라 입력받을 수 있는 값이 달라짐</p>\n</blockquote>\n<p class=\"my-4 whitespace-pre-wrap\">이런 타입 추론은 추후 validation 로직에서도 유용하다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">위에서 언급한 attachCommonProps는 validation Prop을 제공하는데 options에서 제공한 값에 따라 validation의 매개변수를 추론할 수기 때문에 다음과 같이 작성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ComplexSearchbox</span></span>\n  <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>restProps<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">options</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>customerOptions<span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>customersObject<span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>customerId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span>\n  <span class=\"token attr-name\">validation</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">?.</span>id <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'id가 0인 고객은 존재하지 않습니다.'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n<span class=\"token punctuation\">/></span></span></code></pre></div>\n<blockquote class=\"border-l-4 border-gray-500 pl-4 italic blockquote-container\">\n<p class=\"my-4 whitespace-pre-wrap\"><img src=\"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/4087d06f-6607-4190-956e-e8d7363d4dd4\" alt=\"good-render3\" class=\"max-w-full rounded-sm my-12 mx-auto\">\nvalidation을 체크하는 로직 역시 컴포넌트 내부에서 관리되고 있으므로 컴포넌트 외부 렌더링에 영향을 주지 않는다.</p>\n</blockquote>\n<p class=\"my-4 whitespace-pre-wrap\">이런 validation들을 모두 통과해야 요청을 보낼 수 있게 하는 로직은 useValidationStore라는 커스텀 hook을 만들어뒀다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">해당 validationStore는 수정이 잦기 때문에 Map객체를 이용해 구현했다.</p>\n<h2 id=\"재사용성\" style=\"position:relative;\" class=\"font-bold mt-10 mb-4 text-3xl\"><a href=\"#%EC%9E%AC%EC%82%AC%EC%9A%A9%EC%84%B1\" aria-label=\"재사용성 permalink\" class=\"anchor before\" class=\"text-blue-500 hover:underline\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>재사용성</h2>\n<p class=\"my-4 whitespace-pre-wrap\">이렇게 컴포넌트들이 자체적으로 제공하는 기능들이 많으면 컴포넌트를 개발하는데 많은 시간을 쏟게 된지만 반대로 개발된 컴포넌트들을 조립해 많은 페이지들을 만들어낼수록 효율적인 방법이라고 생각한다.</p>\n<p class=\"my-4 whitespace-pre-wrap\">다만 이런 컨셉의 컴포넌트 구성은 다른 컴포넌트 라이브러리들과 함께 사용하면 코드 통일성을 해치기 때문에 해당 프로젝트에서 사용할 대부분의 컴포넌트를 직접 구현하거나 최소한 한 번 더 감싸서 사용하겠다는 생각으로 적용해야 할 것 같다.</p>\n<hr>\n<p class=\"my-4 whitespace-pre-wrap\">전체적인 재사용과 관련된 구조는 Atomic Design Pattern을 참고해 적합하다고 생각하는 구조로 설계했는데 관련 내용은 다른 포스트에 작성하겠다.</p>","headings":[{"depth":2,"value":"렌더링 최적화","id":"렌더링-최적화"},{"depth":2,"value":"타입 추론","id":"타입-추론"},{"depth":2,"value":"재사용성","id":"재사용성"}],"frontmatter":{"title":"리액트 컴포넌트, 어떤 컨셉으로 개발할까?","date":"22년 11월 16일","description":"리렌더링을 최소화한 React 기반 컴포넌트 라이브러리를 개발하면서 고민했던 내용","tags":["frontend"]}},"previous":{"fields":{"slug":"/spawn-node-gyp-enoent/"},"frontmatter":{"title":"Spawn node-gyp ENOENT","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/b40ef5d8-6697-41ff-83e6-3e79aef7617a"}},"next":{"fields":{"slug":"/digital-nomad-in-chiang-mai/"},"frontmatter":{"title":"치앙마이 디지털 노마드 생활기","titleImage":"https://github.com/HyeokjaeLee/hyeokjaelee.github.io/assets/71566740/4624a012-2823-464f-ac27-16d1c43bbde6"}}},"pageContext":{"id":"4a244265-f57e-59b9-9b29-7238954c5114","previousPostId":"3ad93740-ae60-5d89-8d28-e9c06774ce7c","nextPostId":"f854dbb8-4991-5ce1-b270-4ced80210288"}},"staticQueryHashes":["2964855266","3766628212","4278130389","825490659"],"slicesMap":{}}