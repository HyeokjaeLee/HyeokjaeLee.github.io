<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Gatsby Starter Blog RSS Feed]]></title><description><![CDATA[덕업일치 개발자의 블로그입니다.]]></description><link>https://hyeokjaelee.github.io</link><generator>GatsbyJS</generator><lastBuildDate>Wed, 04 Oct 2023 04:34:11 GMT</lastBuildDate><item><title><![CDATA[Spawn node-gyp ENOENT]]></title><description><![CDATA[증상 새로 개발한 react와 storybook기반 디자인 시스템 모듈을 실제 프로젝트에 적용한 이후 node.js 환경 모든 프로젝트에서 새로운 dependencies를 설치하면 다음과 같은 오류가 발생함 실제 dependencies…]]></description><link>https://hyeokjaelee.github.io/spawn-node-gyp-enoent/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/spawn-node-gyp-enoent/</guid><pubDate>Sat, 17 Sep 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;증상&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%A6%9D%EC%83%81&quot; aria-label=&quot;증상 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;증상&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;새로 개발한 react와 storybook기반 디자인 시스템 모듈을 실제 프로젝트에 적용한 이후&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;node.js 환경 모든 프로젝트에서 새로운 dependencies를 설치하면 다음과 같은 오류가 발생함&lt;/p&gt;
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;실제 dependencies는 정상적으로 설치됨&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Error running install script for optional dependency: &quot;/Users/hyeokjaelee/wwp-frontend-lib/node_modules/watchpack-chokidar2/node_modules/fsevents: Command failed.
Exit code: 1
Command: node install.js
Arguments:
Directory: /Users/hyeokjaelee/wwp-frontend-lib/node_modules/watchpack-chokidar2/node_modules/fsevents
Output:
node:events:504
throw er; // Unhandled &apos;error&apos; event
^

Error: spawn node-gyp ENOENT
at Process.ChildProcess.\_handle.onexit (node:internal/child_process:283:19)
at onErrorNT (node:internal/child_process:478:16)
at processTicksAndRejections (node:internal/process/task_queues:83:21)
Emitted &apos;error&apos; event on ChildProcess instance at:
at Process.ChildProcess.\_handle.onexit (node:internal/child_process:289:12)
at onErrorNT (node:internal/child_process:478:16)
at processTicksAndRejections (node:internal/process/task_queues:83:21) {
errno: -2,
code: &apos;ENOENT&apos;,
syscall: &apos;spawn node-gyp&apos;,
path: &apos;node-gyp&apos;,
spawnargs: [ &apos;rebuild&apos; ]
}&quot;
info This module is OPTIONAL, you can safely ignore this error
✨ Done in 4.52s.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;해결&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%ED%95%B4%EA%B2%B0&quot; aria-label=&quot;해결 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;해결&lt;/h2&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;fsevents 모듈 전역 설치 (macOS 개발 환경에서만 사용되는 디렉터리 변경사항 감시 모듈)&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;프로젝트 package.json에 optionalDependencies 항목 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &quot;optionalDependencies&quot;: {
        &quot;fsevents&quot;: &quot;*&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;위 두가지 방법을 시도해 봤지만 변화가 없음&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;현재 nvm을 통해 모든 프로젝트의 node.js의 버전을 관리하고 있는데 오류가 발생하는 모든 프로젝트가 같은 버전의 node 버전을 사용하고 있는 것을 확인하고 해당 버전을 nvm에서 삭제 후 재설치했더니 오류가 해결됨&lt;/p&gt;</content:encoded></item><item><title><![CDATA[리액트 컴포넌트 스타일링 정리]]></title><description><![CDATA[이번에는 코드스테이츠 WEWIN 제품 개발팀에 Front-end…]]></description><link>https://hyeokjaelee.github.io/components-styling/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/components-styling/</guid><pubDate>Sat, 12 Mar 2022 00:00:00 GMT</pubDate><content:encoded>&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이번에는 코드스테이츠 WEWIN 제품 개발팀에 Front-end 개발자로 합류하면서 내가 기존 코드들을 보고 가장 처음 고민하고 개발 방향을 설정하면서 다른 개발자 분들께 이유와 의도를 전달하기 위해 작성한 글을 기반으로 기록을 남겨 보려 한다.&lt;/p&gt;
&lt;h2 id=&quot;발단&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EB%B0%9C%EB%8B%A8&quot; aria-label=&quot;발단 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;발단&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;제품에 대한 온보딩을 진행하면서 기존에 작성된 코드들을 살펴보게 되었고 당장 큰 범위의 기능 개발이 없었기 때문에 시간적 여유가 있다고 생각해 제품 코드에 대한 이해도를 높일겸 리팩토링을 진행하려 했다.
&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/175810773-a339fb4c-b0d8-4c2d-8044-d031d0a75915.jpeg&quot; alt=&quot;refactoring&quot; class=&quot;max-w-full rounded-sm my-12 mx-auto&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;내가 가장 처음 느꼈던 부분은 기존 코드가 여러 개발자 분들의 손을 거치다보니 여러 라이브러리와 스타일링 방법이 혼재되어있다는 부분이었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;우선 &lt;a href=&quot;https://chakra-ui.com/&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Chakra-ui&lt;/a&gt;를 기반으로 주로 CSS-in-JS 방식의 emotion과 styled-components가 혼재되어있었고 중간중간 리렌더링을 고려하지 않은 inline-style 코드들이 보였다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;CSS-in-JS 방식 자체는 요즘 트렌드이기도 하고 WEWIN의 제품이 성능 자체가 중요한것은 아니라고 판단되었기 때문에 그리 큰 문제는 아니었지만 이런식의 스타일링 컨벤션이 없는 상태로 제품 개발이 계속 진행되다 보면 결국 기술부채가 쌓이고 언젠가 이를 상환하기 위해 더 큰 리소스를 투입해야 된다고 생각했기 때문에 아직 제품 코드가 쌓이기 전에 이를 정리하고 가고싶다는 생각이었다.&lt;/p&gt;
&lt;h2 id=&quot;컴포넌트-스타일링-스택-후보&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8-%EC%8A%A4%ED%83%80%EC%9D%BC%EB%A7%81-%EC%8A%A4%ED%83%9D-%ED%9B%84%EB%B3%B4&quot; aria-label=&quot;컴포넌트 스타일링 스택 후보 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;컴포넌트 스타일링 스택 후보&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;다음은 내가 고민했던 기술 스택들에 대한 장단점과 나의 의견을 정리해본것이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;우선 다음과 같은 이유에서 inline-style로 작성된 코드들은 적용범위가 적고 우선순위가 높아 편리하지만 렌더링 할때마다 객체 주소가 바뀌고 이를 리액트는 가상 DOM 변화라고 인식하기 때문에 불필요한 리렌더를 발생시켜 제외하고 꼭 필요한 경우가 아니라면 최대한 걷어내기로 했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;물론 css 객체를 메모제이션 하면 이부분은 일정 부분 해소 가능하지만 굳이 CSS-in-JS 방식에 좋은 대안들이 많은데 이방법을 사용하는건 비효율 적이라는 생각이다.&lt;/p&gt;
&lt;h3 id=&quot;css-in-js&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#css-in-js&quot; aria-label=&quot;css in js permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS-in-JS&lt;/h3&gt;
&lt;h4 id=&quot;장점&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;장점 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;필요한 컴포넌트 페이지의 스타일 요소만 로딩함&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;파일 관리가 편함 / 컴포넌트간 완전한 분리가 보장 / 모듈성&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;스타일링 우선순위에 대한 고민이 비교적 적음&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;JS 환경을 최대한 활용함&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;자바스크립트와 CSS 사이의 상수와 함수를 공유함&lt;/strong&gt; (이부분이 가장 포기하기 힘든 부분)&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;트렌디함 / 요즘 많은 개발자들이 선호하는 방식&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;단점&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;단점 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;CSS-in-CSS 방식에 비해 성능이 떨어짐&lt;br/&gt;
&lt;a href=&quot;https://pustelto.com/blog/css-vs-css-in-js-perf/&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Tomas Pustelnik / Real-world CSS vs. CSS-in-JS performance comparison&lt;/a&gt;&lt;br/&gt; (요약하자면 앱의 속도 개선을 위해서는 JS 절대량을 줄여라)&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;스크립트 파일의 크기가 커지면 가독성을 해침 (특히 포메터를 사용할 경우)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;관련-스택&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EA%B4%80%EB%A0%A8-%EC%8A%A4%ED%83%9D&quot; aria-label=&quot;관련 스택 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;관련 스택&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;Emotion&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;Styled-Components&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;만약 위 두 기술스택중 선택한다면 Emotion을 선택할것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;잘 정리된 포스트가 있는데 가서 읽어 보는것도 좋을것 같다.&lt;br/&gt;&lt;a href=&quot;https://velog.io/@bepyan/styled-components-%EA%B3%BC-emotion-%EB%8F%84%EB%8C%80%EC%B2%B4-%EC%B0%A8%EC%9D%B4%EA%B0%80-%EB%AD%94%EA%B0%80&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;bepyan.log / styled-components 과 emotion, 도대체 차이가 뭔가?&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;css-in-css&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#css-in-css&quot; aria-label=&quot;css in css permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS-in-CSS&lt;/h3&gt;
&lt;h4 id=&quot;장점-1&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90-1&quot; aria-label=&quot;장점 1 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;가장 일반적이고 기초적인 스타일링 방법이기 때문에 Front-end 추후 합류할 다른 개발자들도 별도의 학습이 필요없다.&lt;br/&gt;(물론 CSS에서 제공하는 모든 기능을 잘 쓰냐는 다른 문제)&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;CSS-in-JS 방식보다 일반적인 상황에서 빠름&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;추가적인 의존성 없이 사용 가능&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;CSS-in-JS 방식보다 재사용성이 조금더 낫다는 생각&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;Stylesheet 파일 분리로 인해 준수한 가독성&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;단점-1&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90-1&quot; aria-label=&quot;단점 1 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;변동적인 값에 대한 핸들링이 불편함&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;디테일한 컨벤션 없이는 규모가 커질수록 협업이 힘들 수 있음 (클래스 속성 중복등)&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;파일 구조에 대한 고민이 필요함&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;우선순위에 대한 많은 고민이 필요함&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;관련-스택-1&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EA%B4%80%EB%A0%A8-%EC%8A%A4%ED%83%9D-1&quot; aria-label=&quot;관련 스택 1 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;관련 스택&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;CSS-Modules&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;SASS(SCSS)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;최종-선택&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%B5%9C%EC%A2%85-%EC%84%A0%ED%83%9D&quot; aria-label=&quot;최종 선택 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;최종 선택&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;결론적으로 나는 SCSS 형식을 사용해 CSS-Modules 방식으로 리팩토링을 진행하기로 했다.&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;여러가지 이유가 있겠지만 내가 가장 끌렸던 부분은 성능적인 부분이다.&lt;br/&gt; (참고로 나는 JS 내장함수들도 브라우저별 성능을 비교해보고 쓸정도로 최적화에 관심이 많다.)
&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/175810705-f4a0009e-b7db-49a9-a2d4-5c704b51cd47.jpeg&quot; alt=&quot;Choice-or-Decision-in-Chinese&quot; class=&quot;max-w-full rounded-sm my-12 mx-auto&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 WEWIN 제품들 그렇게 성능이 크게 필요한 제품도 아니고 SSR 방식으로 배포한다고 가정하면 더더욱 성능에서는 차이가 없다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;하지만 현재 우리는 교육 기업들이 학생관리에 사용할 B2B 어드민과 실제 학생들이 보게될 B2C 페이지, 코드스테이츠 내부 크루들이 사용할 백오피스 어드민 이렇게 총 3가지를 개발하고 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이중 SSR이 필요한 제품은 B2C 페이지 밖에 없기 때문에 SSR을 상정하고 개발을 진행하기엔 무리가 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;현재는 미세한 차이긴 하지만 나중에는 어떤기능을 지원하게 될지 모르는 상황에서 이런 성능적 이점을 챙기지 않을 이유가 없었다.&lt;br/&gt;(기존 코드가 대부분 CSS-in-JS 방식으로 작성되었기 때문에 할일이 더 많아지긴 했지만)&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그리고 내 기준으로 CSS-in-CSS 방식이 가독성이 좀더 좋다고 느꼈다.&lt;/p&gt;
&lt;h3 id=&quot;sass를-사용한-이유&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#sass%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;sass를 사용한 이유 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SASS를 사용한 이유&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;기본 CSS 대신 SASS를 사용한 이유는 여러기지 편의성 함수들과 스타일시트간 import의 성능 차이 때문이다&lt;br/&gt;(기본적으로 CSS의 @import는 병렬적으로 처리되지 않는다.)&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;관련된 내용들은 다음 포스트에 잘 정리되어있다.&lt;br/&gt;
&lt;a href=&quot;https://yceffort.kr/2021/03/improve-css-performance&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;yceffort / CSS 성능 향상 시키기&lt;/a&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;최근에 SASS에서 지원하는 여러 가지 기능들이 CSS에서도 지원되기 시작했지만 아직 실험적인 기능들이 많고 브라우저별 호환성도 천차만별이라 SASS를 선택했다.&lt;/p&gt;
&lt;h3 id=&quot;css-modules을-사용한-이유&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#css-modules%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;css modules을 사용한 이유 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CSS-Modules을 사용한 이유&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;CSS-Modules을 사용한 이유는 CSS-in-JS처럼 컴포넌트 간 분리를 원했으며 클래스명 작명 컨벤션을 만드는 것보다 컴포넌트 단위로 스타일시트가 종속되는 게 구조 파악에 용이하고 생각했기 때문이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;조금 덧붙이자면 Next.js는 &lt;a href=&quot;https://nextjs.org/blog/next-9-3#built-in-sass-css-module-support-for-component-level-styles&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;9.3 ver&lt;/a&gt; 이후 CSS-Modules 방식을 권장했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;B2C 페이지에 Next.js 도입을 고려하는 상황에서 CSS-Modules을 사용하는 방향으로 컨벤션을 확립한다면 추후 발생 가능한 혼란을 최소화할 수 있다고 생각했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;br/&gt;내 개인적인 선호가 영향을 주지 않았다면 거짓말이겠지만 적어도 레퍼런스와 고민 없이 선택한 것이 아니라고 말하고 싶다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;추가적으로 이러한 방법을 적용하고 이후 개발 패턴을 적용했을 때 효율적인 파일 구조가 어떤 것 일지 고민해봐야 할 것 같다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[대학생 개발자 취업 회고]]></title><description><![CDATA[시작하는 글 사진은 대학생 때 해외여행 다니면서 찍은 사진이다. 대학교를 졸업하면 해외여행이나 워킹홀리데이를 다녀온 뒤 취업할 생각이었는데 코로나 덕에 물 건너갔다... 올해 대학교 졸업을 앞두면서 Frontend engineer…]]></description><link>https://hyeokjaelee.github.io/employment-memoirs/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/employment-memoirs/</guid><pubDate>Wed, 16 Feb 2022 00:00:00 GMT</pubDate><content:encoded>&lt;h2 id=&quot;시작하는-글&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EA%B8%80&quot; aria-label=&quot;시작하는 글 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시작하는 글&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사진은 대학생 때 해외여행 다니면서 찍은 사진이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;대학교를 졸업하면 해외여행이나 워킹홀리데이를 다녀온 뒤 취업할 생각이었는데 코로나 덕에 물 건너갔다...&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;올해 대학교 졸업을 앞두면서 Frontend engineer로 커리어를 시작하게 되었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;원하는 스타트업에 합류하기로 결정하면서 내가 개발자를 꿈꾸면서 겪었던 내용들과 취업 과정을 글로 적어보려 한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;(정보전달보다는 나중에 내가 보기 위한 글이기 때문에 두서가 없을 수 있음)&lt;/p&gt;
&lt;h3 id=&quot;-장래희망-개발자&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EC%9E%A5%EB%9E%98%ED%9D%AC%EB%A7%9D-%EA%B0%9C%EB%B0%9C%EC%9E%90&quot; aria-label=&quot; 장래희망 개발자 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🧑‍💻 장래희망: 개발자&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나는 초등학생 때부터 단 한 번도 장래희망이 개발자가 아니었던 적이 없었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그 당시에는 개발자의 대우가 지금과 같지도 않았고 부모님 역시 반대했었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;물론 공부도 잘하지 못했고 원하던 특성화 사립고등학교 역시 떨어졌다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;일반 인문계 고등학교에서 대학입시 때 성적에 맞는 대학교에 모두 컴퓨터 공학과를 지원했고 지방의 한 국립대에 입학하게 되었다.&lt;/p&gt;
&lt;h3 id=&quot;-컴퓨터-공학과-대학생&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EC%BB%B4%ED%93%A8%ED%84%B0-%EA%B3%B5%ED%95%99%EA%B3%BC-%EB%8C%80%ED%95%99%EC%83%9D&quot; aria-label=&quot; 컴퓨터 공학과 대학생 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🎓 컴퓨터 공학과 대학생&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;꾸준히 코딩에 대한 관심을 가지고 관련 동아리를 가입하고 자기 계발을 하긴 했지만 사실 대학교 1, 2 학년 때는 술만 마시고 군대에 다녀오고 나서 정말 많은 것들이 바뀐 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 군대도 군대지만 전역 후 중간에 빈 시간을 그냥 놀고 싶지는 않았기 때문에 말년휴가를 나와 아르바이트처럼 일할 생각으로 몇 가지 회사들의 인터뷰를 다녔다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/154129096-aab5dbbc-e563-45a1-a678-98d9c2373cf5.jpg&quot; alt=&quot;baby&quot; class=&quot;max-w-full rounded-sm my-12 mx-auto&quot;&gt;
덕분에 군대를 전역 후 전역일에 아침에 전역신고를 마치고 점심에 빡빡머리로 첫 출근을 했던 회사에서 좋은 사람들을 만나고 여러 가지 경험을 하면서 꿈을 구체화시켰던 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이게 내 첫 직장 생활이었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;운이 좋게 그 회사의 비즈니스 초기에 합류하게 돼서 정말 많은 것들을 경험할 수 있었고 이런 경험을 통해 개발자라는 꿈에 한걸음 다가갈 수 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;대학교는 복학했고 코로나 덕분에 비대면 강의가 가능해저 대학교의 이론적인 공부보다 내가 개인적으로 관심 있던 부분들을 더 깊게 공부할 수 있었다. (정보처리기사와 같은 전공생이면 취득할 수 있는 자격증은 취득)&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;물론 CS지식이 중요한 게 아니란 것은 아니지만 나는 그것보단 직접 부딪히고 고민하는 게 더 즐거웠다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/154128653-52f1d8b8-db8e-4174-8e27-94fc7a8a23ac.png&quot; alt=&quot;image&quot; class=&quot;max-w-full rounded-sm my-12 mx-auto&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;덕분에 어느 순간 내 Github는 잔디가 잘 자라나고 있었다.&lt;/p&gt;
&lt;h2 id=&quot;취업기&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%B7%A8%EC%97%85%EA%B8%B0&quot; aria-label=&quot;취업기 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;취업기&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;졸업을 앞두게 되면서 함께 일하고 싶은 새로운 직장을 찾기로 했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;올해 초부터 약 한 달 반 정도 준비한 것 같다.&lt;/p&gt;
&lt;h3 id=&quot;-함께-일하고-싶은-회사의-조건&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%ED%95%A8%EA%BB%98-%EC%9D%BC%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80-%ED%9A%8C%EC%82%AC%EC%9D%98-%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot; 함께 일하고 싶은 회사의 조건 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;📋 함께 일하고 싶은 회사의 조건&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;개인적으로 몇 가지 나만의 일하고 싶은 회사의 조건들을 생각했는데 이는 다음과 같다.&lt;/p&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;배움의 기회가 있고 개인적인 개발자로서의 성장이 가능한 회사&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;업무에 동기가 부여되는 회사&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;개발자로서 A-Z까지 경험할 수 있는 시리즈 A 이상의 스타트업&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;새로운 기술 스택에 도입에 대한 고민이 활발한 회사&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;선진 개발 문화를 가지고 있는 회사&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;물론 이 조건을 벗어나더라도 관심 있는 기업 몇 곳 정도는 지원했다.&lt;/p&gt;
&lt;h3 id=&quot;️-이력서-작성&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EF%B8%8F-%EC%9D%B4%EB%A0%A5%EC%84%9C-%EC%9E%91%EC%84%B1&quot; aria-label=&quot;️ 이력서 작성 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;✍️ 이력서 작성&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 포트폴리오나 이력서는 따로 만들지 않고 원래 만들어 뒀던 개인 페이지에 내 프로젝트나 학력 업무 경험들을 추가하는 것으로 마무리했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그리고 해당 사이트의 주소를 Wanted나 자체 채용사이트를 통해 각 회사들에 돌렸다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;생각보다 여러 회사에서 채용 프로세스에 참여할 기회를 얻었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 아직 채용 프로세스가 종료되지 않은 회사들도 있지만 모두 종료 의사를 밝히는 메일을 작성 중이다.&lt;/p&gt;
&lt;h2 id=&quot;채용-프로세스&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%B1%84%EC%9A%A9-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot; aria-label=&quot;채용 프로세스 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;채용 프로세스&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나는 프로젝트를 보통 혼자 진행하면서 Frontend와 Backend를 직접 구현하는데 덕분에 지원 가능한 포지션 폭이 넓은 편이었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;처음에는 Backend가 끌렸지만 어느 순간부터 점점 Frontend 쪽으로 마음이 기울기 시작하면서 어느 순간부터는 Frontend 직군만 지원하게 되었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;또한 Frontend와 Backend 둘 다 실무 경력은 전혀 없었지만 경력 때문에 일해보고 싶은 회사에 지원서도 넣지 않는 건 바보 같은 짓이라고 생각했기 때문에 5년 이하 포지션에는 경력과 상관없이 지원했다.&lt;/p&gt;
&lt;h3 id=&quot;-기억에-남는-프로세스&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EA%B8%B0%EC%96%B5%EC%97%90-%EB%82%A8%EB%8A%94-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4&quot; aria-label=&quot; 기억에 남는 프로세스 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🔖 기억에 남는 프로세스&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;다음은 내가 서류 합격 후 경험해본 회사들의 채용 프로세스 중 기억에 남는 일부를 적은 것이다.&lt;/p&gt;
&lt;h4 id=&quot;당근마켓-frontend-engineer&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EB%8B%B9%EA%B7%BC%EB%A7%88%EC%BC%93-frontend-engineer&quot; aria-label=&quot;당근마켓 frontend engineer permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;당근마켓 (Frontend engineer)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;가장 먼저 이력서를 제출했고 처음 보게된 인터뷰였다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;개발자 두분과 인터뷰를 진행했고 편안한 분위기를 유도해 주셨지만 너무 자만했던것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;인터뷰 기회가 있었음에도 전혀준비를 하지않았고 여러가지 실무 관련 질문 공세에 뚜들어 맞다가 끝났다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;덕분에 다음 인터뷰 전에는 나름 내가 가진 지식들을 정비할 시간을 가지게 되었다.&lt;/p&gt;
&lt;h4 id=&quot;인프런-frontend-engineer--경력-3년-이상&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%94%84%EB%9F%B0-frontend-engineer--%EA%B2%BD%EB%A0%A5-3%EB%85%84-%EC%9D%B4%EC%83%81&quot; aria-label=&quot;인프런 frontend engineer  경력 3년 이상 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인프런 (Frontend engineer / 경력 3년 이상)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;과제형 코딩 테스트를 보았는데 오랜만에 프레임워크나 라이브러리 없이 요구사항에 맞춰 웹페이지를 만들었고 내 코드에 대한 피드백을 해주는 부분이 좋았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;피드백 내용을 보고 코드에 대한 고민이 활발한 개발자들이 있구나 생각했다.&lt;/p&gt;
&lt;h4 id=&quot;버킷플레이스--오늘의집-data-engineer&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EB%B2%84%ED%82%B7%ED%94%8C%EB%A0%88%EC%9D%B4%EC%8A%A4--%EC%98%A4%EB%8A%98%EC%9D%98%EC%A7%91-data-engineer&quot; aria-label=&quot;버킷플레이스  오늘의집 data engineer permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;버킷플레이스 / 오늘의집 (Data engineer)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 Data engineer은 그냥 내가 원래 데이터 다루는 일을 했고 자신 있었기 때문에 지원해봤다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;SQL 문제의 난이도는 매우 쉬운 수준이었고 알고리즘 역시 그렇게 어려운 내용들은 아니었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;대신 평소 안 쓰는 언어로 진행해봤다. (Go 언어)&lt;/p&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/154132643-6d50ee59-71e1-40bd-a72f-e9e80efef682.jpg&quot; width=&quot;300&quot;&gt;
(혹시 몰라서 금액은 가림)
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;특이했던 점은 서류 이후 과정에 참여하면 오늘의집 포인트를 줬다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나는 오늘의집을 사용하지 않으므로 어머니가 잘 쓰셨다.&lt;/p&gt;
&lt;h4 id=&quot;넥슨-backend-engineer&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EB%84%A5%EC%8A%A8-backend-engineer&quot; aria-label=&quot;넥슨 backend engineer permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;넥슨 (Backend engineer)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;학창 시절 넥슨의 게임을 즐겼기 때문에 원래 관심이 있던 기업이기도 했고 대기업에서도 과연 통과할 수 있을까라는 생각으로 뒤늦게 지원해봤는데 결과 통보까지 오래 걸리긴 했지만 합격 가능했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/154131513-65d0d704-9edb-4912-b165-b96beb77f376.png&quot; alt=&quot;baby&quot; class=&quot;max-w-full rounded-sm my-12 mx-auto&quot;&gt;;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;유선으로 안내를 받았고 자체 코딩 테스트 플랫폼을 사용하고 있는 걸 보고 역시 대기업이구나 생각했다.&lt;/p&gt;
&lt;h4 id=&quot;opgg-backend-engineer--경력-2년-이상&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#opgg-backend-engineer--%EA%B2%BD%EB%A0%A5-2%EB%85%84-%EC%9D%B4%EC%83%81&quot; aria-label=&quot;opgg backend engineer  경력 2년 이상 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OPGG (Backend engineer / 경력 2년 이상)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;가끔 친구들과 리그 오브 레전드라는 게임을 하는데 해당 게임의 전적 검색 사이트를 자주 이용하는 나로서는 채용공고를 보고 홀린 듯 지원했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;아무래도 실제로 사용하던 서비스이다 보니 개발에 참여해보고 싶다는 생각이었던 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;서류 합격 이후 과제 전형이 진행되었는데 최근에 3주 동안 회사 세 곳의 과제형 코딩 테스트와 동시에 인터뷰, 알고리즘 코딩 테스트들을 진행하다 보니 잠자는 시간 말고는 모두 컴퓨터 앞에 앉아 있던 터라 부득이하게 과제 기간 조정 요청을 했다. (결국 더 이상 과제 전형은 진행하지 않았다...)&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;OPGG는 과제 전형 완료에 따라 보상이 지급되고 과제 자체도 코딩이 아닌 아키텍처 설계였다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이런 식의 과제도 있다는 걸 처음 알았고 정말 괜찮은 기업이구나 생각했다.&lt;/p&gt;
&lt;h4 id=&quot;힐링페이퍼--강남언니-frontend-engineer--경력-3년-이상&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%ED%9E%90%EB%A7%81%ED%8E%98%EC%9D%B4%ED%8D%BC--%EA%B0%95%EB%82%A8%EC%96%B8%EB%8B%88-frontend-engineer--%EA%B2%BD%EB%A0%A5-3%EB%85%84-%EC%9D%B4%EC%83%81&quot; aria-label=&quot;힐링페이퍼  강남언니 frontend engineer  경력 3년 이상 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;힐링페이퍼 / 강남언니 (Frontend engineer / 경력 3년 이상)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/154845881-0bf569dc-4b7a-4a3e-bfa1-e2c036ec6b00.png&quot; alt=&quot;paper&quot; class=&quot;max-w-full rounded-sm my-12 mx-auto&quot;&gt;
Frontend 테크 리드의 인터뷰 영상을 보고 지원했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;저런 마인드를 가진 분이 테크 리드라면 좋은 개발 문화를 가지고 있을 거라 생각했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;처음 보는 플랫폼으로 코딩 테스트를 진행했고 알고리즘 난이도도 정말 쉬웠다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;알고리즘보다는 코드 퀄리티나 작성 과정을 볼 수 있는 플랫폼인 듯했고 프로세스 진행과정이 매끄럽진 않았지만 개발자분들께 피드백도 받을 수 있었고 유익한 경험이었다.&lt;/p&gt;
&lt;h4 id=&quot;워시스왓--세탁특공대-backend-engineer&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EC%9B%8C%EC%8B%9C%EC%8A%A4%EC%99%93--%EC%84%B8%ED%83%81%ED%8A%B9%EA%B3%B5%EB%8C%80-backend-engineer&quot; aria-label=&quot;워시스왓  세탁특공대 backend engineer permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;워시스왓 / 세탁특공대 (Backend engineer)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Front의 요청을 처리하는 단순한 Backend 서버를 만드는 과제형 코딩 테스트를 진행했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;express 베이스 코드가 토큰을 생성, 계정 생성 등 기본적인 기능들은 구현되어있었는데 MVC 패턴이 적용되어있는 듯했다.
DAO나 Service 코드를 얼마나 효율적이게 작성하는지 보고 싶었던 것 같다. (사실 이런 경우 나라면 그냥 NestJS를 사용한다.)&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;프로세스를 진행할 때마다 통장에 돈이 입금됐다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;채용 프로세스에 시간을 투자하는 입장에서는 매우 좋은 경험이었다.&lt;/p&gt;
&lt;h4 id=&quot;야놀자-backend-engineer--경력-3년-이상&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EC%95%BC%EB%86%80%EC%9E%90-backend-engineer--%EA%B2%BD%EB%A0%A5-3%EB%85%84-%EC%9D%B4%EC%83%81&quot; aria-label=&quot;야놀자 backend engineer  경력 3년 이상 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;야놀자 (Backend engineer / 경력 3년 이상)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/154846213-fdf8119b-c960-47dc-a397-f701ceedc063.png&quot; alt=&quot;yanolja&quot; class=&quot;max-w-full rounded-sm my-12 mx-auto&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;처음 보는 플랫폼에서 난이도도 어렵지 않은 코딩 테스트였지만 지문이 모두 영어였다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;물론 복사도 안되기 때문에 번역기도 돌릴 수 없었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;코딩 테스트 문제야 뭐 잘 풀었지만 이해하는데 오래 걸려서 영어공부 좀 열심히 해야겠다는 생각을 했다.&lt;/p&gt;
&lt;h4 id=&quot;socar-software-engineer&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#socar-software-engineer&quot; aria-label=&quot;socar software engineer permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Socar (Software engineer)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;내가 느끼기에 채용 프로세스를 진행했던 코딩 테스트 중에 가장 어려운 코딩 테스트가 아니었나 싶다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;코딩 테스트에서 떨어졌다...&lt;/p&gt;
&lt;h4 id=&quot;비바퍼블리카--toss-frontend-engineer--경력-2년-이하&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EB%B9%84%EB%B0%94%ED%8D%BC%EB%B8%94%EB%A6%AC%EC%B9%B4--toss-frontend-engineer--%EA%B2%BD%EB%A0%A5-2%EB%85%84-%EC%9D%B4%ED%95%98&quot; aria-label=&quot;비바퍼블리카  toss frontend engineer  경력 2년 이하 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;비바퍼블리카 / Toss (Frontend engineer / 경력 2년 이하)&lt;/h4&gt;
&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/154141305-905b49ae-e54e-4007-8c86-c75c0b6cd919.png&quot; width=&quot;500&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;인터뷰 전 보안서약서를 작성한다.(금융 관련 기업이다 보니 그런 듯)&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;코딩 테스트도 일반적인 플랫폼을 사용하는 방식이 아니라 정해진 시간에 Github 레포지토리에 초대되어 문제를 풀고 제출하는 방식이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;비록 채용 프로세스 참여가 늦어 이미 매력적인 기업의 오퍼 레터를 받은 이후라 과감하게 프로세스를 종료했지만 만약 조금 더 일찍 결과가 나왔다면 고민했을지도 모른다.&lt;/p&gt;
&lt;h4 id=&quot;굿닥-frontend-engineer--경력-3년-이상&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EA%B5%BF%EB%8B%A5-frontend-engineer--%EA%B2%BD%EB%A0%A5-3%EB%85%84-%EC%9D%B4%EC%83%81&quot; aria-label=&quot;굿닥 frontend engineer  경력 3년 이상 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;굿닥 (Frontend engineer / 경력 3년 이상)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;인터뷰 시간이 긴 편이고 테크 리드 분과의 대화도 좋았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;채용 프로세스가 부드럽게 진행되지는 않았지만 테크 리드분의 마인드나 관심도가 확실하게 느껴졌다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나도 Frontend 태크 스택뿐만 아니라 그 외에 것들에 대해서도 관심도가 높은 편인데 그런 부분을 테크 리드분께도 느낄 수 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;CS 질문들을 많이 받았고 이후 채용 프로세스도 진행해 보고 싶었지만 Toss와 같은 이유로 채용 프로세스를 종료했다.&lt;/p&gt;
&lt;h4 id=&quot;오버노드-frontend-engineer&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EC%98%A4%EB%B2%84%EB%85%B8%EB%93%9C-frontend-engineer&quot; aria-label=&quot;오버노드 frontend engineer permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;오버노드 (Frontend engineer)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;판교에 위치한 작은 규모의 스타트업이지만 개발자분들과 여러 가지 대화를 나눴고 확실히 능력 있고 관심도가 있는 분들이란 걸 느낄 수 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;온라인으로 인터뷰를 보고 회사 주변 카페에서 직무에 대한 대화를 나눴다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;개발자분들의 마인드나 업무 방식을 알 수 있었고 유급으로 2일간 출근해서 실제 실무 코드를 보고 서로를 평가하는 기간이 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;대기업에서는 할 수 없는 참신하고 좋은 채용 방법이라고 생각한다.&lt;/p&gt;
&lt;h4 id=&quot;슈가힐--네모-frontend-engineer--경력-1년-이상&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EC%8A%88%EA%B0%80%ED%9E%90--%EB%84%A4%EB%AA%A8-frontend-engineer--%EA%B2%BD%EB%A0%A5-1%EB%85%84-%EC%9D%B4%EC%83%81&quot; aria-label=&quot;슈가힐  네모 frontend engineer  경력 1년 이상 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;슈가힐 / 네모 (Frontend engineer / 경력 1년 이상)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;개발자 두 분과 인터뷰를 진행했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;내 프로젝트에 대한 발표가 있었기 때문에 PPT를 준비했고 관련 프로젝트 내용들에 대해 서로 편안한 분위기로 대화를 나눴다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;게더 타운에서의 인터뷰는 신선했고 실제로 재택근무를 직방의 자회사인 만큼 직방 자체 메타버스 플랫폼 메타폴리스에서 진행한다고 한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 이 글을 쓰고 있는 날짜를 기준으로 오늘 점심에 최종 인터뷰 일정이 잡혀있었지만 Toss나 굿닥과 같은 이유로 채용 프로세스를 종료했다.&lt;/p&gt;
&lt;h4 id=&quot;코드스테이츠-frontend-engineer--경력-2년-이상&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EB%93%9C%EC%8A%A4%ED%85%8C%EC%9D%B4%EC%B8%A0-frontend-engineer--%EA%B2%BD%EB%A0%A5-2%EB%85%84-%EC%9D%B4%EC%83%81&quot; aria-label=&quot;코드스테이츠 frontend engineer  경력 2년 이상 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코드스테이츠 (Frontend engineer / 경력 2년 이상)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;3시간의 온라인 인터뷰와 라이브 코딩 테스트를 진행했고 함께 일할 사람을 신중하게 선택함을 느낄 수 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;짧지 않은 인터뷰 시간이었기 때문에 정말 많은 대화들을 나눌 수 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;서류 통과 이후 굉장히 빠른 속도로 진행되었고 진행했던 모든 채용프로세스중에 지원자 경험이 가장 좋았다. (채용 프로세스 개선을 위해 많은 고민을 한듯)&lt;/p&gt;
&lt;h2 id=&quot;전체적인-채용-과정에-대한-생각&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EC%B2%B4%EC%A0%81%EC%9D%B8-%EC%B1%84%EC%9A%A9-%EA%B3%BC%EC%A0%95%EC%97%90-%EB%8C%80%ED%95%9C-%EC%83%9D%EA%B0%81&quot; aria-label=&quot;전체적인 채용 과정에 대한 생각 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전체적인 채용 과정에 대한 생각&lt;/h2&gt;
&lt;h3 id=&quot;서류&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EC%84%9C%EB%A5%98&quot; aria-label=&quot;서류 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;서류&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;어떤 서류가 좋은 거고 나쁜 건지 나는 아직 잘 모르겠다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;어느 정도 이력서에 경쟁력이 생기면 사실 서류 합격은 걱정하지 않아도 될 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;특히 요즘 개발자 서류는 자유 형식 이력서를 받는 경우가 많기 때문에 나는 이력서이자 포트폴리오 사이트를 하나 만들어 모든 기업에 지원했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그냥 자신을 잘 나타낼 수 있으면 충분하다고 생각한다.&lt;/p&gt;
&lt;h3 id=&quot;코딩-테스트&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EC%BD%94%EB%94%A9-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot;코딩 테스트 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;코딩 테스트&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;아무래도 개발자의 실력을 보지 않고 함께 일할수는 없기 때문에 이해는 가지만 사실 나는 일반 알고리즘 코딩 테스트가 썩 반갑지는 않다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;한 번도 코딩 테스트를 공부해본 적이 없다 보니(그 흔한 백준 계정도 없음..) 코딩 테스트도 실제 채용 과정에서 부딪히면서 공부했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;과제형 코딩 테스트 처럼 많은 시간을 들일 필요없이 2시간~6시간 정도로 평가를 마칠수 있고 심지어 대부분은 자동으로 채점도 된다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;기업과 지원자에게는 가장 편리한 실력 검증 수단임에는 틀림없다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;하지만 나는 그래도 만약 지원한 회사의 수가 적었다면 나름 재미도 있고 많은 것을 배울 수 있는 과제형 코딩 테스트가 좋다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;어쨌든 정말 여러 가지 유형의 코딩 테스트가 있었고 이런 과정을 경험하면서 오히려 성장할 수 있는 시간이었던 것 같다.&lt;/p&gt;
&lt;h3 id=&quot;인터뷰&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%ED%84%B0%EB%B7%B0&quot; aria-label=&quot;인터뷰 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인터뷰&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;보통 실무진 위주의 테크 인터뷰와 임원진이 진행하는 컬쳐핏 인터뷰로 나뉘었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;테크 인터뷰에서 생각보다 CS 지식을 요구하는 회사들이 많다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;특히 대학교 1학년 때 배웠던 알고리즘 기초 관련 질문들을 많이 받았던 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;심지어 인터뷰 도중에 코드를 보여주고 복잡도를 계산해보라고 한 적도 있다. (다행히 기사 공부했던 게 기억남..)&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;아무래도 각 회사마다 개발자에게 요구하는 역량이 다르다 보니 인터뷰 질문들도 제각각이었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나에 경우엔 주 언어로 Javascript / Typescript를 사용하니 Javascript의 동작원리부터 정말 많은 파생 질문들을 받았다.&lt;/p&gt;
&lt;h4 id=&quot;javascript-관련-몇-가지-기억에-남는-질문&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#javascript-%EA%B4%80%EB%A0%A8-%EB%AA%87-%EA%B0%80%EC%A7%80-%EA%B8%B0%EC%96%B5%EC%97%90-%EB%82%A8%EB%8A%94-%EC%A7%88%EB%AC%B8&quot; aria-label=&quot;javascript 관련 몇 가지 기억에 남는 질문 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Javascript 관련 몇 가지 기억에 남는 질문&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;Javascript Call Stack에 대해 설명해보세요.&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;Java의 상속과 Javscript의 상속은 어떻게 다를까요?&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;Javascript prototype에 대해 설명해보세요.&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;컬쳐핏 인터뷰에서는 지원자의 성향이나 지원한 회사에 대한 관심도를 알아보는 질문들이 많이 던져졌다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;코로나가 아니었다면 오프라인 인터뷰가 지금보다 훨씬 많았을 텐데 스케줄 관리가 불가능했을 것 같다.&lt;/p&gt;
&lt;h3 id=&quot;레퍼런스-체크--평판-조회&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EB%A0%88%ED%8D%BC%EB%9F%B0%EC%8A%A4-%EC%B2%B4%ED%81%AC--%ED%8F%89%ED%8C%90-%EC%A1%B0%ED%9A%8C&quot; aria-label=&quot;레퍼런스 체크  평판 조회 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;레퍼런스 체크 / 평판 조회&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;내가 제공한 정보로 이전 직장분들에게 직접 연락을 해서 알아보는 경우도 있었고 특정 플랫폼을 이용하는 경우도 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이미 퇴사한 시점에서 전 직장 동료에게 연락을 한다는 것은 매우 부담스러운 일이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;하지만 함께 일해본 동료들이 나를 평가하는 것만큼 기업 입장에서 지원자를 검증하기 좋은 수단은 없다고 생각하기 때문에 어쩔 수 없다고 생각한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;특정 플랫폼을 이용해 평판 작성을 한 경우에는 이 내용들이 공유되어 한 번의 작성으로 여러 회사의 레퍼런스 체크를 진행할 수 있는데 모든 기업들이 해당 플랫폼을 이용하면 참 편리할 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나는 실제로 여러 번 연락을 드렸기 때문에 매우 미안했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;취업 후 오랜만에 술 한잔 하기로 했는데 정말 감사하다고 전하고 싶다.&lt;/p&gt;
&lt;h2 id=&quot;마지막으로&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%A7%80%EB%A7%89%EC%9C%BC%EB%A1%9C&quot; aria-label=&quot;마지막으로 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마지막으로&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;일단 대기업을 지원할 생각이 없었으니 공채는 당연히 생각하지 않았고 아무래도 이런 식으로 취업을 해본 적이 없어서 미흡했던 취업과정이었던 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 경력 없는 Frontend / Backend engineer는 서류합격도 힘들다고 해서 한 번에 많은 회사들에 서류를 돌렸는데 운 좋게도 많은 기업들에 합격해서 채용 프로세스를 경험했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;오퍼를 받은 회사들은 모두 3월 2일 첫 출근 가능일자로 잡아두고 가장 마음에 두는 회사에 입사할 생각이었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;덕분에 스케줄 관리가 너무 힘들었다.. 거의 몇 주 동안 일어나면 아침에는 코딩 테스트, 오후에는 인터뷰, 저녁에는 과제형 코딩 테스트를 진행했다. (밤새는 게 일상)&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;만약 다음이 있다면 좀 더 계획적으로 진행할 필요가 있어 보인다.. (두 번 하면 사람 잡을 듯)&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 이 글을 작성하고 있는 지금은 이미 위에 회사들 중에 한 곳에 입사 절차를 밟고 있고 다음 주에 첫 출근 날짜를 잡았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;해당 기업에 입사를 결정한 이유나 과정들에 대해서는 다른 글에 좀 더 자세하게 정리할 예정이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Gatsby 블로그 이전]]></title><description><![CDATA[사실 블로그가 사용가능할 정도로 완성된건 시간이 좀 지났지만 최근에 다른 토이 프로젝트들을 수정해야 하는 일들이 많아 이제야 글을 작성한다. Gatsby 블로그로 이전하면서 일단 프론트 개발 환경이 리액트와 거의 같았고 GraphQL…]]></description><link>https://hyeokjaelee.github.io/blog-remake-review2/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/blog-remake-review2/</guid><pubDate>Wed, 01 Dec 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 블로그가 사용가능할 정도로 완성된건 시간이 좀 지났지만 최근에 다른 토이 프로젝트들을 수정해야 하는 일들이 많아 이제야 글을 작성한다.&lt;/p&gt;
&lt;h2 id=&quot;gatsby-블로그로-이전하면서&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#gatsby-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%A1%9C-%EC%9D%B4%EC%A0%84%ED%95%98%EB%A9%B4%EC%84%9C&quot; aria-label=&quot;gatsby 블로그로 이전하면서 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gatsby 블로그로 이전하면서&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;일단 프론트 개발 환경이 리액트와 거의 같았고 GraphQL로 데이터를 전달하는 부분도 이미 경험해봤기 때문에 편하게 시작했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그리고 여러가지 Gatsby 라이브러리들 덕분에 Next.js에서는 하나하나 구현해야 했던 기능들을 편하게 좋은 퀄리티로 받아 쓸 수 있는점이 좋았다.&lt;/p&gt;
&lt;h3 id=&quot;-특히-편리했던-것들&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%ED%8A%B9%ED%9E%88-%ED%8E%B8%EB%A6%AC%ED%96%88%EB%8D%98-%EA%B2%83%EB%93%A4&quot; aria-label=&quot; 특히 편리했던 것들 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;👨🏻‍💻 특히 편리했던 것들&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://utteranc.es/&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;utterances&lt;/a&gt;를 이용한 댓글 기능&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;댓글 기능 같은 경우에 이전에는 따로 서버를 유지하면서 댓글을 저장했지만 utterances를 이용하면 독특하고 간편하게 구현가능했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;페이지에 utterances 댓글 위젯을 달게되면 해당 위젯에서 작성한 내용들은 실제 Github 레포지토리 이슈 섹션에 저장되고 이를 다시 불러와 화면에 표시하는 방법으로 구현 되어있는데 따로 서버를 유지할 필요도 없고 정말 편리했다.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;Gatsby 자체 정적 웹 생성기&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Gatsby는 자체적으로 리액트로 작성한 코드들을 정적웹으로 빌드해준다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;덕분에 Github page를 통해 배포할때 몇가지 설정만 해주면 바로 사용할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;Markdown HTML 변환을 통한 간편한 포스팅&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;a href=&quot;https://www.gatsbyjs.com/plugins/gatsby-transformer-remark/&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;gatsby-transformer-remark&lt;/a&gt;를 이용하면 markdown으로 작성한 내용을 HTML로 뿌려준다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;덕분에 기존 블로그 보다 편한 포스팅이 가능했다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;블로그-디자인&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%94%94%EC%9E%90%EC%9D%B8&quot; aria-label=&quot;블로그 디자인 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;블로그 디자인&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 직접 만들어서 사용하고 있는 블로그 디자인보다 예쁘고 잘 만들어진 Gatsby 템플릿들이 무척 많았았지만 처음에 사용하던 템플릿에 내가 원하는 것들을 이것 저것 추가하다보니 사용하던 템플릿과 여러가지 충돌도 있고 불필요한 코드들도 많았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&quot;이왕 만드는거 내가 직접 디자인하고 내 생각을 좀더 자유롭게 표현할 수 있는 공간을 만들자&quot;는 생각으로 템플릿 없이 기초부터 다시 만들게 되었다.&lt;/p&gt;
&lt;h3 id=&quot;-블로그-디자인에-고려한-부분&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%94%94%EC%9E%90%EC%9D%B8%EC%97%90-%EA%B3%A0%EB%A0%A4%ED%95%9C-%EB%B6%80%EB%B6%84&quot; aria-label=&quot; 블로그 디자인에 고려한 부분 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🎨 블로그 디자인에 고려한 부분&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;SPA 느낌 강조&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;SPA 느낌을 강조한다는게 어떤 말인가 의아해할수도 있지만 내가 생각한 강조하고 싶은 느낌은 페이지 이동시 느껴지는 이질감을 최소화 하고 웹보다는 안드로이드&amp;#x26;iOS 네이티브 앱같은 경험을 주고 싶었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;실제로 이부분을 표현하기 위해 많은 고민과 노력을 했던것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;유니크하지만 심플한 디자인&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 Gatsby를 통해 만든 블로그 뿐만 아니라 웹에서 볼 수 있는 여러가지 블로그들의 디자인이 거의 비슷해서 독특한 디자인을 가진 나만의 블로그를 가지고 싶었다.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;Portfolio로 사용할 수 있는 페이지&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;블로그에 추가적으로 포트폴리오를 작성할 수 있는 공간을 만들고 싶은데 다른 페이지들과 이질감 없이 어울렸으면 좋겠다고 생각했고 포트폴리오 디자인을 염두에 두고 사이트 전체 디자인을 잡았다.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;동적인 디자인&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;일반적인 블로그들 처럼 간결한 느낌도 좋지만 방문자가 어떤 버튼이나 이벤트를 발생시켯을때 피드백 애니메이션이 있으면 좋을것 같다고 생각했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;근데 이게 과하지 않으면서 블로그 전체 디자인과 어울리도록 적용하는 게 생각보다 힘들었다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;이전-블로그-포스트-이동&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EC%A0%84-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8-%EC%9D%B4%EB%8F%99&quot; aria-label=&quot;이전 블로그 포스트 이동 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이전 블로그 포스트 이동&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 이전 블로그의 포스트들을 이곳에 옮기지 않았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 그렇게 열심히 쓴 글도 아니었고 다시 보니까 도저히 못봐줄 정도라 아쉽지만 모두 정리하고 깨끗한 상태로 재시작 하기로 했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;처음 블로그를 2011년에 네이버 블로그로 시작했는데 그곳 글들도 여전히 그곳에 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그때 당시에는 안드로이드라는 신문물을 사용해보면서 OS적으로 불편했던 부분들과 당시 안드로이드 리눅스 커널에서 잠겨있던 부분들을 하나씩 풀어가면서 기능 추가하고 최적화(?) 비슷한걸 하면서 커스텀롬을 배포했고 다양한 사람들에게 응원과 피드백을 받고 이런걸 즐겼다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;학생때 쓴 글들이 창피해서 다 날려버리고 싶었지만 아까워서 남겨뒀다.&lt;/p&gt;
&lt;h2 id=&quot;검색엔진-등록&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EA%B2%80%EC%83%89%EC%97%94%EC%A7%84-%EB%93%B1%EB%A1%9D&quot; aria-label=&quot;검색엔진 등록 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;검색엔진 등록&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;검색엔진에 등록하기전에 robots.txt나 사이트맵등을 만들어야 했고 처음에는 그냥 다 직접 작성했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;하지만 이런것도 자동 생성해주는 라이브러리들이 있었고 다시한번 편의성에 감탄했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;하지만 Google Search Console 때문에 뻘짓을 많이했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사이트맵을 등록하는 과정에서 사이트맵 자체는 정상적으로 접근이 되는데 구글서치콘솔은 계속 읽을 수 없다는 경고창을 띄었고 그것 때문에 내 웹 자체 문제인줄 알고 삽질을 엄청했는데 나중에 알고 보니 구글서치콘솔 자체 문제였다.
(영어 표기로는 즉시 등록안되고 얼마 정도 걸린다 이런식으로 표시되는 경고였는데 한글에서는 그냥 읽을 수 없다고만 하니 환장할 노릇이었음)&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;실제로 사이트맵 주소를 입력한 지 몇 주 후에 사이트맵이 정상적으로 등록되었다.&lt;/p&gt;
&lt;h2 id=&quot;마지막으로&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%A7%80%EB%A7%89%EC%9C%BC%EB%A1%9C&quot; aria-label=&quot;마지막으로 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마지막으로&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 블로그를 완성했다고 했지만 지금 이 글을 쓰고 있는 시점에도 글 형식이나 디자인등이 맘에 들지 않아 수정을 여러번 했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;앞으로 리펙토링도 해야하고 갈길이 멀지만 나름 뿌듯하다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이 블로그의 소스코드는 &lt;a href=&quot;https://github.com/HyeokjaeLee/hyeokjaelee.github.io&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Github Repository&lt;/a&gt;에 올려두었으니 필요에 따라 사용해도 된다. (리펙토링이 아직 안끝난 지금 시점에 document도 없는걸 누가 사용할까 싶지만..)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Covid-19 API 업데이트]]></title><description><![CDATA[이전에 진행했던 프로젝트들이 요즘 한번에 삐걱거리기 시작했다. 얼마전에는 Webtoon API를 전체적으로 수정해야 했는데 이번에는 Covid-19 API가 문제다. 정부에서 단계적 일상회복을 시행함에 따라 공공데이터 포털의 Covid-19 API…]]></description><link>https://hyeokjaelee.github.io/covid-19-api-update/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/covid-19-api-update/</guid><pubDate>Tue, 30 Nov 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이전에 진행했던 프로젝트들이 요즘 한번에 삐걱거리기 시작했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;얼마전에는 Webtoon API를 전체적으로 수정해야 했는데 이번에는 Covid-19 API가 문제다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;정부에서 단계적 일상회복을 시행함에 따라 공공데이터 포털의 Covid-19 API의 일부 항목이 제외된것이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;오늘은 이것에 대해 글을 써보려 한다.&lt;/p&gt;
&lt;h2 id=&quot;covid-19-api&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#covid-19-api&quot; aria-label=&quot;covid 19 api permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Covid-19 API&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;지금 만들어서 쓰고있는 API는 Covid-19의 여러 외부 정보들을 종합해서 새로운 데이터를 추가하고 이상치를 제거해 GraphQL로 제공하고있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이 데이터를 이용해 Dashboard를 제공하는 토이 프로젝트도 하나 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이번에 API를 수정하면 당연히 Dashboard도 변경사항이 생길것이고 나는 이것을 최소화 하고싶었다.&lt;/p&gt;
&lt;h3 id=&quot;-변경점과-대응&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EB%B3%80%EA%B2%BD%EC%A0%90%EA%B3%BC-%EB%8C%80%EC%9D%91&quot; aria-label=&quot; 변경점과 대응 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🚧 변경점과 대응&lt;/h3&gt;
&lt;h4 id=&quot;보건복지부-코로나19-시도발생-현황의-격리중-환자-수isol_ing_cnt-항목-제외&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EB%B3%B4%EA%B1%B4%EB%B3%B5%EC%A7%80%EB%B6%80-%EC%BD%94%EB%A1%9C%EB%82%9819-%EC%8B%9C%EB%8F%84%EB%B0%9C%EC%83%9D-%ED%98%84%ED%99%A9%EC%9D%98-%EA%B2%A9%EB%A6%AC%EC%A4%91-%ED%99%98%EC%9E%90-%EC%88%98isol_ing_cnt-%ED%95%AD%EB%AA%A9-%EC%A0%9C%EC%99%B8&quot; aria-label=&quot;보건복지부 코로나19 시도발생 현황의 격리중 환자 수isol_ing_cnt 항목 제외 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;a href=&quot;https://www.data.go.kr/iim/api/selectAPIAcountView.do&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;보건복지부 코로나19 시·도발생 현황&lt;/a&gt;의 격리중 환자 수(ISOL_ING_CNT) 항목 제외&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;다행이 이 항목으로 계산하는 다른 값들이 없어 처음에는 해당 항목은 그냥 제거하려고 했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;하지만 다른 항목들의 값들을 보면서 이 값은 다른 항목의 값들로 계산할 수 있을것 같았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;전체 확진자 수(DEF_CNT)에서 사망자 수(DEATH_CNT)와 격리 해제 수(ISOL_CLEAR_CNT)를 제외하면 격리중 환자수와 같을거라는 예상을 했고 여러 날짜의 값들을 계산해서 비교해보니 실제로 같았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그래서 이항목은 유지할 수 있었다.&lt;/p&gt;
&lt;h4 id=&quot;단계적-일상회복&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EA%B3%84%EC%A0%81-%EC%9D%BC%EC%83%81%ED%9A%8C%EB%B3%B5&quot; aria-label=&quot;단계적 일상회복 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단계적 일상회복&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;정부에서 단계적 일상 회복을 시행하면서 당연히 거리두기 단계가 무의미 해졌고 실제로 정부에서 운영하던 사회적 거리두기 단계를 제공하는 사이트도 사라졌다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;문제는 내가 만든 API에서 사용하는 거리두기 단계는 이 사이트를 매일 크롤링해온 값으로 제공되는데 사이트가 없어졌고 거리두기 단계 자체도 무의미 해졌으니 이 항목은 제외할 수밖에 없었다.&lt;/p&gt;
&lt;h3 id=&quot;-기존-데이터-저장&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EA%B8%B0%EC%A1%B4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A0%80%EC%9E%A5&quot; aria-label=&quot; 기존 데이터 저장 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;📦 기존 데이터 저장&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;혹시 몰라 이전 데이터들은 모두 JSON 형식으로 저장해두었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이전 데이터를 사용하는 프로젝트가 있다면 Github에 저장된 JSON값을 받아와 보이는 뷰 정도만 유지해줄 생각이었다.&lt;/p&gt;
&lt;h2 id=&quot;dashboard-수정&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#dashboard-%EC%88%98%EC%A0%95&quot; aria-label=&quot;dashboard 수정 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dashboard 수정&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;앞서 언급했던 것처럼 API를 수정한 뒤 실제로 제외된 항목은 사회적 거리두기 단계밖에 없으니 관련된 그래프들을 모두 제거해주었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;정부에서 정한 거리두기 단계 기준과 실제 감염 상황으로 거리두기 단계 변화를 예상하는 그래프는 지우기 아까웠지만 제공되는 데이터가 모두 사라진 마당에 남겨둘 수 없었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Dashboard는 내가 순수 HTML, CSS, Javascript를 너무 안 쓰다 보니 잊어버릴 것 같아서 React나 Vue.js 같은 프레임워크(라이브러리) 없이 만들었었는데 코드를 너무 더럽게 작성해놔서 수정하는데 애먹었다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Webtoon API 업데이트]]></title><description><![CDATA[2020년 말쯤 웹툰 통합 정보 사이트를 만들어 보자는 생각으로 Webtoon Hub라는 토이 프로젝트를 진행하면서 필요했던 웹툰 정보들을 뿌려주는 서버를 만들었다. 프로젝트를 완성하고 해당 API…]]></description><link>https://hyeokjaelee.github.io/korea-webtoon-api-update/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/korea-webtoon-api-update/</guid><pubDate>Wed, 17 Nov 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;2020년 말쯤 웹툰 통합 정보 사이트를 만들어 보자는 생각으로 Webtoon Hub라는 토이 프로젝트를 진행하면서 필요했던 웹툰 정보들을 뿌려주는 서버를 만들었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;프로젝트를 완성하고 해당 API를 버려두긴 아까워 문서도 만들고 공개 호스팅으로 돌리면서 대학교 동기나 후배들에게 제공하고 있었는데 이번에 업데이트할 내용이 있어서 이렇게 글로 남겨본다.&lt;/p&gt;
&lt;h3 id=&quot;-daum-웹툰의-개편&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-daum-%EC%9B%B9%ED%88%B0%EC%9D%98-%EA%B0%9C%ED%8E%B8&quot; aria-label=&quot; daum 웹툰의 개편 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💥 Daum 웹툰의 개편&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;2021년 8월 기존 Daum 웹툰이 Kakao 웹툰으로 개편되었는데 단순 명칭 변경이 아닌 실제 페이지에 많은 변화가 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이 때문에 기존에 만들어 두었던 API 사용이 불가능한 상황이라 해당 프로젝트를 업데이트해야 했다.&lt;/p&gt;
&lt;h3 id=&quot;-korea-webtoon-api의-업데이트&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-korea-webtoon-api%EC%9D%98-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8&quot; aria-label=&quot; korea webtoon api의 업데이트 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;👉 Korea Webtoon API의 업데이트&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;기존 API는 정해진 시간마다 크롤링한 데이터를 가공해 Express로 JSON 형태의 데이터 뿌려주는 방식이었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;각 플랫폼별로 크롤링 모듈을 따로 설계해 두어서 사실 해당 모듈만 수정하면 되는 작업이었지만 그동안 벼르고 있었던 NestJS를 써보자는 생각으로 오히려 Naver 웹툰 크롤러 모듈을 제외한 모든 코드를 다시 작성하게 되었다.&lt;/p&gt;
&lt;h4 id=&quot;업데이트한-부분은-다음과-같다&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8%ED%95%9C-%EB%B6%80%EB%B6%84%EC%9D%80-%EB%8B%A4%EC%9D%8C%EA%B3%BC-%EA%B0%99%EB%8B%A4&quot; aria-label=&quot;업데이트한 부분은 다음과 같다 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;업데이트한 부분은 다음과 같다.&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;Express 기반에서 NestJS로 전환&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;Daum 웹툰 크롤러를 Kakao 웹툰에 맞게 변경&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;데이터 구조 재정의&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;Kakao 페이지 추가&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;검색 API 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;웹툰-정보-수집&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%9B%B9%ED%88%B0-%EC%A0%95%EB%B3%B4-%EC%88%98%EC%A7%91&quot; aria-label=&quot;웹툰 정보 수집 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹툰 정보 수집&lt;/h2&gt;
&lt;h3 id=&quot;naver-웹툰&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#naver-%EC%9B%B9%ED%88%B0&quot; aria-label=&quot;naver 웹툰 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Naver 웹툰&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 이전에 크롤링 코드를 모듈화 해놓고 그 부분은 건들지 않아도 정상 작동해서 이번 업데이트에서는 결과 데이터 형식을 제외하고는 크게 수정한 부분이 없었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;네이버 웹툰은 한 페이지에 있는 웹툰들은 모두 한 번에 표시되는 방식이었고 딱히 크롤링을 방지하기 위한 장치도 없었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;덕분에 정석적인 방법으로 크롤링 가능했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;다만 파싱 속도와 이미지 퀄리티 때문에 PC 페이지가 아닌 모바일 페이지를 대상으로 크롤링했다.&lt;/p&gt;
&lt;h3 id=&quot;kakao-웹툰&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#kakao-%EC%9B%B9%ED%88%B0&quot; aria-label=&quot;kakao 웹툰 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Kakao 웹툰&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Kakao 웹툰은 특이하게 Kakao 웹툰과 Kakao 페이지로 나뉘어 서비스되고 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;처음에는 Naver 웹툰의 크롤러처럼 사이트 자체를 크롤링해서 정보를 얻으려고 시도했지만 Kakao 웹툰은 초기에 모든 정보들을 가져와 웹에 뿌려주는 방식이 아닌 필요할 때 서버에 요청해 그때그때 필요한 데이터들을 가져와 뿌려주는 방식이라 성능이 좋지 못했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그 밖에도 여러 가지 문제점이 많았고 정말 많은 것을 시도했던 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이 부분에 대해서는 아래 &quot;🔥 발생했던 이슈&quot;에 후술 하겠다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 Kakao 웹툰으로 개편되기 이전 Daum 웹툰에서는 사이트에서 발생하는 요청들을 개발자 도구로 분석해보면 요청을 보내는 URL을 찾을 수 있었고 별다른 인증 없이 외부 클라이언트에서도 같은 데이터를 요청할 수 있었는데 당연히 이 부분이 막혔을 것이라 생각했지만 Kakao 웹툰에서도 요청 URL만 바뀌었을 뿐 여전히 가능했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이런 방법이 가능하다면 HTML 코드를 파싱 하는 단계를 건너뛰고 요청과 응답 자체도 웹 페이지 자체를 크롤링하는 보다 훨씬 빨랐으므로 Kakao 웹툰과 페이지 둘 다 위 방법으로 데이터를 수집했다.&lt;/p&gt;
&lt;h3 id=&quot;-발생했던-이슈&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EB%B0%9C%EC%83%9D%ED%96%88%EB%8D%98-%EC%9D%B4%EC%8A%88&quot; aria-label=&quot; 발생했던 이슈 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🔥 발생했던 이슈&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;처음에 Kakao 웹툰의 웹 페이지 자체를 크롤링하면서 생겼던 문제들과 해결했던 방법들이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;일반적인 사용자 접근이 아니면 페이지 자체 접근 차단&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;puppeteer가 핸들링하는 chromium에 사용자 정보를 추가&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;짧은 시간내에 여러번 요청을 보내면 사이트에서 해당 IP를 일시적으로 차단&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;새로운 페이지를 여는 딜레이를 크게 잡음(크롤링 속도 느려짐)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;Kakao 웹툰 페이지의 각 element들의 속성이 불규칙하고 구조가 복잡함&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;불규칙한 부분이나 구조가 복잡한 부분은 puppeteer로 직접 핸들링해서 크롤링하고 규칙적인 속성들만 우선적으로 크롤링 (크롤링 속도 느려짐)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;해외 IP 차단(Heroku = 미국 서버)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;프록시를 사용하여 데이터 수집 (속도 느려짐, 프록시 상태에 의존)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;결국 전혀 다른 방법을 사용하게 되었지만 해당 부분을 해결하기 위한 코드는 따로 분리해 &lt;a href=&quot;https://github.com/HyeokjaeLee/kakao-webtoon-crawler&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;kakao-webtoon-crawler repository&lt;/a&gt;에 저장해두었다.&lt;/p&gt;
&lt;h2 id=&quot;마지막으로&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%A7%80%EB%A7%89%EC%9C%BC%EB%A1%9C&quot; aria-label=&quot;마지막으로 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마지막으로&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이번에 Express 코드를 NestJS로 바꾸면서 확실히 구조가 잘 정리된다는 느낌을 받았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그리고 Express를 사용할 때보다 기본적으로 제공하고 있는 기능들이 많아서 초기 설정에 많은 시간을 들이지 않아도 된다는 점도 매우 편리했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;앞으로도 NestJS를 사용한 프로젝트들을 많이 진행해볼 생각이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;해당 API의 코드는 &lt;a href=&quot;https://github.com/HyeokjaeLee/korea-webtoon-api&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;korea-webtoon-api repository&lt;/a&gt;에 공개되어있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[NestJS 웹서버 구축하기]]></title><description><![CDATA[내용1
내용2
내용3 NestJS를 사용하는 이유 NestJS는 Express와 함께 Node.js의 유명한 웹 애플리케이션 프레임워크이다. Express와 용도는 같지만 사용해보면 둘은 다른 점이 많다. 📏 코드의 통일성 Express…]]></description><link>https://hyeokjaelee.github.io/nest-js/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/nest-js/</guid><pubDate>Fri, 29 Oct 2021 00:00:00 GMT</pubDate><content:encoded>&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;내용1
내용2
내용3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;nestjs를-사용하는-이유&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-4xl&quot;&gt;&lt;a href=&quot;#nestjs%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;nestjs를 사용하는 이유 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;NestJS를 사용하는 이유&lt;/h1&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;NestJS는 Express와 함께 Node.js의 유명한 웹 애플리케이션 프레임워크이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Express와 용도는 같지만 사용해보면 둘은 다른 점이 많다.&lt;/p&gt;
&lt;h2 id=&quot;-코드의-통일성&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#-%EC%BD%94%EB%93%9C%EC%9D%98-%ED%86%B5%EC%9D%BC%EC%84%B1&quot; aria-label=&quot; 코드의 통일성 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;📏 코드의 통일성&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Express에 비해 NestJS는 개발 구조에 대한 자유도 낮다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;자유도가 높을수록 좋은 것이 아닌가 하고 생각할 수 있지만 자유도가 높다는 말은 통일성이 부족하다는 말도 된다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;프로그램의 규모가 커지고 여러 명의 사람들과 협업을 하다 보면 이런 자유도가 오히려 독이 되는 경우가 많다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나 역시 프로젝트를 위해 다른 사람들의 Express 코드들을 찾아볼 때 개발자들마다 다른 코드 구조 때문에 특정 역할을 하는 코드를 찾는데 애먹는 경우가 많다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;NestJS는 자유도를 낮추는 대신 이런 문제점들을 개선했다고 볼 수 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;정의된 각 클래스마다 역할이 있고 제한된 NestJS의 구조안에서 개발을 진행하게 된다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이런 제한된 구조가 코드의 통일성을 높여준다.&lt;/p&gt;
&lt;h2 id=&quot;️-module-class&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EF%B8%8F-module-class&quot; aria-label=&quot;️ module class permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;⚙️ Module class&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;NestJS는 관련 있는 기능들 등을 한 module class에 담아 캡슐화한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;각 module들은 서로 import 가능하며 이는 코드 간 의존성을 낮춰준다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;즉 확장성, 유지보수성, 테스트 가능성 등이 향상된다.&lt;/p&gt;
&lt;h2 id=&quot;️-typescript&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EF%B8%8F-typescript&quot; aria-label=&quot;️ typescript permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🏷️ Typescript&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;NestJS는 기본적으로 Typescript를 지원하며 Typescript 사용을 권장한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Express에서 Typescript를 사용하려면 직접 여러 가지 설정을 해주어야 하는 번거로움이 있지만 NestJS는 아무런 설정 없이 바로 사용이 가능하다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나는 평소 Express 코드를 작성할 때도 Typescript를 사용하는데 이는 컴파일 단계에서 오류를 잡아주어 애플리케이션의 예상치 못한 문제들을 미리 방지해준다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;NestJS는 이러한 Typescript의 장점을 기본적으로 가지고 있다고 볼 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;-간편한-테스트&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#-%EA%B0%84%ED%8E%B8%ED%95%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8&quot; aria-label=&quot; 간편한 테스트 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🧪 간편한 테스트&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;NestJS의 구조를 보면 spec.ts 파일들을 볼 수 있는데 이는 테스트를 위한 파일이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;기본적으로 NestJS가 간편한 Unit test를 지원한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나도 테스트의 중요성은 알고는 있지만 실제로 NestJS의 그것을 잘 사용하지 않기 때문에 더 이상 뭐라 말할 수는 없을 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;br/&gt;그 외에도 여러 가지 NestJS의 장점들이 있지만 자세한 내용은 &lt;a href=&quot;https://nestjs.com/&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;NestJS 공식 문서&lt;/a&gt;를 확인해보시는걸 추천한다.&lt;/p&gt;
&lt;h1 id=&quot;새-프로젝트-생성&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-4xl&quot;&gt;&lt;a href=&quot;#%EC%83%88-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;새 프로젝트 생성 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;새 프로젝트 생성&lt;/h1&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;NestJS 프로젝트 생성 방법은 여러 가지가 있지만 이 글에서는 CLI를 통한 방법을 기준으로 설명하겠다.&lt;/p&gt;
&lt;h2 id=&quot;전역으로-nestjs-cli-설치&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%A0%84%EC%97%AD%EC%9C%BC%EB%A1%9C-nestjs-cli-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;전역으로 nestjs cli 설치 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;전역으로 NestJS CLI 설치&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i &lt;span class=&quot;token parameter variable&quot;&gt;-g&lt;/span&gt; @nestjs/cli&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;cli를-통해-새-프로젝트-생성&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#cli%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%83%88-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;cli를 통해 새 프로젝트 생성 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CLI를 통해 새 프로젝트 생성&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ nest new &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;프로젝트명&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;기본-구조&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%B3%B8-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;기본 구조 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기본 구조&lt;/h2&gt;
&lt;div class=&quot;img-txt-wrap&quot;&gt;
  &lt;div class=&quot;img-wrap&quot;&gt;
    &lt;img width=&quot;400&quot; src=&quot;https://user-images.githubusercontent.com/71566740/139356716-cf4718d2-30e0-428f-a47b-efc9f37ebf3f.png&quot;&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;생성된 프로젝트의 src 구조는 위와 같다.&lt;/p&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;app.controller.spc.ts:&lt;/strong&gt; 유닛 테스트를 위한 파일&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;app.controller.ts:&lt;/strong&gt; 기본 Controller&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;app.module.ts:&lt;/strong&gt; root 모듈을 정의&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;app.service.ts:&lt;/strong&gt; 관련있는 기능들을 클래스에 분리해서 작성하고 사용 시 controller에 import해서 사용&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;main.ts:&lt;/strong&gt; NestFactory instance를 생성하는 엔트리 파일&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;생성된-프로젝트-실행&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EC%83%9D%EC%84%B1%EB%90%9C-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%A4%ED%96%89&quot; aria-label=&quot;생성된 프로젝트 실행 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;생성된 프로젝트 실행&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;위 명령으로 실행이 가능하며 &lt;code class=&quot;language-text&quot;&gt;http://localhost:3000/&lt;/code&gt;로 이동해 &quot;Hello World!&quot;가 표시됨을 알 수 있다.&lt;/p&gt;
&lt;h1 id=&quot;예제-코드-작성&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-4xl&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%A0%9C-%EC%BD%94%EB%93%9C-%EC%9E%91%EC%84%B1&quot; aria-label=&quot;예제 코드 작성 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예제 코드 작성&lt;/h1&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;위 Hello World!를 return 하는 코드는 &lt;code class=&quot;language-text&quot;&gt;app.service.ts&lt;/code&gt;에 있으며 이를 &lt;code class=&quot;language-text&quot;&gt;app.controller.ts&lt;/code&gt;에서 import하고 &lt;code class=&quot;language-text&quot;&gt;app.module.ts&lt;/code&gt;에 이런 내용들이 정의되어 있는 것을 확인할 수 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;글만으로는 이해하기가 어렵다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;직접 코드를 작성하고 실행해보면서 알아보자&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;br/&gt;아래 내용들은 내가 NestJS를 쓰면서 자주 사용하는 일부 내용들에 대한 코드이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;보면 알겠지만 NestJS는 Typescript의 데코레이터를 적극적으로 사용하고 있다.&lt;/p&gt;
&lt;h2 id=&quot;appservicets&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#appservicets&quot; aria-label=&quot;appservicets permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;app.service.ts&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;GetTest()를 추가해주고 constructor에 실행 순서를 알 수 있는 콘솔 출력을 추가해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Injectable &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@nestjs/common&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppService&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;서비스 생성&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;Hello World!&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getTest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;이것은 테스트입니다.&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;appcontrollerts&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#appcontrollerts&quot; aria-label=&quot;appcontrollerts permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;app.controller.ts&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;테스트를 위한 컨트롤러를 추가해준다.
test 컨트롤러의 root path에는 위에서 만들었던 getTest()를 사용해 줄 거다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Controller&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Get&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Query &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@nestjs/common&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AppService &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./app.service&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Controller&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; appService&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AppService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;appService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Controller&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//테스트를 위한 컨트롤러&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestController&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;readonly&lt;/span&gt; appService&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; AppService&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getHello&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;appService&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getTest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//app.service.ts에 추가했던 GetTest()&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;query-test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getTest&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Query&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;query&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; query&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;입력받은 쿼리는 &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;query&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;입니다.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;middleware-test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getTestMiddleware&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;middleware-test 컨트롤러&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;middleware-test 컨트롤러&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Get&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;middleware-test2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;getTestMiddleware2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;middleware-test2 컨트롤러&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;middleware-test2 컨트롤러&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;기본적으로 @Controller(&quot;test&quot;)는 localhost:3000/test에 라우팅되며 @Get()의 파라미터에 따라 endpoint를 지정할 수 있다.&lt;/p&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;@Get( )&lt;/strong&gt;: localhost:{port}/test&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;@Get(&quot;query-test&quot;)&lt;/strong&gt;: localhost:3000/test/query-test&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;@Get(&quot;middleware-test&quot;)&lt;/strong&gt;: localhost:3000/test/middleware-test&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;@Get(&quot;middleware-test2&quot;)&lt;/strong&gt;: localhost:3000/test/middleware-test2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;testmiddlewarets&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#testmiddlewarets&quot; aria-label=&quot;testmiddlewarets permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TestMiddleware.ts&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Middleware도 한번 만들어 보자&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;src/middleware 경로에 &lt;code class=&quot;language-text&quot;&gt;TestMiddleware.ts&lt;/code&gt;을 만들어준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; Injectable&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; NestMiddleware &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@nestjs/common&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestMiddleware&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NestMiddleware&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;테스트 미들웨어 1 실행&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;테스트 미들웨어 쿼리 name=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;query&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Middleware 이후 코드 실행X&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Injectable&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;TestMiddleware2&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NestMiddleware&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token function-variable function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;테스트 미들웨어 2 실행&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//Middleware 이후 코드를 실행&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;첫번째 &lt;code class=&quot;language-text&quot;&gt;TestMiddleware&lt;/code&gt;는 쿼리를 받고 직접 해당 주소에 뿌려주는 코드이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Express와 같이 &lt;code class=&quot;language-text&quot;&gt;res.json&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;res.send&lt;/code&gt;를 사용한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;두번째 &lt;code class=&quot;language-text&quot;&gt;TestMiddleware2&lt;/code&gt; 단순 실행 후 실행되었다는 콘솔만 출력해주는 코드이다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;appmodulets&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#appmodulets&quot; aria-label=&quot;appmodulets permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;app.module.ts&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이제 위에서 만들었던 컨트롤러와 미들웨어를 추가해줘야 한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;controllers&lt;/code&gt;에 위에서 만들어 &lt;code class=&quot;language-text&quot;&gt;TestController&lt;/code&gt;를 추가해준다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;AppModule&lt;/code&gt;에는 다음과 같은 코드를 추가해준다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  MiddlewareConsumer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  Module&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  NestModule&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  RequestMethod&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;@nestjs/common&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AppController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TestController &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./app.controller&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; AppService &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./app.service&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; TestMiddleware&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TestMiddleware2 &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;./middleware/TestMiddleware&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token decorator&quot;&gt;&lt;span class=&quot;token at operator&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Module&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  imports&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  controllers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AppController&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; TestController&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//TestController추가&lt;/span&gt;
  providers&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;AppService&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AppModule&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;NestModule&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token function&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;consumer&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; MiddlewareConsumer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;consumer&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TestMiddleware&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forRoutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;test/middleware-test/*&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; RequestMethod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//테스트 미들웨어1 추가&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;TestMiddleware2&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forRoutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test/middleware-test2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//테스트 미들웨어2 추가&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;apply()에는 사용할 미들웨어를 지정해준다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;forRoutes에서 Routing path를 지정해줄수 있다.&lt;/p&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;routing path는 wildcards를 이용해 작성할 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;예를 들어 별표(*)는 와일드카드로 사용되며 모든 문자조합과 일치한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;forRoutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; path&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;ab*cd&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; method&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; RequestMethod&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;ab*cd&lt;/code&gt; 라우트 경로는 abcd, ab_cd, abecd 등과 일치한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;?,+,*및()문자는 라우트 경로에 사용될 수 있으며 해당 정규표현식 대응 부분의 하위집합이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;하이픈(-)과 점(.)은 문자열 기반 경로로 문자 그대로 해석된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;forRoutes()에는 여러개의 path를 콤마(,)를 이용해 지정할 수 있다.&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;typescript&quot;&gt;&lt;pre class=&quot;language-typescript&quot;&gt;&lt;code class=&quot;language-typescript&quot;&gt;&lt;span class=&quot;token function&quot;&gt;forRoutes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&apos;test/middleware-test&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&apos;test/middleware-test2&apos;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;실행&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89&quot; aria-label=&quot;실행 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이제 위에서 작성했던 코드들을 실행해보자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; run start&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;다음은-위의-코드의-몇가지-예시이다&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%9D%8C%EC%9D%80-%EC%9C%84%EC%9D%98-%EC%BD%94%EB%93%9C%EC%9D%98-%EB%AA%87%EA%B0%80%EC%A7%80-%EC%98%88%EC%8B%9C%EC%9D%B4%EB%8B%A4&quot; aria-label=&quot;다음은 위의 코드의 몇가지 예시이다 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다음은 위의 코드의 몇가지 예시이다.&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;app.service.ts&lt;/code&gt;의 &lt;code class=&quot;language-text&quot;&gt;AppService&lt;/code&gt; 클래스 생성에서 작성했던 콘솔이 1회 출력됨을 알 수 있다.&lt;/p&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://localhost:3000/test&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;http://localhost:3000/test&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;app.service.ts&lt;/code&gt;에서 작성했던 &quot;이것은 테스트입니다.&quot;가 페이지에 출력됨을 알 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://localhost:3000/test/middleware-test&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;http://localhost:3000/test/middleware-test&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;app.controller.ts&lt;/code&gt;에서 작성했던 &lt;code class=&quot;language-text&quot;&gt;middleware-test 컨트롤러&lt;/code&gt;가 페이지와 콘솔에 출력됨을 확인할 수 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;우리는 &lt;code class=&quot;language-text&quot;&gt;app.module.ts&lt;/code&gt;에서 path를 &lt;code class=&quot;language-text&quot;&gt;test/middleware-test/*&lt;/code&gt;로 지정해줬으므로 미들웨어가 실행되지 않음을 알 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;&lt;a href=&quot;http://localhost:3000/test/middleware-test/test?name=nagle&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;http://localhost:3000/test/middleware-test/test?name=nagle&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;미들웨어가 실행되고 name이라는 쿼리를 받아 미들웨어에서 직접 페이지에 표시하는 것을 확인할 수 있다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그 외에도 위 코드를 통해 각 클래스들의 실행 순서나 기능을 알 수 있으므로 직접 여러 가지를 시도해보는 것을 추천한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[KNU LMS Scheduler 프로젝트]]></title><description><![CDATA[Covid-19 시국 때문에 사용하는 우리 대학교의 비대면 강의 시스템에 불편함을 느껴 만들었던 프로그램이 있다. 최근에 이 프로그램을 업데이트하면서 배포하게 되었는데 이 과정에서 겪은 경험들을 공유해 보려 한다. KNU LMS Scheduler…]]></description><link>https://hyeokjaelee.github.io/knu-lms-scheduler/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/knu-lms-scheduler/</guid><pubDate>Thu, 14 Oct 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Covid-19 시국 때문에 사용하는 우리 대학교의 비대면 강의 시스템에 불편함을 느껴 만들었던 프로그램이 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;최근에 이 프로그램을 업데이트하면서 배포하게 되었는데 이 과정에서 겪은 경험들을 공유해 보려 한다.&lt;/p&gt;
&lt;h2 id=&quot;knu-lms-scheduler&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#knu-lms-scheduler&quot; aria-label=&quot;knu lms scheduler permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;KNU LMS Scheduler&lt;/h2&gt;
&lt;h3 id=&quot;-프로젝트-시작-이유&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%8B%9C%EC%9E%91-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot; 프로젝트 시작 이유 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🎉 프로젝트 시작 이유&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나는 대학교에 다니고는 있지만, 학교에서 배우는 내용보다 혼자 작업하면서 경험해 보는 걸 선호하는 편이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;복학 후 COVID-19 때문에 모든 강의를 온라인으로 진행하고 있는데 이런 상황과 나의 성향 때문에 학교 과제나 강의가 뒷전인 경우가 많았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;기존 학교의 온라인 강의 시스템은 인터페이스가 보기 너무 힘들었고 특히 과목별로 분리되어 모든 강의들을 돌아다니면서 완료하지 못한 강의들을 찾아다녀야 했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;또한 내가 신청한 강의 외에 학교에서 강제로 내 수강 목록에 넣어둔 불필요한 강의들이 화면에 표시되는데 이 두 가지의 환장의 콜라보로 내가 못 듣고 결석 처리되어버리는 과목들이 생겼다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;최소한 과제는 몰라도 수업은 모두 출석하자는 생각으로 이번 프로젝트를 시작하게 되었다.&lt;/p&gt;
&lt;h3 id=&quot;-개발방향&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EA%B0%9C%EB%B0%9C%EB%B0%A9%ED%96%A5&quot; aria-label=&quot; 개발방향 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;👉 개발방향&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;대충 구상한 개발방향은 학교에서는 제공하는 API가 없기 때문에 크롤링을 통해 얻은 학교 데이터를 새로운 인터페이스로 재구성하자는 생각이었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;처음에는 나 혼자 사용할 생각이었기 때문에 인터페이스의 디자인적인 부분에 대해서는 생각하지 않았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;무엇보다 최소한의 조작으로 원하는 정보들을 한눈에 확인할 수 있게 하는 게 목표였다.&lt;/p&gt;
&lt;h3 id=&quot;-배포를-결심하게된-이유&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EB%B0%B0%ED%8F%AC%EB%A5%BC-%EA%B2%B0%EC%8B%AC%ED%95%98%EA%B2%8C%EB%90%9C-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot; 배포를 결심하게된 이유 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;💭 배포를 결심하게된 이유&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;처음에는 혼자 쓰려고 만들었지만 완성 후에 나름 괜찮은 것 같아서 일단 주변 동기들에게 공유해줬다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그렇게 한 학기 동안 잘 사용한 뒤, 하고 있던 토이 프로젝트를 마치고 이번엔 어떤 프로젝트를 해볼까 고민하던 중 이 프로그램을 쓰면서 동기들이 해주었던 피드백들과 내가 불편하다고 느낀 점 들이 생각났다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그 부분 들을 업데이트하고 나니 이 프로그램을 그냥 혼자 쓰고 버리긴 아까워서 배포하게 되었다.&lt;/p&gt;
&lt;h2 id=&quot;개발-과정&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;개발 과정 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발 과정&lt;/h2&gt;
&lt;h3 id=&quot;-도구선정&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EB%8F%84%EA%B5%AC%EC%84%A0%EC%A0%95&quot; aria-label=&quot; 도구선정 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🔨 도구선정&lt;/h3&gt;
&lt;h4 id=&quot;javascript&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#javascript&quot; aria-label=&quot;javascript permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Javascript&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;크롤링을 통해 정보를 받아야 한다고 생각했을 때 가장 먼저 생각난 게 Python과 Javascript였다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그중에 Javascript에는 이미 몇 번 사용해본 Electron이라는 프레임워크도 있었고 크롤링과 동시에 해당 데이터를 Front에 넘길 수 있어 서버가 필요 없는 좋은 방법인 것 같았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;처음에는 이 프로젝트는 혼자 사용하고 유지 보수할 생각이 없었기 때문에 Typescript를 고려하지 않았는데 배포하고 피드백 받은 내용들을 수정하는 순간 후회했다.&lt;/p&gt;
&lt;h4 id=&quot;electron&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#electron&quot; aria-label=&quot;electron permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Electron&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;속도는 느리지만 해당 프로그램이 그렇게 성능이 좋을 필요는 없으니 상관없음&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;자체적으로 브라우저를 포함&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;배포의 편리함&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;다른 프레임워크, 라이브러리와 호환성이 좋음&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;Javascript를 이용해 Windows 프로그램을 작성할 때 다른 대안이 생각나지 않음&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;puppeteer&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#puppeteer&quot; aria-label=&quot;puppeteer permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Puppeteer&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;크롤링을 할 때 기본적으로 사용하는 cheerio와 같은 파싱 라이브러리만으로 학교 페이지에 개인정보들을 입력하거나 정보들을 가져올 수 없었기 때문에 브라우저 자체를 핸들링할 필요가 있었고 이런 경우 puppeteer를 사용했다. (일반적인 크롤링 방법에 비해 속도가 느리기 때문에 사용을 최소한으로 하려 고민 많이함)&lt;/p&gt;
&lt;h3 id=&quot;-크롤링&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%ED%81%AC%EB%A1%A4%EB%A7%81&quot; aria-label=&quot; 크롤링 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🔍 크롤링&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;처음엔 일반적인 사이트처럼 puppeteer를 이용해서 로그인만 넘기면 간단하게 해결될 줄 알았는데 필요한 데이터들이 모두 iframe안에 들어가 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;일반적인 경우라면 해당 iframe에 진입하는 단계를 추가해주기만 하면 평범하게 크롤링할 수 있었겠지만 특이하게 iframe내부 HTML 코드에는 그 어떤 내용물도 없었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그렇게 돌아다니는 동안 온라인 강의 시스템중 메뉴중 유일하게 성적 처리 관련 탭들만 정보가 온전히 HTML 태그 안에 들어가 있었고 심지어 사용자에게 표시되지 않는 링크들도 존재했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;거기서 대부분의 정보를 구하고 그걸 기반으로 URL의 규칙성 등을 이용해 추가적인 정보들을 크롤링했다.&lt;/p&gt;
&lt;h3 id=&quot;-로그인-처리&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B2%98%EB%A6%AC&quot; aria-label=&quot; 로그인 처리 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🔑 로그인 처리&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Electron은 Chromium을 포함하고 있으니 혼자 사용하려 했을 때는 그냥 학교의 로그인 페이지 자체를 띄어주고 로그인이 완료되면 크롤링을 시작하게 했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이번에 업데이트하면서 로그인 페이지를 직접 만들고 입력받은 정보를 따로 로컬에 저장 후 학교 로그인 페이지에 입력해 주는 방법을 사용했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;일단 로그인 정보 저장 기능을 원하는 사람들이 많았고 이 프로그램은 사용할 때마다 학교 사이트들을 돌아다니면서 정보들을 다시 크롤링해야 해서 최대한 크롤링 대상을
줄이기 위해 사용자가 원하는 과목만을 지정 및 저장해 사용하려면 사용자 정보를 로컬에 저장해 두고 비교해야 할 필요가 있었다.&lt;/p&gt;
&lt;h3 id=&quot;-back-end&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-back-end&quot; aria-label=&quot; back end permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🎒 back-end(?)&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이걸 back-end라고 부르기 민망한 수준이지만 일단 front-end는 더더욱 아니기에 이렇게 분류 했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Electron back-end에서 작성한 내용들은 로그인 정보와 크롤링한 데이터의 CRUD, 데이터들을 클렌징해서 front로 전달, 브라우저 핸들링, 프로그램 종료 같은 부분들의 코드를 작성했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그리고 처음에 램 누수를 생각하지 않고 엉망진창으로 코드를 짜다가 Electron으로 작성해서 돌려본 프로그램들이 하나같이 램 누수가 있어서 이런 부분들도 신경 써서 수정했다.&lt;/p&gt;
&lt;h3 id=&quot;-front-end&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-front-end&quot; aria-label=&quot; front end permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🪟 front-end&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;일단 위에서 서술했듯이 리액트를 사용했는데 처음에는 나만 쓸 생각이었기 때문에 부트스트랩을 이용해서 대충 찍어냈다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;하지만 배포를 목적으로 수정했을 때는 부트스트랩을 이용한 부분들은 모두 빼버리고 이전에 COVID19 Dashboard 토이 프로젝트를 진행할 때 만들었던 인터페이스를 대부분 따왔다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;항상 느끼는 거지만 나는 미적 감각이 없어서 한번 인터페이스를 만들어두면 다른 프로젝트 할 때 어울리는 인터페이스면 그대로 가져다가 쓰는편이다. (아니면 디자인 생각하는데 시간을 너무 많이 씀)&lt;/p&gt;
&lt;h3 id=&quot;-피드백&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%ED%94%BC%EB%93%9C%EB%B0%B1&quot; aria-label=&quot; 피드백 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🚸 피드백&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;어느 정도 실사용이 가능해지면서 일종의 클로즈 베타 느낌으로 또 한번 동기들에게 피드백을 요청했고 동기들이 준 피드백을 기반으로 소소한 버그들을 수정했다.&lt;/p&gt;
&lt;h3 id=&quot;-배포&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EB%B0%B0%ED%8F%AC&quot; aria-label=&quot; 배포 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;📦 배포&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이 부분은 Electron을 사용한 가장 큰 이유기도 한데 편리하게 실행파일로 빌드해서 배포할 수 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;동기가 에브리타임이라는 대학교 커뮤니티를 알려줬는데 학생증이 있어야 계정을 생성할 수 있어서 그냥 친구 아이디를 빌려서 게시물을 작성했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;배포는 &lt;a href=&quot;https://github.com/HyeokjaeLee/knu-lms-scheduler&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;해당 프로젝트 Repository&lt;/a&gt;에 릴리즈 탭을 통해 진행했다.&lt;/p&gt;
&lt;h2 id=&quot;마지막으로&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%A7%80%EB%A7%89%EC%9C%BC%EB%A1%9C&quot; aria-label=&quot;마지막으로 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마지막으로&lt;/h2&gt;
&lt;h3 id=&quot;-배포하면서-걱정했던-점&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EB%B0%B0%ED%8F%AC%ED%95%98%EB%A9%B4%EC%84%9C-%EA%B1%B1%EC%A0%95%ED%96%88%EB%8D%98-%EC%A0%90&quot; aria-label=&quot; 배포하면서 걱정했던 점 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🤔 배포하면서 걱정했던 점&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;아무래도 Github 릴리즈가 일반적인 대학생들에게는 친숙하지 않아서 걱정했지만 다행히 다들 잘 사용하는 것 같았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;물론 Github의 이슈 섹션에 피드백을 받는건 불가능 했지만.. 그래도 나름 댓글로 여러가지 피드백이 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그리고 테스트를 해본 사람들이 모두 내 동기들이다 보니 수강하는 과목들이 비슷한데 다른 과목에서 발생할지 모를 상황들을 예외처리 못하진 않았을까 걱정했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이 부분에 대해서는 아직 피드백이 없으니 확신할 순 없지만 성공적이었다고 생각한다.&lt;/p&gt;
&lt;h3 id=&quot;-반응&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EB%B0%98%EC%9D%91&quot; aria-label=&quot; 반응 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;👂 반응&lt;/h3&gt;
&lt;div class=&quot;img-txt-wrap&quot;&gt;
    &lt;div class=&quot;img-wrap&quot;&gt;
        &lt;img width=&quot;400&quot; src=&quot;https://user-images.githubusercontent.com/71566740/137476272-c7fd50c7-fd63-46ae-9efa-f86a1f443054.png&quot;&gt;
        &lt;img width=&quot;400&quot; src=&quot;https://user-images.githubusercontent.com/71566740/137476954-bf40e990-565c-4201-826b-5de982a2b5b5.png&quot;&gt;
        &lt;img width=&quot;400&quot; src=&quot;https://user-images.githubusercontent.com/71566740/137477586-15b1310e-2e01-47c5-87cb-0cb70c4f8a4a.png&quot;&gt;
        &lt;img width=&quot;400&quot; src=&quot;https://user-images.githubusercontent.com/71566740/137477108-c005b793-9662-4dd2-8ff4-c0322471f5e6.png&quot;&gt;
    &lt;/div&gt;
    &lt;div class=&quot;img-wrap&quot;&gt;
        &lt;img width=&quot;400&quot; src=&quot;https://user-images.githubusercontent.com/71566740/137478218-900da4b5-f6a0-43ce-93ab-4b54306fe35a.png&quot;&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;올린지 몇분만에 HOT 게시물과 실시간 인기 검색 게시물이 되었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;에브리타임에는 많은 반응을 얻은 글을 연도와 학기별로 구분해 Best 게시물로 선정해 놓는 기능이 있던데 나중에는 거기에 선정되어 있었고 특별한 경험이었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;분명히 익명으로 올렸는데 깃허브 링크에 이름이 포함되어있어서 의도치 않게 익명성이 전혀 없어졌지만 게시물 댓글들도 재미있는 댓글들이 많았다.&lt;/p&gt;
&lt;h3 id=&quot;️-느낀점&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EF%B8%8F-%EB%8A%90%EB%82%80%EC%A0%90&quot; aria-label=&quot;️ 느낀점 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;❤️ 느낀점&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;학교 온라인 강의 시스템에서 내가 불편하다고 느끼는 부분들을 다른 사람들도 똑같이 공감하고 있다는 것도 신기했고 프로젝트도 그냥 혼자 만들고 끝나는게 아니라 완성후 배포도 해보고 사용자들의 반응도 보고 하는게 더 재미있는 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;해당 프로젝트도 일회성으로 끝나는게 아니라 사용자들이 준 피드백을 기반으로 시간 날 때마다 업데이트를 하는 것도 좋을 것 같다. (물론 졸업 전까지만 ^^)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Gititle 프로젝트]]></title><description><![CDATA[해당 프로젝트의 결과물은 Gititle에서 확인가능 Gititle 프로젝트 👉 프로젝트 목적 나는 작성한 코드를 커밋할 때 AngularJS commit conventions…]]></description><link>https://hyeokjaelee.github.io/gititle-project/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/gititle-project/</guid><pubDate>Tue, 14 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;해당 프로젝트의 결과물은 &lt;a href=&quot;https://hyeokjaelee.github.io/gititle/&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Gititle&lt;/a&gt;에서 확인가능&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;gititle-프로젝트&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#gititle-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8&quot; aria-label=&quot;gititle 프로젝트 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gititle 프로젝트&lt;/h2&gt;
&lt;h3 id=&quot;-프로젝트-목적&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EB%AA%A9%EC%A0%81&quot; aria-label=&quot; 프로젝트 목적 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;👉 프로젝트 목적&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나는 작성한 코드를 커밋할 때 AngularJS commit conventions에 추가로 내가 정한 몇 가지 규칙을 더해 규칙성있게 작성하려고 노력한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;AngularJS commit conventions의 Type만으로 설명이 부족한 부분을 Emoji를 추가해 보완하는데 이렇게 매번 Emoji와 알맞은 Type을 매칭 하는 과정이 번거롭다고 느꼇다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이런 양식은 분명 이전 커밋 내용을 참고해야 할 때는 편리하지만 작성하는데 시간이 조금 더 들 수밖에 없는데 이런 부분들을 좀 더 편하게 작성할 수 있고 양식을 정확히 지킬 수 있는 가이드 앱이 있었으면 좋겠다고 생각해서 만들게 되었다.&lt;/p&gt;
&lt;h3 id=&quot;-고려사항&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD&quot; aria-label=&quot; 고려사항 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;✅ 고려사항&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;접근성 향상을 위한 PWA 지원&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;오프라인 환경에서도 작동 가능&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;서비스 후 클라이언트 측에 의도치 않는 버그를 방지하고 작업 중인 코드가 영향을 미치지 않기 위해 별도의 dev branch에서 작업 후 테스트를 마치고 실제 서비스 branch에 병합하는 방식으로 진행&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;대부분의 Git을 사용하는 환경이 PC 환경이므로 모바일 환경에 대한 UI는 고려하지 않고 최소 화면 크기 정도만 고려&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;도구-선정&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EA%B5%AC-%EC%84%A0%EC%A0%95&quot; aria-label=&quot;도구 선정 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도구 선정&lt;/h2&gt;
&lt;h3 id=&quot;vuejs&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#vuejs&quot; aria-label=&quot;vuejs permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Vue.js&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;새로운 front-end 프레임워크를 사용해 보고 싶었음&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;node.js 없이 cdn만으로 작업이 가능해서 별도 컴파일 없이 gh-pages로 배포 가능&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;쉬운 문법과 작업 속도가 이번 토이프로젝트에 적합하다 판단&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;Vue.js의 개발자 도구가 엄청 편하다는데 써보고 싶었음&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;github-pages&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#github-pages&quot; aria-label=&quot;github pages permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Github pages&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;쉬운 호스팅&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;완전 무료&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;프로젝트를-진행하면서-느낀-vuejs&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-%EC%A7%84%ED%96%89%ED%95%98%EB%A9%B4%EC%84%9C-%EB%8A%90%EB%82%80-vuejs&quot; aria-label=&quot;프로젝트를 진행하면서 느낀 vuejs permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트를 진행하면서 느낀 Vue.js&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;보통 React를 사용해 왔는데 Vue를 쓰면서 HTML 코드 활용이 신선하다고 생각했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;React 코드를 작성하다 보면 HTML보다는 JS에 힘이 실어진 느낌이고 같은 결과물을 만들어 낼 때도 여러 방법 중 내 생각에 적합한 방법을 채택해서 사용하는 식이었는데 Vue는 JS의 비중이 크긴 하지만 React의 그것보다 작다는 느낌이었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;예를 들면 같은 태그를 반복해서 사용하는 경우 React는 Js에서 map, forEach, for문 등등 여러 가지 방법으로 태그를 핸들링할 수 있다면 Vue는 HTML 태그에서 v-for을 이용해 반복한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/133247169-745841aa-f06c-47dd-be7e-9ad19e31767c.jpg&quot; alt=&quot;ReactView&quot; class=&quot;max-w-full rounded-sm my-12 mx-auto&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;확실히 전체 코드 구성을 보면 React의 JSX보다 훨씬 기본 HTML에 친화적인 문법으로 코드를 작성할 수 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그리고 Node.js 없이 cdn만으로 결과물을 만들어 낼 수 있다는 것도 매우 편리했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;물론 Vue도 Node.js를 이용해 프로젝트를 만들 수 있고 Node.js가 불편한 것은 아니지만 작은 프로젝트를 하면서 node.js 개발환경 설정등을 건너뛰고 작업할 수 있어서 좋았다.&lt;/p&gt;
&lt;h2 id=&quot;프로젝트-진행&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A7%84%ED%96%89&quot; aria-label=&quot;프로젝트 진행 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로젝트 진행&lt;/h2&gt;
&lt;h3 id=&quot;-자료-조사&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EC%9E%90%EB%A3%8C-%EC%A1%B0%EC%82%AC&quot; aria-label=&quot; 자료 조사 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🔍 자료 조사&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;일단 내가 작성하던 커밋 메시지 규칙을 손볼 필요가 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;아무래도 개인이다 보니 혼자 관련 규칙들을 모두 정의하고 진행하는건 어려워서 관련 정보들을 찾아 참고했다.&lt;/p&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;a href=&quot;https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;AngularJS commit conventions&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;a href=&quot;https://github.com/angular/angular/blob/master/CONTRIBUTING.md#type&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Angular Github&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;a href=&quot;https://gitmoji.dev/&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Gitmoji&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;a href=&quot;https://blog.ull.im/engineering/2019/03/10/logs-on-git.html&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;좋은 git commit 메시지를 위한 영어 사전&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나의 Git 커밋 메시지 규칙은 &lt;a href=&quot;/good-commit-message&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;해당 포스트&lt;/a&gt;에 작성해두었다.&lt;/p&gt;
&lt;h3 id=&quot;-발생했던-이슈&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EB%B0%9C%EC%83%9D%ED%96%88%EB%8D%98-%EC%9D%B4%EC%8A%88&quot; aria-label=&quot; 발생했던 이슈 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🔥 발생했던 이슈&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;우선 일반적인 평소 사용하던 PWA Builder를 이용해 간편하게 PWA로 만들 생각이었는데 로컬 환경에서는 정상적으로 작동하지만 Github page에서 해당 블로그를 운영하고 있고 프로젝트 URL이 해당 블로그 하위 URL로 포함되어있다 보니 정상적으로 작동하지 않음
(생각해보면 프로젝트 할때마다 Github page 배포가 문제임)&lt;/p&gt;
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;해당 문제는 다른 개발자들의 gh-pages의 PWA 프로젝트 찾아보며 해결&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;새로운 deploy가 있어도 이전에 오프라인 사용을 위해 저장했던 캐시가 지워지지 않아 수동으로 사용자가 캐시를 지우고 사용해야 했던 문제가 있었음&lt;/p&gt;
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;버전 태그를 만들고 버전이 바뀌면 캐시를 날리고 새로 저장하는 방식으로 해결&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;마지막으로&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%A7%80%EB%A7%89%EC%9C%BC%EB%A1%9C&quot; aria-label=&quot;마지막으로 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마지막으로&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;프로젝트를 완성하고 지금도 커밋할때 띄어두고 잘 사용중이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;소스코드는 &lt;a href=&quot;https://github.com/HyeokjaeLee/gititle&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Github Repository&lt;/a&gt;에서 확인할 수 있다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Live Sass Compiler 사용하기]]></title><description><![CDATA[나는 프론트엔드 작업을 할때 CSS보다 Sass(SCSS)를 선호한다. 그중에서도 CSS와 호환성을 갖춘 SCSS를 선호하며 어느 정도 스타일링할 코드가 많아지면 CSS를 사용하다가도 SCSS로 코드를 옮겨서 작업한다. Sass…]]></description><link>https://hyeokjaelee.github.io/sass-compiler/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/sass-compiler/</guid><pubDate>Wed, 01 Sep 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나는 프론트엔드 작업을 할때 CSS보다 Sass(SCSS)를 선호한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그중에서도 CSS와 호환성을 갖춘 SCSS를 선호하며 어느 정도 스타일링할 코드가 많아지면 CSS를 사용하다가도 SCSS로 코드를 옮겨서 작업한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Sass는 편리한 점이 정말 많은데 대표적으로 함수나 변수를 선언해서 사용할 수 있어서 수정이 편하고 코드의 가독성이 좋다는 게 가장 큰 이유 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;보통 node.js 환경에서 프로젝트를 진행한다면 Sass를 지원해주는 모듈들이 많아 Sass파일 자체를 import해서 사용이 가능하지만 그게 아닌경우에는 작성한 Sass를 컴파일한 CSS를 import해서 이용한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;오늘은 이런 non-node.js환경에서 Sass의 더욱 편리한 사용을 도와주는 2가지 VSCODE 익스텐션과 기본 설정을 소개해보려 한다.&lt;/p&gt;
&lt;h2 id=&quot;sassscss&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#sassscss&quot; aria-label=&quot;sassscss permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Sass(SCSS)&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Sass는 CSS로 컴파일 가능한 스크립트 언어이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;CSS의 확장판 정도라고 생각하면 될 것 같다.&lt;/p&gt;
&lt;h3 id=&quot;vscode-익스텐션-설치&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#vscode-%EC%9D%B5%EC%8A%A4%ED%85%90%EC%85%98-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;vscode 익스텐션 설치 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;VSCODE 익스텐션 설치&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ritwickdey.live-sass&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Live Sass Compiler&lt;/a&gt;:&lt;/strong&gt; Sass를 CSS로 실시간 컴파일해주는 익스텐션&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=Syler.sass-indented&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Sass&lt;/a&gt;:&lt;/strong&gt; Sass의 highlighting, autocomplete &amp;#x26; Formatter 지원해주는 익스텐션&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;live-sass-compiler-설정&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#live-sass-compiler-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;live sass compiler 설정 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Live Sass Compiler 설정&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Sass 익스텐션의 경우엔 별다른 설정이 필요 없지만 Live Sass Compiler는 나에게 맞는 형태로 설정이 필요하다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;설정을 위해 VSCODE의 &lt;code class=&quot;language-text&quot;&gt;settings.json&lt;/code&gt; 파일에 다음 내용을 추가해주자&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;liveSassCompile.settings.formats&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;expanded&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;extensionName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.css&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;savePath&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;~/../css&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;compressed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;extensionName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.min.css&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;savePath&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;~/../css&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;min.css는 css의 공백과 줄 바꿈을 삭제해 용량을 줄인 파일로 전송량을 줄일 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;br&gt;나는 어차피 작성은 Sass로 하고 컴파일된 CSS를 직접 수정할 필요가 없다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;min.css파일만 필요하기 때문에 다음과 같은 설정으로 사용한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;json&quot;&gt;&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token property&quot;&gt;&quot;liveSassCompile.settings.formats&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;format&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;compressed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;extensionName&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;.min.css&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token property&quot;&gt;&quot;savePath&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;~/../css&quot;&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;br/&gt;
&lt;div class=&quot;img-txt-wrap&quot;&gt;
    &lt;div class=&quot;img-wrap&quot;&gt;
      설정후 우측 하단에 Watch Sass를 클릭하시면 Sass파일의 수정을 감지해 실시간으로 CSS파일을 만들어준다.
      &lt;img width=&quot;600&quot; src=&quot;https://user-images.githubusercontent.com/71566740/133251442-d957eeaf-b125-4419-87bf-0fd5aa3f0413.png&quot;&gt;
      &lt;br&gt;
      나는 다음과 같은 구조를 주로 사용하기 때문에 이렇게 설정했지만 다른 설정을 원하시면 `savePath`부분에 원하는 컴파일 위치를 작성해서 사용하면 된다.
       &lt;img width=&quot;800&quot; src=&quot;https://user-images.githubusercontent.com/71566740/133251746-ffd66e52-3d03-42cd-8bfd-0d90f861854b.png&quot;&gt;
    &lt;/div&gt;
&lt;/div&gt;</content:encoded></item><item><title><![CDATA[크롤링을 통한 데이터 수집하기]]></title><description><![CDATA[나는 보통 API를 만들거나 Tensorflow 학습에 사용하는 데이터를 수집하는데 크롤링을 이용한다. 크롤링에 활용 가능한 도구는 언어별로 Jsoup(Java), BeautifulSoup(Python…]]></description><link>https://hyeokjaelee.github.io/nodejs-crawling/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/nodejs-crawling/</guid><pubDate>Tue, 31 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나는 보통 API를 만들거나 Tensorflow 학습에 사용하는 데이터를 수집하는데 크롤링을 이용한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;크롤링에 활용 가능한 도구는 언어별로 Jsoup(Java), BeautifulSoup(Python) 등 여러 종류가 있지만 이번 포스트에서는 내가 자주 사용하는 Javascript, Node.js 도구들을 이용해 &lt;a href=&quot;http://openinsider.com/insider-purchases-25k&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;OpenInsider&lt;/a&gt;(해외 내부자 거래 정보 사이트)를 크롤링하는 과정을 간단하게 설명해보려한다.
(언어마다 도구는 달라도 동작 방식은 대체로 비슷함)&lt;/p&gt;
&lt;h2 id=&quot;크롤링crawling&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%ED%81%AC%EB%A1%A4%EB%A7%81crawling&quot; aria-label=&quot;크롤링crawling permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;크롤링(Crawling)&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;크롤링은 웹 페이지에서 원하는 데이터를 추출해 내는 행위이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;크롤링을 위해 개발된 소프트웨어를 크롤러(Crawler)라 한다.&lt;/p&gt;
&lt;h2 id=&quot;도구-선택&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EB%8F%84%EA%B5%AC-%EC%84%A0%ED%83%9D&quot; aria-label=&quot;도구 선택 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;도구 선택&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Node.js에서도 크롤링에 사용할 수 있는 도구는 많고 그중에 용도에 맞게 선택하면 된다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;해당 페이지는 로그인도 필요 없고 따로 크롤링이 차단되어 있지도 않기 때문에 단순 http 라이브러리와 parsing 라이브러리만 사용해도 크롤링이 가능하다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;만약 특정 이유로 사람이 직접 데이터를 수집하는 것처럼 브라우저를 핸들링하는 방법으로 크롤링 해야 한다면 속도는 느리지만 Chromium을 제어하는 도구들(Puppeteer 등)을 사용하면 된다. (시간이 된다면 Puppeteer 사용방법도 다뤄볼 예정)&lt;/p&gt;
&lt;h3 id=&quot;-nodejs-라이브러리&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-nodejs-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC&quot; aria-label=&quot; nodejs 라이브러리 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;📚 Node.js 라이브러리&lt;/h3&gt;
&lt;h4 id=&quot;http-라이브러리-axios&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#http-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-axios&quot; aria-label=&quot;http 라이브러리 axios permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTP 라이브러리: Axios&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;http 라이브러리에는 종류가 굉장히 많고 나는 평소 Request를 자주 사용해 왔는데 해당 라이브러리가 deprecated 되었다는 소식을 듣고 성능이 좋다는 Axios를 사용해 보기로함&lt;/p&gt;
&lt;h4 id=&quot;parsing-라이브러리-cheerio&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#parsing-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-cheerio&quot; aria-label=&quot;parsing 라이브러리 cheerio permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Parsing 라이브러리: Cheerio&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;사실 parsing 라이브러리는 없어도 직접 파싱 해서 사용할 수 있지만 방대한 량의 html 코드를 파싱 하는 과정에서 코드가 복잡해지고 가독성도 떨어진다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;여기서는 jQuery 문법을 그대로 사용할 수 있는 Cheerio를 사용해서 파싱 하겠다.&lt;/p&gt;
&lt;h2 id=&quot;개발환경-설정&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EB%B0%9C%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;개발환경 설정 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개발환경 설정&lt;/h2&gt;
&lt;h3 id=&quot;새-프로젝트-생성&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EC%83%88-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;새 프로젝트 생성 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;새 프로젝트 생성&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;$ &lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;프로젝트 이름&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
$ &lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;프로젝트 이름&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;
$ &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; init&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;사용할-nodejs-모듈-설치&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%ED%95%A0-nodejs-%EB%AA%A8%EB%93%88-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;사용할 nodejs 모듈 설치 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용할 node.js 모듈 설치&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;bash&quot;&gt;&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; axios cheerio&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;크롤링-맛보기&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%ED%81%AC%EB%A1%A4%EB%A7%81-%EB%A7%9B%EB%B3%B4%EA%B8%B0&quot; aria-label=&quot;크롤링 맛보기 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;크롤링 맛보기&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이제 원하는 정보들의 위치를 찾아야 한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;원하는 정보를 오른쪽 마우스로 클릭후 검사를 사용하면 쉽게 찾을 수 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;거래 날짜와 해당 주식의 ticker 값을 받아오기 위한 selector를 복사해보자&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/131478329-82d599e6-56fa-44df-b80a-e609896315f8.png&quot; alt=&quot;test&quot; class=&quot;max-w-full rounded-sm my-12 mx-auto&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;첫번째 값을 기준으로 각 정보의 slector는 다음과 같은걸 확인 할 수 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;거래날짜&lt;/strong&gt;: &lt;code class=&quot;language-text&quot;&gt;#tablewrapper &gt; table &gt; tbody &gt; tr:nth-child(1) &gt; td:nth-child(3) &gt; div&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;strong&gt;ticker&lt;/strong&gt;: &lt;code class=&quot;language-text&quot;&gt;#tablewrapper &gt; table &gt; tbody &gt; tr:nth-child(1) &gt; td:nth-child(4) &gt; b &gt; a&lt;/code&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이 구조를 보면 한 가지 거래 정보는 같은 tr태그에 포함되어 있다는 걸 알 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;indexjs&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#indexjs&quot; aria-label=&quot;indexjs permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;index.js&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;생성한 프로젝트에 index.js 파일을 만들고 코드를 작성한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;여러 가지 방법이 있겠지만 나는 map 메서드를 이용해 모든 tr태그들의 거래 날짜와 정보를 가진 Object Array를 출력하는 코드로 작성했다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;javascript&quot;&gt;&lt;pre style=&quot;counter-reset: linenumber 0&quot; class=&quot;language-javascript line-numbers&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cheerio &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;cheerio&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; axios &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;axios&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;token comment&quot;&gt;//크롤링 대상 URL, axios의 get은 비동기 함수이므로 async-await을 사용한다.&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; html &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;http://openinsider.com/insider-purchases-25k&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    $ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cheerio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;html&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; trElements &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;#tablewrapper &gt; table &gt; tbody &gt; tr&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; insiderTradeData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; trElements
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;index&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; tr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;date&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;td:nth-child(3) &gt; div&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;token literal-property property&quot;&gt;ticker&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;tr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;td:nth-child(4) &gt; b &gt; a&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toArray&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;insiderTradeData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot; style=&quot;white-space: normal; width: auto; left: 0;&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;실행&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%ED%96%89&quot; aria-label=&quot;실행 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실행&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;node index&lt;/code&gt;로 실행해보면 결과는 다음과 같이 크롤링된 정보들을 확인할 수 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/133531609-93363fba-e51e-47aa-b03a-5cad03bc1795.png&quot; alt=&quot;test&quot; class=&quot;max-w-full rounded-sm my-12 mx-auto&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;마지막으로&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%A7%80%EB%A7%89%EC%9C%BC%EB%A1%9C&quot; aria-label=&quot;마지막으로 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마지막으로&lt;/h2&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;위에서 사용했던 http 라이브러리나 parsing 라이브러리 둘 다 크롤링에 활용 가능한 도구이지 &apos;크롤링만을 위한 도구&apos;가 아니다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;해당 라이브러리가 어떤 역할을 하는지 직접 찾아보는게 좋다.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;크롤링은 꼭 개발자가 아니더라도 원하는 데이터를 자급자족할 수 있다는 점에서 활용도가 높다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;위에서 다뤘던 예제는 기초적인 크롤링 방법만을 다룬 것이므로 실제 크롤링을 이용해 무언가를 하려면 대상의 URL 규칙성, 페이지의 구조 등을 직접 분석해보면서 코드를 작성하는 방법을 고민해봐야 한다.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;크롤링은 사람이 직접 데이터를 수집하는 것보다 훨씬 빠른 속도로 서버에 다수에 요청을 보내서 데이터를 응답받기 때문에 크롤링 대상 서버에 문제를 발생시킬 수 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;위와 같은 이유로 크롤링이 차단되어 있는 사이트들도 있으니 크롤링이 허용되어 있는 사이트인지 확인하는 것도 중요하다.&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;크롤링으로 처벌을 받은 판례가 있으니 실제 서비스를 위한 코드를 작성할 때는 해당 정보가 크롤링이 허용되는 정보인지 잘 확인해 보시고 사용하는 게 좋을 것 같다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Copilot 사용 후기]]></title><description><![CDATA[Copilot 프리뷰 초대장을 받고 한 달 정도 실사용해보면서 느낀 점들을 공유해보려 한다. Copilot Copilot은 GPT-3를 기반으로 Github에 올라와 있는 수많은 코드들을 학습해 만든 코딩 AI이다. Github…]]></description><link>https://hyeokjaelee.github.io/copilot-review/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/copilot-review/</guid><pubDate>Thu, 26 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Copilot 프리뷰 초대장을 받고 한 달 정도 실사용해보면서 느낀 점들을 공유해보려 한다.&lt;/p&gt;
&lt;h2 id=&quot;copilot&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#copilot&quot; aria-label=&quot;copilot permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Copilot&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Copilot은 GPT-3를 기반으로 Github에 올라와 있는 수많은 코드들을 학습해 만든 코딩 AI이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Github에서 얼마 전 &lt;a href=&quot;https://copilot.github.com/&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Copilot Technical Preview&lt;/a&gt;를 공개했고 바로 다운로드해서 사용하지는 못하고 위 링크에서 신청한 후에 초대장을 받아야 사용 가능했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/71566740/130893661-970498c3-c250-4d03-9096-f443737461d3.png&quot; alt=&quot;invite&quot; class=&quot;max-w-full rounded-sm my-12 mx-auto&quot;&gt;&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Github 활동량이 많을수록 빠르게 수락된다고 하던데 내 기준으로 7월 초쯤에 신청하고 일주일 정도 후에 초대장을 받은 것 같다.&lt;/p&gt;
&lt;h2 id=&quot;한-달간-사용해본-느낌&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%ED%95%9C-%EB%8B%AC%EA%B0%84-%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B8-%EB%8A%90%EB%82%8C&quot; aria-label=&quot;한 달간 사용해본 느낌 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;한 달간 사용해본 느낌&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;일단 이전에 봤던 GPT-3를 이용해 작문하는 것을 매우 인상적으로 보았기 때문에 같은 기반인 Copilot 역시 기대가 컸다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;내가 주석이나 함수명을 잘 짓는 편은 아니라고 생각하는데 내 의도를 잘 파악해서 코드를 작성해주는 걸 보고 좀 놀랐고 가끔 내가 머릿속으로 생각해놨던 코드를 작성하다 보면 거의 완벽하게 완성해줄 때는 정말 감탄했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;하지만 아직 AI가 개발자를 대체할 거다 이런 이야기를 할 정도는 아닌 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Copilot이 개발자의 대체라기보다는 개발자의 개발을 좀 더 편하게 해주는 도구 정도로 느껴졌다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;주석과 이름만으로 완성되는 코드들도 어느 정도 있었지만 대부분의 경우에는 어느 정도 코드를 완성하면 뒷부분을 채워주는 정도 거나 큰 틀은 내 생각대로 작성되었지만 중간중간 의도를 벗어나거나 오류가 있는 코드들도 있어서 수정해가면서 코드를 작성해야 했다.&lt;/p&gt;
&lt;h3 id=&quot;장점&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;장점 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;오류가 있는 코드가 작성되더라도 큰 틀은 의도에서 크게 벗어나는 경우가 적어 실제로 내가 작성해야 하는 코드량은 줄어듦&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;먼저 작성했던 코드에서 사용하던 변수, 함수 등의 자동완성이 VSC의 그것보다 편리함&lt;/p&gt;
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;VSCode의 자동완성은 어느 정도 코드를 작성하면 선언된 변수 또는 함수 중에 선택해야 하지만 Copilot은 문맥상 알맞은 것을 추천해 줌&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;시간 계산이나 단위 변환 등 대중적인 함수는 대부분 완벽하게 작성해줌&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;단점&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;단점 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;코드 작성 스타일이 내가 작성하고 있는 스타일과 안 맞을 때가 많음&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;AI가 예상한 코드가 표시될 때 내가 작성 중인 코드의 가독성을 해침&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;오류가 있는 코드로 작성하는 경우가 많음&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;중괄호를 잘못 닫는 경우가 많아서 가끔 생각 없이 코딩할 때 Copilot이 잘못 닫은 괄호를 찾아야 하는 경우도 있음&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;내-생각&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EB%82%B4-%EC%83%9D%EA%B0%81&quot; aria-label=&quot;내 생각 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;내 생각&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;분명히 Copilot이 개발자의 생산성에 도움이 되는 도구임에는 분명하지만 생각보다 오류도 많고 너무 맹신하고 코드를 작성할 수는 없을 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;또한 Github에 있는 방대한 량의 코드를 학습한 AI가 작성해주는 코드가 저작권이 없는 코드라는 보장이 없으니 단순 Toy project가 아닌 수익성이 있는 프로그램을 작성할 때는 사용에 주의해야 할 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이전에 사용하던 VSC 익스텐션 중에 Tabnine AI가 비슷한 기능을 했었지만 확실히 Copilot의 학습 데이터 크기와 방식이 달라 정확도는 Copilot이 월등해 보인다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Tabnine AI는 매달 무료로 작성해주는 코드의 양이 정해저 있고 그 이후로는 유료 결제를 해야 사용할 수 있는데 아마 Copilot도 비슷한 수익 모델을 가질 걸로 예상한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Gatsby 블로그 이전 중간 리뷰]]></title><description><![CDATA[나는 Next.JS로 제작한 기존 블로그를 운영 중이었다. 계속 불편함을 느끼고 새로 만들자는 생각을 했지만 계속 미뤄지다가 얼마전 부터 Gatsby…]]></description><link>https://hyeokjaelee.github.io/blog-remake-review1/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/blog-remake-review1/</guid><pubDate>Mon, 02 Aug 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나는 Next.JS로 제작한 기존 블로그를 운영 중이었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;계속 불편함을 느끼고 새로 만들자는 생각을 했지만 계속 미뤄지다가 얼마전 부터 Gatsby로 새로운 블로그를 만들기 시작했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이번에는 어느 정도 블로그 뼈대가 잡힌 김에 새로운 블로그를 만들면서 겪은 경험들을 공유해보려 한다.&lt;/p&gt;
&lt;h2 id=&quot;기존-블로그&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EC%A1%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8&quot; aria-label=&quot;기존 블로그 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기존 블로그&lt;/h2&gt;
&lt;h3 id=&quot;-왜-nextjs를-사용했는가&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EC%99%9C-nextjs%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%96%88%EB%8A%94%EA%B0%80&quot; aria-label=&quot; 왜 nextjs를 사용했는가 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;❓ 왜 Next.js를 사용했는가?&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;SPA, SSR&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;리액트를 사용해봤다면 쉽게 사용 가능&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;별도 라이브러리 없이 간편한 라우팅을 지원&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;Typescript 지원&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;-사용하면서-느낀점&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4%EC%84%9C-%EB%8A%90%EB%82%80%EC%A0%90&quot; aria-label=&quot; 사용하면서 느낀점 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;🤔 사용하면서 느낀점&lt;/h3&gt;
&lt;h4 id=&quot;정보-부족&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EC%A0%95%EB%B3%B4-%EB%B6%80%EC%A1%B1&quot; aria-label=&quot;정보 부족 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;정보 부족&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Next.JS를 Typescript로 작성해서 Github page로 배포하는 블로그가 대중적인 조합이 아니라 오류에 대한 정보를 찾기가 어려웠다.&lt;/p&gt;
&lt;h4 id=&quot;편의성&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%ED%8E%B8%EC%9D%98%EC%84%B1&quot; aria-label=&quot;편의성 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;편의성&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;작성한 포스트의 배포 과정이 너무 복잡했고 잔 오류가 너무 많았다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;분명 Gh-pages와 Next.js만 사용할 때는 괜찮았는데 Typescript를 이용해 작성하면 정적 사이트로 정상 빌드되지만 Github에 정상적으로 Push 되지 않는 경우가 많았다.
(한두 번이면 이해하겠는데 생각보다 자주 먹통이었음)&lt;/p&gt;
&lt;h4 id=&quot;이사를-결심한-이유&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EC%82%AC%EB%A5%BC-%EA%B2%B0%EC%8B%AC%ED%95%9C-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;이사를 결심한 이유 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이사를 결심한 이유&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;처음에는 새로 만들 엄두가 안 나서 잔 오류들을 수정해가면서 사용했는데 Dependencies가 조금만 바뀌어도 다시 오류가 생기고 포스팅 시간보다 이런 문제들을 해결하는데 더 많은 시간이 들어가면서 완전히 새로 만들기보다는 포스팅 때마다 문제가 생겼던 Github page를 통한 배포를 포기하고 다른 방법 찾아보려 했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;가장 처음 생각난 건 AWS를 이용한 호스팅이었지만 한번 만들어두면 계속 쓸 거라는 생각에 기간 한정 무료(유료) 서비스는 이용하기 싫었고 평소 토이 프로젝트에 자주 사용했던 Heroku로 배포해봤는데 서버가 Sleep상태면 서버를 다시 깨우는데 시간이 너무 오래 걸렸다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;결국 &quot;기간 제한없이 무료로 웹을 호스팅 할 수 있는 건 Github page가 제일 낫다&quot;라는 생각을 했고 Github page를 포기 못해 Github page를 제외한 모든것을 바꾸기로 했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그리고 나중에 알게 된 거지만 SPA, SSR의 장점 때문에 Next.js를 사용하려는데 정적 웹호스팅에서는 해당 장점들 일부를 포기해야 했다.
(사람들이 안쓰는데는 이유가 있더라)&lt;/p&gt;
&lt;h2 id=&quot;새로운-블로그&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8&quot; aria-label=&quot;새로운 블로그 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;새로운 블로그&lt;/h2&gt;
&lt;h3 id=&quot;-새로운-블로그-고려사항&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%EC%83%88%EB%A1%9C%EC%9A%B4-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EA%B3%A0%EB%A0%A4%EC%82%AC%ED%95%AD&quot; aria-label=&quot; 새로운 블로그 고려사항 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;✅ 새로운 블로그 고려사항&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;h4 id=&quot;typescript-지원&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#typescript-%EC%A7%80%EC%9B%90&quot; aria-label=&quot;typescript 지원 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Typescript 지원&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;한번 만들어두면 계속 쓸 텐데 유지 보수하기 확실히 Javascript보단 (개인적으로) 편하다고 느꼈고 공식적으로 Typescript를 지원하는 도구를 사용하고 싶었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;h4 id=&quot;gh-pages를-이용한-배포&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#gh-pages%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EB%B0%B0%ED%8F%AC&quot; aria-label=&quot;gh pages를 이용한 배포 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gh-pages를 이용한 배포&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;Github page에 호스팅 할 수 있는 여러 가지 도구들이 있지만 좀 더 안정적으로 관리할 수 있도록 정적 웹으로의 변환을 지원하는 도구를 사용하고 싶었다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;-후보&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-%ED%9B%84%EB%B3%B4&quot; aria-label=&quot; 후보 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;📜 후보&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;
&lt;h4 id=&quot;gatsby&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#gatsby&quot; aria-label=&quot;gatsby permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gatsby&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;리액트 기반, 라이브러리 대부분 익숙함&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;GraphQL을 통해 간편하게 Data 관리 가능&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;Typescript 설정이 리액트와 별 차이가 없음&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;위 조건을 만족하는 도구는 크게 두 가지로 Jekyll, Gatsby가 있었고 둘 다 사용해보면서 새삼 개발 도구 선택이 얼마나 중요한지 느꼈다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그동안 시간을 투자해 구현해야 사용할 수 있던 기능들이 기본적으로 구현돼있는 라이브러리들이 많았고 남들이 많이 쓰는 데는 이유가 있었다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그 결과 위와 같은 이유로 Gatsby가 보인한테는 더 맞는듯 했다.(관련 커뮤니티는 Jekyll가 더 활성화되어있는 듯)&lt;/p&gt;
&lt;h2 id=&quot;gatsby-블로그-템플릿&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#gatsby-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%85%9C%ED%94%8C%EB%A6%BF&quot; aria-label=&quot;gatsby 블로그 템플릿 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Gatsby 블로그 템플릿&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;일단 Gatsby에 공유되어있는 템플릿 중에 정말 괜찮은 디자인이 많아서 템플릿 중 하나를 수정해서 사용하려 했지만 블로그 제작을 목적으로 하는 템플릿은 마음에 드는게 없어 다른 용도의 템플릿 중 괜찮은 것을 찾아 몇 가지 기능을 추가해서 사용하려 했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;하지만 기능을 추가해 가면서 다음과 같은 문제점이 있어서 그냥 템플릿 없이 &lt;a href=&quot;https://www.gatsbyjs.com/starters/gatsbyjs/gatsby-starter-default/&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;기본 Gatsby 설정&lt;/a&gt;으로 만들게 되었다.&lt;/p&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;사용하지 않는 잡다한 기능들이 많음&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;최신 CSS로 구현 가능한 기능들이 JS로 구현되어있음&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;원래 탬플릿의 스타일과 내가 새로 작성한 스타일이 충돌하는 경우가 있음&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;위와 같은 문제점을 수정하는데 너무 많은 시간을 쓰게 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;마지막으로&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EB%A7%88%EC%A7%80%EB%A7%89%EC%9C%BC%EB%A1%9C&quot; aria-label=&quot;마지막으로 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;마지막으로&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;앞으로도 해당 블로그를 관리하고 필요한 기능들도 마저 구현해야겠지만 일단 도구 선택은 만족한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이미 블로그에 포스팅도 가능하고 어느 정도 사용이 가능해서 당장 이번 글부터 포스팅해나가겠지만 추후 모든 기능이 완성되고 SEO까지 마친다면 블로그 제작 리뷰를 다시 한번 작성할 예정이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;비록 템플릿을 사용하지 않았지만 Gatsby를 통해 자신만의 블로그를 만들어 보고 싶으신 분들은&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;a href=&quot;https://www.gatsbyjs.com/starters/&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Gatsby Starter Library&lt;/a&gt;에서 여러가지 템플릿을 확인 가능하다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Git Commit Message Convention]]></title><description><![CDATA[…]]></description><link>https://hyeokjaelee.github.io/good-commit-message/</link><guid isPermaLink="false">https://hyeokjaelee.github.io/good-commit-message/</guid><pubDate>Sat, 03 Jul 2021 00:00:00 GMT</pubDate><content:encoded>&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;커밋 메시지를 작성할 때는 규칙을 정해놓고 일관성 있게 작성해야 한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;코드를 작성하다 보면 간혹 이전 코드를 참고 또는 회귀해야 할 경우가 있는데 커밋 수가 적다면 상관없지만 커밋 수가 많아질수록 수많은 커밋 로그 중에 원하는 시점을 찾는 것이 어렵다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;또한 내 커밋이면 어느 정도 지저분한 커밋 로그 속에서 원하는 정보를 찾을 수 있어도 다른 사람이 내 커밋 로그를 참고해야 하는 경우에는 어려움이 배가된다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이러한 경우에 커밋 메시지가 제대로 작성되어 있다면 보다 원활하게 원하는 정보를 찾을 수 있다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;커밋 메시지 작성법은 큰 틀은 있지만 개발자들마다 스타일이 다르고 정확하게 이렇게 작성해야 한다는 규칙은 없다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이 포스트는 Angural Commit Message Format을 기반으로 내 나름대로 보기 편하다고 느낀 구조를 정리한 내용이다.&lt;/p&gt;
&lt;h2 id=&quot;commit-message&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#commit-message&quot; aria-label=&quot;commit message permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commit Message&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{emoji} {type}({scope}): {short summary} //header
​
{description} //body
​
BREAKING CHANGE: {breaking change summary} //footer
​
{breaking change description}
​
​
{linked issue}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;해당 커밋 메시지의 전체 구조는 emoji를 제외하면 Angural Commit Message Format과 동일&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;header, body, footer는 빈 행으로 구분&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;header를 제외하면 모두 생략 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;header&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#header&quot; aria-label=&quot;header permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Header&lt;/h3&gt;
&lt;h4 id=&quot;emoji&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#emoji&quot; aria-label=&quot;emoji permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Emoji&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;개발을 하다 보면 Angural Commit Message Format 만으로는 구분이 명확하지 않을 때가 많았고 이 부분을 나는 Type 앞에 Emoji를 추가함으로써 보완했다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;내가 Commit Message에 활용하는 Emoji들의 정보는 &lt;a href=&quot;https://gitmoji.dev/&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Gitmoji&lt;/a&gt;에서 확인 가능하다.&lt;/p&gt;
&lt;h4 id=&quot;type&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#type&quot; aria-label=&quot;type permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Type&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;반드시 다음 중 하나여야 한다.&lt;/p&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;build: 빌드 시스템 또는 외부 종속성에 영향을 미치는 경우
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;gulp, broccoli, npm, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;ci: CI 구성 파일 및 스크립트 수정
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Travis, Circle, BrowserStack, SauceLabs, etc.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;docs: 단순 문서 수정&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;feat: 새로운 기능 추가&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;fix: 버그 수정&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;perf: 성능 개선이 있는 변경이 있는 코드 수정&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;refactor: 버그 수정, 기능 추가, 성능 개선을 제외한 코드 수정&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;test: 테스트 관련 변경&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;revert: 이전 커밋으로 회귀할 때&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;type은 revert를 사용하되 short summary는 회귀 대상 커밋의 그것과 같아야 함&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;명확한 회귀 이유를 body에 설명해 주어야 함&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;회귀 대상의 커밋 SHA 정보를 다음과 같이 body에 표시해 주어야 함
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;This reverts commit {SHA}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;scope-생략-가능&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#scope-%EC%83%9D%EB%9E%B5-%EA%B0%80%EB%8A%A5&quot; aria-label=&quot;scope 생략 가능 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Scope (생략 가능)&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;추가적인 문맥 정보를 제공하기 위한 목적으로 괄호 안에 작성한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;&lt;a href=&quot;https://github.com/angular/angular/blob/master/CONTRIBUTING.md#scope&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Angular.js 공식 문서&lt;/a&gt;에서는 영향을 받는 모듈명을 작성하라고 되어있는데 만약 모듈을 사용하지 않는다면 어디를 수정했는지 정도로 보면 될 것 같다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;함수를 수정했으면 해당 함수의 이름, 메소드를 추가했으면 해당 클래스 이름 등 수정 대상을 한눈에 특정할 수 있는 내용이 들어가면 된다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;추가적으로 &lt;a href=&quot;https://gist.github.com/qoomon/5dfcdf8eec66a051ecd85625518cfd13&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;이슈 ID를 적지 말라는 글&lt;/a&gt;도 있다.&lt;/p&gt;
&lt;h4 id=&quot;short-summary&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#short-summary&quot; aria-label=&quot;short summary permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Short summary&lt;/h4&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;첫 글자를 대문자로 작성하지 않는다.&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;50글자 내로 제한한다.&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;과거형으로 작성하지 않는다.&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;명령문으로 작성한다.&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;끝에 특수문자를 사용하지 않는다.
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;마침표, 느낌표, 물음표 등&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;body&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#body&quot; aria-label=&quot;body permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Body&lt;/h3&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;각 내용의 시작은 &lt;code class=&quot;language-text&quot;&gt;*&lt;/code&gt;로 시작하고 공백 한 칸 띄우고 작성한다.&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;각 내용은 72글자 내로 제한한다.&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;Header의 short summary와 같이 현재 시제를 사용한다.
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;fixes, fixed ⇨ fix&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;어떻게 보다는 무엇과 왜를 설명한다.&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;변경의 영향을 설명하기 위해 이전 동작과 새 동작을 비교할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;-footer&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-2xl&quot;&gt;&lt;a href=&quot;#-footer&quot; aria-label=&quot; footer permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;👣 Footer&lt;/h3&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Footer에는 breaking change와 관련된 정보를 포함하거나 이슈를 연결한다&lt;/p&gt;
&lt;h4 id=&quot;breaking-change&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#breaking-change&quot; aria-label=&quot;breaking change permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Breaking Change&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Angural 문서에 따르면 Breaking change는 애플리케이션을 구성하고 있는 모듈 등을 업데이트, 추가, 제거해야 하는 변화를 의미한다.&lt;/p&gt;
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;간략하게 대규모 변경사항 정도로 생각하시면 좋을 듯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;그 외에 API를 만들 때 해당 API를 사용하는 다른 앱들의 코드를 수정해야 하는 경우에도 API 커밋 메시지에 Breaking Change라고 표기한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Footer에는 breaking change와 관련된 정보를 포함할 수 있다.&lt;/p&gt;
&lt;h4 id=&quot;linked-issue&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-xl&quot;&gt;&lt;a href=&quot;#linked-issue&quot; aria-label=&quot;linked issue permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Linked issue&lt;/h4&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Github issue를 연결한다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;나는 이슈 연결을 할 때 주로 다음 두 가지 키워드를 사용한다.&lt;/p&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;resolve: 이슈를 해결한 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;related to: 연관된 이슈가 있는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;다음은 pull request의 description이나 커밋 메시지에서 Issue 연결을 제공하는 키워드들이다.&lt;/p&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;close&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;closes&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;closed&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;fix&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;fixes&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;fixed&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;resolve&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;resolves&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;resolved&lt;/li&gt;
&lt;/ul&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;이슈가 같은 repository에 있는지 여부에 따라 닫는 구문이 달라진다.&lt;/p&gt;
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;해당 내용은 &lt;a href=&quot;https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Github 공식 문서&lt;/a&gt;에 원문이 있으니 확인해 보는걸 추천&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table class=&quot;table-auto my-4&quot;&gt;
&lt;thead&gt;
&lt;tr class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 text-xs&quot;&gt;
&lt;th class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 whitespace-pre-wrap&quot;&gt;연결된 이슈&lt;/th&gt;
&lt;th class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 whitespace-pre-wrap&quot;&gt;구문&lt;/th&gt;
&lt;th class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 whitespace-pre-wrap&quot;&gt;예시&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 text-xs&quot;&gt;
&lt;td class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 whitespace-pre-wrap&quot;&gt;같은 repository에 있는 경우&lt;/td&gt;
&lt;td class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 whitespace-pre-wrap&quot;&gt;KEYWORD #ISSUE-NUMBER&lt;/td&gt;
&lt;td class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 whitespace-pre-wrap&quot;&gt;closes #10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 text-xs&quot;&gt;
&lt;td class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 whitespace-pre-wrap&quot;&gt;다른 repository에 있는 경우&lt;/td&gt;
&lt;td class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 whitespace-pre-wrap&quot;&gt;KEYWORD OWNER/REPOSITORY#ISSUE-NUMBER&lt;/td&gt;
&lt;td class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 whitespace-pre-wrap&quot;&gt;fixes octo-org/octo-repo#100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 text-xs&quot;&gt;
&lt;td class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 whitespace-pre-wrap&quot;&gt;복합 적인 경우&lt;/td&gt;
&lt;td class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 whitespace-pre-wrap&quot;&gt;각 이슈의 전체 구문을 작성&lt;/td&gt;
&lt;td class=&quot;border border-zinc-700 dark:border-zinc-400 px-4 py-2 whitespace-pre-wrap&quot;&gt;resolves #10,&lt;br&gt;resolves #123,&lt;br&gt;resolves octo-org/octo-repo#100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&quot;자주-쓰이는-영어-단어-목록&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EC%A3%BC-%EC%93%B0%EC%9D%B4%EB%8A%94-%EC%98%81%EC%96%B4-%EB%8B%A8%EC%96%B4-%EB%AA%A9%EB%A1%9D&quot; aria-label=&quot;자주 쓰이는 영어 단어 목록 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자주 쓰이는 영어 단어 목록&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;다음은 커밋에 자주 사용하는 영어 단어 목록이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;해당 내용도 &lt;a href=&quot;https://blog.ull.im/engineering/2019/03/10/logs-on-git.html&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;좋은 git commit 메시지를 위한 영어 사전&lt;/a&gt;에 잘 정리해 주신 글이 있다.&lt;/p&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Fix&lt;/strong&gt;: 버그, 이슈 등 잘못된 무언가를 고치는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Correct&lt;/strong&gt;: 문법 오류, 타입, 이름, 오타 등을 수정하는 경우
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Fix와 비슷하지만 보다 단순한 수정에 자주 쓰임)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Remove&lt;/strong&gt;: 코드나 파일을 삭제하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Add&lt;/strong&gt;: 새 코드나 파일을 추가하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Implement&lt;/strong&gt;: 무언가를 구현한 경우, 구현한 대상을 강조할 때 사용
&lt;blockquote class=&quot;border-l-4 border-gray-500 pl-4 italic&quot;&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;Add와 비슷하지만 좀 더 큰 코드 단위 추가에 자주 쓰임&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Use&lt;/strong&gt;: 구현을 위해 무언가를 사용한 경우, 특정 라이브러리나 프레임워크를 사용하기 위한 코드를 추가하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Refactor&lt;/strong&gt;: 코드를 리팩터링 하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Simplify&lt;/strong&gt;: 코드를 단순화하는 경우, 리팩터링과 비슷하지만 중복 제거 등 단순화만 하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Update&lt;/strong&gt;: 무언가를 업데이트하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Revise&lt;/strong&gt;: 문서를 수정하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Improve&lt;/strong&gt;: 성능, 구조, 접근성 등을 개선하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Make&lt;/strong&gt;: 특정한 동작이 되게 만드는 경우, 기존 동작을 변경하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Allow&lt;/strong&gt;: 특정 동작을 허용하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Ensure&lt;/strong&gt;: 특정 처리를 보장하는 경우, if문처럼 조건을 확실하게 제공하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Prevent&lt;/strong&gt;: 특정 처리를 못하게 막는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Avoid&lt;/strong&gt;: 특정 처리를 회피하는 경우, if문처럼 조건에 따라 특정 동작을 회피하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Move&lt;/strong&gt;: 코드나 파일을 이동하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Rename&lt;/strong&gt;: 파일명을 변경한 경우, 단순 변수명, 함수명 등의 변경만 수행한 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Verify&lt;/strong&gt;: 검증 코드를 추가하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Set&lt;/strong&gt;: 변수, 리터럴, 텍스트 등 단순 값을 변경하는 경우&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;strong&gt;Pass&lt;/strong&gt;: 매개변수를 전달하는 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;관련-개인-프로젝트&quot; style=&quot;position:relative;&quot; class=&quot;font-bold mt-10 mb-4 text-3xl&quot;&gt;&lt;a href=&quot;#%EA%B4%80%EB%A0%A8-%EA%B0%9C%EC%9D%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8&quot; aria-label=&quot;관련 개인 프로젝트 permalink&quot; class=&quot;anchor before&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;관련 개인 프로젝트&lt;/h2&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;지금까지 정리한 내용을 기반으로 커밋 메시지 가이드를 쉽게 작성할 수 있는 토이 프로젝트를 진행중이다.&lt;/p&gt;
&lt;p class=&quot;my-4 whitespace-pre-wrap&quot;&gt;관련 내용은 다음 링크들에서 확인 가능하다.&lt;/p&gt;
&lt;ul class=&quot;list-disc ml-5&quot;&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;a href=&quot;https://github.com/HyeokjaeLee/gititle&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Github repository&lt;/a&gt;&lt;/li&gt;
&lt;li class=&quot;list-item&quot;&gt;&lt;a href=&quot;/gititle&quot; class=&quot;text-blue-500 hover:underline&quot;&gt;Gititle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>